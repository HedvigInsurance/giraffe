type Query {
  insurance: Insurance!
  cashback: Cashback!
}

type Mutation {
  logout: Boolean!
  createSession: String!
  createOffer(details: OfferInput!): ID!
}

type Subscription {
  offer: OfferEvent!
}

type OfferEvent {
  insuranceId: ID!
  success: Boolean!
  insurance: Insurance!
}

input OfferInput {
  firstName: String!
  lastName: String!
  age: Int!
  address: String!
  postalNumber: String!
  city: String!
  insuranceType: InsuranceType!
  squareMeters: Int!
  personsInHousehold: Int!
  previousInsurer: String
}

type Insurance {
  address: String
  monthlyCost: Int
  safetyIncreasers: [String!]
  personsInHousehold: Int
  certificateUrl: String
  status: InsuranceStatus
  type: InsuranceType
  activeFrom: LocalDate
  insuredAtOtherCompany: Boolean
  presaleInformationUrl: String
  policyUrl: String
  currentInsurerName: String

  perilCategories: [PerilCategory]
}

type PerilCategory {
  title: String
  description: String
  iconUrl: String
  perils: [Peril]
}

type Peril {
  id: ID
  title: String
  imageUrl: String
  description: String
}

enum InsuranceStatus {
  PENDING
  ACTIVE
  INACTIVE
  INACTIVE_WITH_START_DATE
  TERMINATED
}

enum InsuranceType {
  RENT
  BRF
  STUDENT_RENT
  STUDENT_BRF
}

type Cashback {
  id: ID
  name: String
  imageUrl: String
}

scalar LocalDate
