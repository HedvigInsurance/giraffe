type Query {
  insurance: Insurance! @deprecated(reason: "Use `contracts` instead")
  cashback(locale: Locale): Cashback
  cashbackOptions(locale: Locale): [Cashback]!
  signStatus: SignStatus
  member: Member!
  gifs(query: String!): [Gif]!
  file(key: String!): File!
  messages: [Message]!
  currentChatResponse: ChatResponse
  chatState: ChatState!
  avatars: [Avatar]
  chatActions: [ChatAction]
  geo: Geo!
  angelStory(name: String!, locale: String): AngelStory

  """Returns all the contracts, combined into bundles."""
  contractBundles: [ContractBundle!]!
  """Returns all contracts the member currently holds, regardless of activation/termination status"""
  contracts: [Contract!]!
  """Returns whether a member has at least one contract"""
  hasContract: Boolean!
  """Returns a type describing whether the 'Self Change' functionality is possible."""
  selfChangeEligibility: SelfChangeEligibility!
  """All locales that are available and activated"""
  availableLocales: [Locale!]!
}

type Mutation {
  logout: Boolean!
  createSession(campaign: CampaignInput, trackingId: UUID): String!
  createSessionV2: SessionInformation
  createOffer(details: OfferInput!): Boolean @deprecated(reason: "Use Quotes instead")
  signOffer(details: SignInput!): Boolean @deprecated(reason: "Use `signOfferV2`.")
  signOfferV2(details: SignInput): BankIdSignResponse! @deprecated(reason: "Use Quotes instead")
  uploadFile(file: Upload!): File!
  uploadFiles(files: [Upload!]!): [File!]
  selectCashbackOption(id: ID!, locale: Locale): Cashback!
  offerClosed: Boolean! @deprecated(reason: "Use Quotes instead")
  startDirectDebitRegistration: URL!
  sendChatTextResponse(input: ChatResponseTextInput!): Boolean!
  sendChatSingleSelectResponse(input: ChatResponseSingleSelectInput!): Boolean!
  sendChatFileResponse(input: ChatResponseFileInput!): Boolean!
  sendChatAudioResponse(input: ChatResponseAudioInput!): Boolean!
  resetConversation: Boolean!
  editLastResponse: Boolean!
  updateEmail(input: String!): Member!
  updatePhoneNumber(input: String!): Member!
  registerPushToken(pushToken: String!): Boolean
  triggerFreeTextChat: Boolean
  triggerClaimChat(input: TriggerClaimChatInput!): Boolean
  triggerCallMeChat: Boolean
  emailSign: Boolean
  markMessageAsRead(globalId: ID!): Message!
  log(input: LoggingInput!): Boolean
  bankIdAuth: BankIdAuthResponse! @deprecated(reason: "Use `swedishBankIdAuth`.")
  swedishBankIdAuth: BankIdAuthResponse!
  norwegianBankIdAuth(personalNumber: String): NorwegianBankIdAuthResponse!
  danishBankIdAuth(personalNumber: String!): DanishBankIdAuthResponse!
  registerBranchCampaign(campaign: CampaignInput!): Boolean
  updateLanguage(input: String!): Boolean! # input should be in the format as Accept-Language header
  updatePickedLocale(pickedLocale: Locale!): Member!
  createAddressChangeQuotes(input: AddressChangeInput!): AddressChangeOutput!
}

enum Locale {
  sv_SE
  en_SE
  nb_NO
  en_NO
  da_DK
  en_DK
}

type Subscription {
  offer: OfferEvent @deprecated(reason: "Use Quotes instead")
  signStatus: SignEvent @deprecated(reason: "Use Quotes instead")
  message: Message!
  currentChatResponse(mostRecentTimestamp: String!): ChatResponse
  chatState(mostRecentTimestamp: String!): ChatState!
  authStatus: AuthEvent
}

input TriggerClaimChatInput {
  claimTypeId: ID
}

type Geo {
  countryISOCode: String!
}

type AngelStory {
  content: String!
}

type Message {
  globalId: ID!
  id: ID!
  body: MessageBody!
  header: MessageHeader!
}

type MessageHeader {
  messageId: ID!
  fromMyself: Boolean!
  timeStamp: String!
  richTextChatCompatible: Boolean!
  editAllowed: Boolean!
  shouldRequestPushNotifications: Boolean!
  pollingInterval: Int!
  loadingIndicator: String
  markedAsRead: Boolean!
  statusMessage: String
}

union MessageBody =
    MessageBodySingleSelect
  | MessageBodyMultipleSelect
  | MessageBodyText
  | MessageBodyNumber
  | MessageBodyAudio
  | MessageBodyBankIdCollect
  | MessageBodyFile
  | MessageBodyParagraph
  | MessageBodyUndefined

interface MessageBodyCore {
  type: String!
  id: ID!
  text: String!
}

type MessageBodySingleSelect implements MessageBodyCore {
  type: String!
  id: ID!
  text: String!
  choices: [MessageBodyChoices]
}

type MessageBodyMultipleSelect implements MessageBodyCore {
  type: String!
  id: ID!
  text: String!
  choices: [MessageBodyChoices]
}

type MessageBodyText implements MessageBodyCore {
  type: String!
  id: ID!
  text: String!
  placeholder: String
  keyboard: KeyboardType
  textContentType: TextContentType
}

type MessageBodyNumber implements MessageBodyCore {
  type: String!
  id: ID!
  text: String!
  placeholder: String
  keyboard: KeyboardType
  textContentType: TextContentType
}

enum KeyboardType {
  DEFAULT
  NUMBERPAD
  DECIMALPAD
  NUMERIC
  EMAIL
  PHONE
}

enum TextContentType {
  NONE
  URL
  ADDRESS_CITY
  ADDRESS_CITY_STATE
  ADDRESS_STATE
  COUNTRY_NAME
  CREDIT_CARD_NUMBER
  EMAIL_ADDRESS
  FAMILY_NAME
  FULL_STREET_ADDRESS
  GIVEN_NAME
  JOB_TITLE
  LOCATION
  MIDDLE_NAME
  NAME
  NAME_PREFIX
  NAME_SUFFIX
  NICK_NAME
  ORGANIZATION_NAME
  POSTAL_CODE
  STREET_ADDRESS_LINE1
  STREET_ADDRESS_LINE2
  SUBLOCALITY
  TELEPHONE_NUMBER
  USERNAME
  PASSWORD
}

type MessageBodyAudio implements MessageBodyCore {
  type: String!
  id: ID!
  text: String!
  url: String
}

type MessageBodyBankIdCollect implements MessageBodyCore {
  type: String!
  id: ID!
  text: String!
  referenceId: String
}

type MessageBodyParagraph implements MessageBodyCore {
  type: String!
  id: ID!
  text: String!
}

type MessageBodyFile implements MessageBodyCore {
  type: String!
  id: ID!
  text: String!
  key: String
  mimeType: String

  file: File!
}

type MessageBodyUndefined implements MessageBodyCore {
  type: String!
  id: ID!
  text: String!
}

union MessageBodyChoices =
    MessageBodyChoicesUndefined
  | MessageBodyChoicesSelection
  | MessageBodyChoicesLink

interface MessageBodyChoicesCore {
  type: String!
  value: String!
  text: String!
  selected: Boolean!
}

type MessageBodyChoicesUndefined implements MessageBodyChoicesCore {
  type: String!
  value: String!
  text: String!
  selected: Boolean!
}

type MessageBodyChoicesSelection implements MessageBodyChoicesCore {
  type: String!
  value: String!
  text: String!
  selected: Boolean!
  clearable: Boolean
}

enum MessageBodyChoicesLinkView {
  OFFER
  DASHBOARD
}

type MessageBodyChoicesLink implements MessageBodyChoicesCore {
  type: String!
  value: String!
  text: String!
  selected: Boolean!
  view: MessageBodyChoicesLinkView
  appUrl: String
  webUrl: String
}

type ChatState {
  ongoingClaim: Boolean!
  showOfferScreen: Boolean!
  onboardingDone: Boolean!
}

type ChatResponse {
  globalId: ID!
  id: ID!
  body: MessageBody!
  header: MessageHeader!
}

input ChatResponseBodyTextInput {
  text: String!
}

input ChatResponseTextInput {
  globalId: ID!
  body: ChatResponseBodyTextInput!
}

input ChatResponseBodySingleSelectInput {
  selectedValue: ID!
}

input ChatResponseSingleSelectInput {
  globalId: ID!
  body: ChatResponseBodySingleSelectInput!
}

input ChatResponseBodyFileInput {
  key: String!
  mimeType: String!
}

input ChatResponseFileInput {
  globalId: ID!
  body: ChatResponseBodyFileInput!
}

input ChatResponseBodyAudioInput {
  url: String!
}

input ChatResponseAudioInput {
  globalId: ID!
  file: Upload!
}

input CampaignInput {
  source: String
  medium: String
  term: String
  content: String
  name: String
}

type SelfChangeEligibility {
    blockers: [SelfChangeBlocker!]! @deprecated(reason: "Use addressChangeEmbarkStoryId instead")
    embarkStoryId: ID @deprecated(reason: "Use addressChangeEmbarkStoryId instead")
    """The ID of an embark story that contains an address change flow, if eligible."""
    addressChangeEmbarkStoryId: ID
}

"""These types represent reasons for why the self-change flow cannot be run."""
enum SelfChangeBlocker {
    """Member has no contracts - changing them makes no sense."""
    NO_CONTRACTS
    """Member has at least one contract that is not supported at this time"""
    UNSUPPORTED_CONTRACT
    """Contract is still pending, it can't be changed until it is active."""
    STILL_PENDING
    """Contract has a termination date set."""
    HAS_TERMINATION
    """Contract is already undergoing future changes."""
    HAS_FUTURE_CHANGES
    """Contract is not currently active."""
    NOT_ACTIVE_TODAY
    """Member has multiple contracts with mismatching number of co-insured."""
    COINSURED_MISMATCH
    """Member has multiple contracts with mismatching 'youth' status."""
    YOUTH_MISMATCH
    """Member has too many contracts."""
    TOO_MANY_CONTRACTS
}

input AddressChangeInput {
  type: AddressHomeType!
  street: String!
  zip: String!
  livingSpace: Int!
  numberCoInsured: Int!
  ownership: AddressOwnership!
  startDate: LocalDate!
  countryCode: String!

  isYouth: Boolean
  isStudent: Boolean

  # house data
  ancillaryArea: Int
  yearOfConstruction: Int
  numberOfBathrooms: Int
  numberOfFloors: Int
  isSubleted: Boolean
  extraBuildings: [AddressHouseExtraBuilding!]
}

enum AddressHomeType {
  APARTMENT
  HOUSE
}

enum AddressOwnership {
  OWN
  RENT
}

input AddressHouseExtraBuilding {
    type: String!
    area: Int!
    hasWaterConnected: Boolean!
}

type AddressChangeOutput {
  quoteIds: [ID!]!
}

enum LoggingSource {
  IOS
  ANDROID
}

enum LoggingSeverity {
  DEFAULT
  DEBUG
  INFO
  NOTICE
  WARNING
  ERROR
  CRITICAL
  ALERT
  EMERGENCY
}

scalar JSONObject
scalar TimeStamp

input LoggingInput {
  timestamp: TimeStamp!
  source: LoggingSource!
  payload: JSONObject!
  severity: LoggingSeverity!
}

type Avatar {
  name: String!
  URL: String!
  width: Int!
  height: Int!
  duration: Int!
  data: Object
}

type Gif {
  url: String
}

type SessionInformation {
  token: String!
  memberId: String!
}

type OfferEvent {
  status: OfferStatus!
  insurance: Insurance
}

type SignEvent {
  status: SignStatus
}

type AuthEvent {
  status: AuthState
}

enum OfferStatus {
  SUCCESS
  FAIL
}

input OfferInput {
  firstName: String!
  lastName: String!
  age: Int!
  address: String!
  postalNumber: String!
  city: String
  insuranceType: InsuranceType!
  squareMeters: Int!
  personsInHousehold: Int!
  previousInsurer: String
}

input SignInput {
  personalNumber: String!
  email: String!
}

type Insurance {
  address: String
  postalNumber: String
  cost: InsuranceCost
  personsInHousehold: Int
  certificateUrl: String
  status: InsuranceStatus!
  type: InsuranceType
  activeFrom: LocalDate
  insuredAtOtherCompany: Boolean @deprecated(
    reason: "Use previousInsurer instead"
  )
  presaleInformationUrl: String
  policyUrl: String
  currentInsurerName: String @deprecated(
    reason: "Use previousInsurer instead"
  )
  livingSpace: Int
  perilCategories: [PerilCategory] @deprecated(
    reason: "Use arrangedPerilCategories instead"
  )
  monthlyCost: Int @deprecated(
    reason: "Use cost instead"
  )
  safetyIncreasers: [String!] @deprecated(
    reason: "No longer supported"
  )
  arrangedPerilCategories: ArrangedPerilCategories!
  renewal: Renewal
  previousInsurer: PreviousInsurer
  ancillaryArea: Int
  yearOfConstruction: Int
  numberOfBathrooms: Int
  extraBuildings: [ExtraBuilding!]
  isSubleted: Boolean
}

type PreviousInsurer {
  displayName: String
  id: ID!
  switchable: Boolean!
}

type Renewal {
  certificateUrl: String!
  date: LocalDate!
}

type ArrangedPerilCategories {
  me: PerilCategory
  home: PerilCategory
  stuff: PerilCategory
}

enum Feature {
  KeyGear
  Referrals
}

type Member {
  id: ID
  firstName: String
  lastName: String
  email: String
  phoneNumber: String
  acceptLanguage: String
  features: [Feature!]!
}

type PerilCategory {
  title: String
  description: String
  iconUrl: String
  perils: [Peril]
}

type Peril {
  id: ID
  title: String
  imageUrl: String
  description: String
}

enum InsuranceStatus {
  PENDING
  ACTIVE
  INACTIVE
  INACTIVE_WITH_START_DATE
  TERMINATED
}

enum InsuranceType {
  RENT
  BRF
  STUDENT_RENT
  STUDENT_BRF
  HOUSE
}

type Cashback {
  id: ID
  name: String
  imageUrl: String
  selectedUrl: String
  description: String
  title: String
  paragraph: String
}

type SignStatus {
  collectStatus: CollectStatus
  signState: SignState
}

type CollectStatus {
  status: BankIdStatus
  code: String
}

type ChatAction {
  text: String
  triggerUrl: URL
  enabled: Boolean
}

type InsuranceCost {
  monthlyGross: MonetaryAmountV2!,
  monthlyDiscount: MonetaryAmountV2!,
  monthlyNet: MonetaryAmountV2!
  freeUntil: LocalDate
}

type MonetaryAmountV2 {
  amount: String!,
  currency: String!
}

type BankIdAuthResponse {
  autoStartToken: String!
}

type BankIdSignResponse {
  autoStartToken: String
  redirectUrl: String
}

enum BankIdStatus {
  pending
  failed
  complete
}

enum SignState {
  INITIATED
  IN_PROGRESS
  FAILED
  COMPLETED
}

enum AuthState {
  INITIATED
  IN_PROGRESS
  FAILED
  SUCCESS
}

type NorwegianBankIdAuthResponse {
  redirectUrl: String!
}

type DanishBankIdAuthResponse {
  redirectUrl: String!
}

scalar LocalDate
scalar Upload
# String-represented URL.
scalar URL
# String-represented UUID.
scalar UUID
scalar Object
# An ISO-8601 String representation of a `java.time.Instant`, e.g. 2019-07-03T19:07:38.494081Z
scalar Instant

type File {
  """
  signedUrl is valid for 30 minutes after upload, don't hang on to this.
  """
  signedUrl: String!
  """
  S3 key that can be used to retreive new signed urls in the future.
  """
  key: String!
  """
  S3 bucket that the file was uploaded to.
  """
  bucket: String!
}


#### Contracts ####
# These will all override their duplicates inside product-pricing

type ContractBundle {
  id: ID!
  contracts: [Contract!]!
  angelStories: ContractBundleAngelStories!
}

type ContractBundleAngelStories {
  addressChange: ID
}

type Contract {
    id: ID!
    holderMember: ID!
    typeOfContract: TypeOfContract!
    switchedFromInsuranceProvider: String
    status: ContractStatus!
    displayName: String!
    """"The 'best guess' of the agreement that depicts the member's insurance, either the pending, future, current or, if terminated, past agreement"""
    currentAgreement: Agreement!
    """The date the contract agreement timeline begin, if it has been activated"""
    inception: LocalDate
    """The date the contract agreement timelinen end, on if it has been terminated"""
    termination: LocalDate
    """An upcoming renewal, present if the member has been notified and the renewal is within 31 days"""
    upcomingRenewal: UpcomingRenewal
    createdAt: Instant!
}

enum TypeOfContract {
    SE_HOUSE
    SE_APARTMENT_BRF
    SE_APARTMENT_RENT
    SE_APARTMENT_STUDENT_BRF
    SE_APARTMENT_STUDENT_RENT
    NO_HOME_CONTENT_OWN
    NO_HOME_CONTENT_RENT
    NO_HOME_CONTENT_YOUTH_OWN
    NO_HOME_CONTENT_YOUTH_RENT
    NO_TRAVEL
    NO_TRAVEL_YOUTH
    DK_HOME_CONTENT_OWN
    DK_HOME_CONTENT_RENT
    DK_HOME_CONTENT_STUDENT_OWN
    DK_HOME_CONTENT_STUDENT_RENT
    DK_ACCIDENT
    DK_ACCIDENT_STUDENT
    DK_TRAVEL
    DK_TRAVEL_STUDENT
}

union ContractStatus =
    PendingStatus
    | ActiveInFutureStatus
    | ActiveStatus
    | ActiveInFutureAndTerminatedInFutureStatus
    | TerminatedInFutureStatus
    | TerminatedTodayStatus
    | TerminatedStatus

"""The contract is neither active or terminated, waiting to have an inception date set"""
type PendingStatus {
    pendingSince: LocalDate
}

"""The contract has an inception date set in the future"""
type ActiveInFutureStatus {
    futureInception: LocalDate
}

"""The contract has an inception date set today or in the past without a termination date set"""
type ActiveStatus {
    pastInception: LocalDate
    upcomingAgreementChange: UpcomingAgreementChange
}

"""The contract has an inception date in the future and a termination date in the future"""
type ActiveInFutureAndTerminatedInFutureStatus {
    futureInception: LocalDate
    futureTermination: LocalDate
}

"""The contract has been active and has its termination date set to today, i.e. today is the last day the contract is active"""
type TerminatedTodayStatus {
    today: LocalDate
    upcomingAgreementChange: UpcomingAgreementChange
}

"""The contract is active today but will be terminated in the future, i.e. is active today but will not be in the future"""
type TerminatedInFutureStatus {
    futureTermination: LocalDate
    upcomingAgreementChange: UpcomingAgreementChange
}

"""The contract has been terminated in the past, terminated on the same date as its start date or has never been activated and has a termination date set"""
type TerminatedStatus {
    termination: LocalDate
}

type UpcomingRenewal {
    renewalDate: LocalDate!
    draftCertificateUrl: String!
}

"""If present, the upcomingAgreementChange contains info regarding the agreement that will succeed the current one"""
type UpcomingAgreementChange {
    newAgreement: Agreement!
}

interface AgreementCore {
    id: ID!
    status: AgreementStatus!
    activeFrom: LocalDate
    activeTo: LocalDate
    premium: MonetaryAmountV2!
    certificateUrl: String
    termsAndConditions: InsuranceTerm @deprecated(reason: "Use Contract.termsAndConditions(locale: Locale!): InsuranceTerm! instead")
}

enum AgreementStatus {
    """An agreement with no activation date, waiting to be activated"""
    PENDING
    """An agreement that will be active on a future date"""
    ACTIVE_IN_FUTURE
    """An agreement that is active today"""
    ACTIVE
    """An agreement that either was never active that is now terminated or was active in the past of a now terminated contract"""
    TERMINATED
}

union Agreement = SwedishApartmentAgreement |
    SwedishHouseAgreement |
    NorwegianHomeContentAgreement |
    NorwegianTravelAgreement |
    DanishHomeContentAgreement |
    DanishAccidentAgreement |
    DanishTravelAgreement

type SwedishApartmentAgreement implements AgreementCore {
    id: ID!
    activeFrom: LocalDate
    activeTo: LocalDate
    premium: MonetaryAmountV2!
    certificateUrl: String
    status: AgreementStatus!
    termsAndConditions: InsuranceTerm
    address: Address!
    numberCoInsured: Int!
    squareMeters: Int!
    type: SwedishApartmentLineOfBusiness!
}

enum SwedishApartmentLineOfBusiness {
    RENT
    BRF
    STUDENT_RENT
    STUDENT_BRF
}

type SwedishHouseAgreement implements AgreementCore {
    id: ID!
    activeFrom: LocalDate
    activeTo: LocalDate
    premium: MonetaryAmountV2!
    certificateUrl: String
    status: AgreementStatus!
    termsAndConditions: InsuranceTerm
    address: Address!
    numberCoInsured: Int!
    squareMeters: Int!
    ancillaryArea: Int!
    yearOfConstruction: Int!
    numberOfBathrooms: Int!
    extraBuildings: [ExtraBuilding]!
    isSubleted: Boolean!
}

type NorwegianHomeContentAgreement implements AgreementCore {
    id: ID!
    activeFrom: LocalDate
    activeTo: LocalDate
    premium: MonetaryAmountV2!
    certificateUrl: String
    status: AgreementStatus!
    termsAndConditions: InsuranceTerm
    address: Address!
    numberCoInsured: Int!
    squareMeters: Int!
    type: NorwegianHomeContentLineOfBusiness
}

enum NorwegianHomeContentLineOfBusiness {
    RENT
    OWN
    YOUTH_RENT
    YOUTH_OWN
}

type NorwegianTravelAgreement implements AgreementCore {
    id: ID!
    activeFrom: LocalDate
    activeTo: LocalDate
    premium: MonetaryAmountV2!
    certificateUrl: String
    status: AgreementStatus!
    termsAndConditions: InsuranceTerm
    numberCoInsured: Int!
    type: NorwegianTravelLineOfBusiness
}

enum NorwegianTravelLineOfBusiness {
    REGULAR
    YOUTH
}

type DanishHomeContentAgreement implements AgreementCore {
    id: ID!
    activeFrom: LocalDate
    activeTo: LocalDate
    premium: MonetaryAmountV2!
    certificateUrl: String
    status: AgreementStatus!
    termsAndConditions: InsuranceTerm
    address: Address!
    numberCoInsured: Int!
    squareMeters: Int!
    type: DanishHomeContentLineOfBusiness
}

enum DanishHomeContentLineOfBusiness {
    RENT
    OWN
    STUDENT_RENT
    STUDENT_OWN
}

type DanishAccidentAgreement implements AgreementCore {
    id: ID!
    activeFrom: LocalDate
    activeTo: LocalDate
    premium: MonetaryAmountV2!
    certificateUrl: String
    status: AgreementStatus!
    termsAndConditions: InsuranceTerm
    address: Address!
    numberCoInsured: Int!
    type: DanishAccidentLineOfBusiness
}

enum DanishAccidentLineOfBusiness {
    REGULAR
    STUDENT
}

type DanishTravelAgreement implements AgreementCore {
    id: ID!
    activeFrom: LocalDate
    activeTo: LocalDate
    premium: MonetaryAmountV2!
    certificateUrl: String
    status: AgreementStatus!
    termsAndConditions: InsuranceTerm
    address: Address!
    numberCoInsured: Int!
    type: DanishTravelLineOfBusiness
}

enum DanishTravelLineOfBusiness {
    REGULAR
    STUDENT
}

union ExtraBuilding =
    ExtraBuildingGarage
  | ExtraBuildingCarport
  | ExtraBuildingShed
  | ExtraBuildingStorehouse
  | ExtraBuildingFriggebod
  | ExtraBuildingAttefall
  | ExtraBuildingOuthouse
  | ExtraBuildingGuesthouse
  | ExtraBuildingGazebo
  | ExtraBuildingGreenhouse
  | ExtraBuildingSauna
  | ExtraBuildingBarn
  | ExtraBuildingBoathouse
  | ExtraBuildingOther

interface ExtraBuildingCore {
  area: Int!
  displayName: String!
  hasWaterConnected: Boolean!
}

type ExtraBuildingGarage implements ExtraBuildingCore {
  area: Int!
  displayName: String!
  hasWaterConnected: Boolean!
}

type ExtraBuildingCarport implements ExtraBuildingCore {
  area: Int!
  displayName: String!
  hasWaterConnected: Boolean!
}

type ExtraBuildingShed implements ExtraBuildingCore {
  area: Int!
  displayName: String!
  hasWaterConnected: Boolean!
}

type ExtraBuildingStorehouse implements ExtraBuildingCore {
  area: Int!
  displayName: String!
  hasWaterConnected: Boolean!
}

type ExtraBuildingFriggebod implements ExtraBuildingCore {
  area: Int!
  displayName: String!
  hasWaterConnected: Boolean!
}

type ExtraBuildingAttefall implements ExtraBuildingCore {
  area: Int!
  displayName: String!
  hasWaterConnected: Boolean!
}

type ExtraBuildingOuthouse implements ExtraBuildingCore {
  area: Int!
  displayName: String!
  hasWaterConnected: Boolean!
}

type ExtraBuildingGuesthouse implements ExtraBuildingCore {
  area: Int!
  displayName: String!
  hasWaterConnected: Boolean!
}

type ExtraBuildingGazebo implements ExtraBuildingCore {
  area: Int!
  displayName: String!
  hasWaterConnected: Boolean!
}

type ExtraBuildingGreenhouse implements ExtraBuildingCore {
  area: Int!
  displayName: String!
  hasWaterConnected: Boolean!
}

type ExtraBuildingSauna implements ExtraBuildingCore {
  area: Int!
  displayName: String!
  hasWaterConnected: Boolean!
}

type ExtraBuildingBarn implements ExtraBuildingCore {
  area: Int!
  displayName: String!
  hasWaterConnected: Boolean!
}

type ExtraBuildingBoathouse implements ExtraBuildingCore {
  area: Int!
  displayName: String!
  hasWaterConnected: Boolean!
}

type ExtraBuildingOther implements ExtraBuildingCore {
  area: Int!
  displayName: String!
  hasWaterConnected: Boolean!
}

type Address {
    street: String!
    postalCode: String!
    city: String
    apartment: String
    floor: String
}

type InsuranceTerm {
    displayName: String!
    url: String!
    type: InsuranceTermType!
}

enum InsuranceTermType {
    TERMS_AND_CONDITIONS
}
