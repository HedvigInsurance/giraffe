type Query {
  insurance: Insurance!
  cashback: Cashback!
  signStatus: SignStatus!
  member: Member!
}

type Mutation {
  logout: Boolean!
  createSession: String!
  createOffer(details: OfferInput!): Boolean
  signOffer(details: SignInput!): Boolean
}

type Subscription {
  offer: OfferEvent
  signStatus: SignEvent
}

type OfferEvent {
  status: OfferStatus!
  insurance: Insurance
}

type SignEvent {
  status: SignStatus
}

enum OfferStatus {
  SUCCESS,
  FAIL
}

input OfferInput {
  firstName: String!
  lastName: String!
  age: Int!
  address: String!
  postalNumber: String!
  city: String
  insuranceType: InsuranceType!
  squareMeters: Int!
  personsInHousehold: Int!
  previousInsurer: String
}

input SignInput {
  personalNumber: String!
  email: String!
}

type Insurance {
  address: String
  postalNumber: String
  monthlyCost: Int
  safetyIncreasers: [String!]
  personsInHousehold: Int
  certificateUrl: String
  status: InsuranceStatus!
  type: InsuranceType
  activeFrom: LocalDate
  insuredAtOtherCompany: Boolean
  presaleInformationUrl: String
  policyUrl: String
  currentInsurerName: String

  perilCategories: [PerilCategory]
}

type Member {
  firstName: String
  lastName: String
}

type PerilCategory {
  title: String
  description: String
  iconUrl: String
  perils: [Peril]
}

type Peril {
  id: ID
  title: String
  imageUrl: String
  description: String
}

enum InsuranceStatus {
  PENDING
  ACTIVE
  INACTIVE
  INACTIVE_WITH_START_DATE
  TERMINATED
}

enum InsuranceType {
  RENT
  BRF
  STUDENT_RENT
  STUDENT_BRF
}

type Cashback {
  id: ID
  name: String
  imageUrl: String
}

type SignStatus {
  collectStatus: CollectStatus
  signState: SignState
}

type CollectStatus {
  status: BankIdStatus
  code: String
}

enum BankIdStatus {
  pending
  failed
  complete
}

enum SignState {
  INITIATED
  IN_PROGRESS
  FAILED
  COMPLETE
}

scalar LocalDate
