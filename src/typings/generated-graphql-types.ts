import { Context } from '../context'
/* tslint:disable */
import { GraphQLResolveInfo, GraphQLScalarType } from 'graphql';
/**
 * This file is auto-generated by graphql-schema-typescript
 * Please note that any changes in this file may be overwritten
 */
 

/*******************************
 *                             *
 *          TYPE DEFS          *
 *                             *
 *******************************/
export interface Query {
  insurance: Insurance;
  cashback: Cashback;
  cashbackOptions: Array<Cashback | null>;
  signStatus?: SignStatus;
  member: Member;
  gifs: Array<Gif | null>;
  file: File;
  directDebitStatus: DirectDebitStatus;
  messages: Array<Message | null>;
  currentChatResponse?: ChatResponse;
  chatState: ChatState;
  avatars?: Array<Avatar | null>;
}

export interface Insurance {
  address?: string;
  postalNumber?: string;
  monthlyCost?: number;
  safetyIncreasers?: Array<string>;
  personsInHousehold?: number;
  certificateUrl?: string;
  status: InsuranceStatus;
  type?: InsuranceType;
  activeFrom?: LocalDate;
  insuredAtOtherCompany?: boolean;
  presaleInformationUrl?: string;
  policyUrl?: string;
  currentInsurerName?: string;
  perilCategories?: Array<PerilCategory | null>;
}

export enum InsuranceStatus {
  PENDING = 'PENDING',
  ACTIVE = 'ACTIVE',
  INACTIVE = 'INACTIVE',
  INACTIVE_WITH_START_DATE = 'INACTIVE_WITH_START_DATE',
  TERMINATED = 'TERMINATED'
}

export enum InsuranceType {
  RENT = 'RENT',
  BRF = 'BRF',
  STUDENT_RENT = 'STUDENT_RENT',
  STUDENT_BRF = 'STUDENT_BRF'
}

export type LocalDate = any;

export interface PerilCategory {
  title?: string;
  description?: string;
  iconUrl?: string;
  perils?: Array<Peril | null>;
}

export interface Peril {
  id?: string;
  title?: string;
  imageUrl?: string;
  description?: string;
}

export interface Cashback {
  id?: string;
  name?: string;
  imageUrl?: string;
  selectedUrl?: string;
  description?: string;
  title?: string;
  paragraph?: string;
}

export interface SignStatus {
  collectStatus?: CollectStatus;
  signState?: SignState;
}

export interface CollectStatus {
  status?: BankIdStatus;
  code?: string;
}

export enum BankIdStatus {
  pending = 'pending',
  failed = 'failed',
  complete = 'complete'
}

export enum SignState {
  INITIATED = 'INITIATED',
  IN_PROGRESS = 'IN_PROGRESS',
  FAILED = 'FAILED',
  COMPLETED = 'COMPLETED'
}

export interface Member {
  firstName?: string;
  lastName?: string;
}

export interface Gif {
  url?: string;
}

export interface File {
  
  /**
   * signedUrl is valid for 30 minutes after upload, don't hang on to this.
   */
  signedUrl: string;
  
  /**
   * S3 key that can be used to retreive new signed urls in the future.
   */
  key: string;
}

export enum DirectDebitStatus {
  NEEDS_SETUP = 'NEEDS_SETUP',
  ACTIVE = 'ACTIVE'
}

export interface Message {
  globalId: string;
  id: string;
  body: MessageBody;
  header: MessageHeader;
}

export type MessageBody =
MessageBodySingleSelect |
MessageBodyMultipleSelect |
MessageBodyText |
MessageBodyNumber |
MessageBodyAudio |
MessageBodyBankIdCollect |
MessageBodyFile |
MessageBodyParagraph |
MessageBodyUndefined;

/** Use this to resolve union type MessageBody */
export type PossibleMessageBodyTypeNames =
'MessageBodySingleSelect' |
'MessageBodyMultipleSelect' |
'MessageBodyText' |
'MessageBodyNumber' |
'MessageBodyAudio' |
'MessageBodyBankIdCollect' |
'MessageBodyFile' |
'MessageBodyParagraph' |
'MessageBodyUndefined';

export interface MessageBodyNameMap {
  MessageBody: MessageBody;
  MessageBodySingleSelect: MessageBodySingleSelect;
  MessageBodyMultipleSelect: MessageBodyMultipleSelect;
  MessageBodyText: MessageBodyText;
  MessageBodyNumber: MessageBodyNumber;
  MessageBodyAudio: MessageBodyAudio;
  MessageBodyBankIdCollect: MessageBodyBankIdCollect;
  MessageBodyFile: MessageBodyFile;
  MessageBodyParagraph: MessageBodyParagraph;
  MessageBodyUndefined: MessageBodyUndefined;
}

export interface MessageBodySingleSelect extends MessageBodyCore {
  type: string;
  id: string;
  text: string;
  choices?: Array<MessageBodyChoices | null>;
}

export interface MessageBodyCore {
  type: string;
  id: string;
  text: string;
}

/** Use this to resolve interface type MessageBodyCore */
export type PossibleMessageBodyCoreTypeNames =
'MessageBodySingleSelect' |
'MessageBodyMultipleSelect' |
'MessageBodyText' |
'MessageBodyNumber' |
'MessageBodyAudio' |
'MessageBodyBankIdCollect' |
'MessageBodyFile' |
'MessageBodyParagraph' |
'MessageBodyUndefined';

export interface MessageBodyCoreNameMap {
  MessageBodyCore: MessageBodyCore;
  MessageBodySingleSelect: MessageBodySingleSelect;
  MessageBodyMultipleSelect: MessageBodyMultipleSelect;
  MessageBodyText: MessageBodyText;
  MessageBodyNumber: MessageBodyNumber;
  MessageBodyAudio: MessageBodyAudio;
  MessageBodyBankIdCollect: MessageBodyBankIdCollect;
  MessageBodyFile: MessageBodyFile;
  MessageBodyParagraph: MessageBodyParagraph;
  MessageBodyUndefined: MessageBodyUndefined;
}

export type MessageBodyChoices =
MessageBodyChoicesUndefined |
MessageBodyChoicesSelection |
MessageBodyChoicesLink;

/** Use this to resolve union type MessageBodyChoices */
export type PossibleMessageBodyChoicesTypeNames =
'MessageBodyChoicesUndefined' |
'MessageBodyChoicesSelection' |
'MessageBodyChoicesLink';

export interface MessageBodyChoicesNameMap {
  MessageBodyChoices: MessageBodyChoices;
  MessageBodyChoicesUndefined: MessageBodyChoicesUndefined;
  MessageBodyChoicesSelection: MessageBodyChoicesSelection;
  MessageBodyChoicesLink: MessageBodyChoicesLink;
}

export interface MessageBodyChoicesUndefined extends MessageBodyChoicesCore {
  type: string;
  value: string;
  text: string;
  selected: boolean;
}

export interface MessageBodyChoicesCore {
  type: string;
  value: string;
  text: string;
  selected: boolean;
}

/** Use this to resolve interface type MessageBodyChoicesCore */
export type PossibleMessageBodyChoicesCoreTypeNames =
'MessageBodyChoicesUndefined' |
'MessageBodyChoicesSelection' |
'MessageBodyChoicesLink';

export interface MessageBodyChoicesCoreNameMap {
  MessageBodyChoicesCore: MessageBodyChoicesCore;
  MessageBodyChoicesUndefined: MessageBodyChoicesUndefined;
  MessageBodyChoicesSelection: MessageBodyChoicesSelection;
  MessageBodyChoicesLink: MessageBodyChoicesLink;
}

export interface MessageBodyChoicesSelection extends MessageBodyChoicesCore {
  type: string;
  value: string;
  text: string;
  selected: boolean;
  clearable?: boolean;
}

export interface MessageBodyChoicesLink extends MessageBodyChoicesCore {
  type: string;
  value: string;
  text: string;
  selected: boolean;
  view?: MessageBodyChoicesLinkView;
  appUrl?: string;
  webUrl?: string;
}

export enum MessageBodyChoicesLinkView {
  OFFER = 'OFFER',
  DASHBOARD = 'DASHBOARD'
}

export interface MessageBodyMultipleSelect extends MessageBodyCore {
  type: string;
  id: string;
  text: string;
  choices?: Array<MessageBodyChoices | null>;
}

export interface MessageBodyText extends MessageBodyCore {
  type: string;
  id: string;
  text: string;
}

export interface MessageBodyNumber extends MessageBodyCore {
  type: string;
  id: string;
  text: string;
}

export interface MessageBodyAudio extends MessageBodyCore {
  type: string;
  id: string;
  text: string;
  url?: string;
}

export interface MessageBodyBankIdCollect extends MessageBodyCore {
  type: string;
  id: string;
  text: string;
  referenceId?: string;
}

export interface MessageBodyFile extends MessageBodyCore {
  type: string;
  id: string;
  text: string;
  key?: string;
  mimeType?: string;
}

export interface MessageBodyParagraph extends MessageBodyCore {
  type: string;
  id: string;
  text: string;
}

export interface MessageBodyUndefined extends MessageBodyCore {
  type: string;
  id: string;
  text: string;
}

export interface MessageHeader {
  messageId: string;
  fromMyself: boolean;
  timeStamp: string;
  richTextChatCompatible: boolean;
  editAllowed: boolean;
  shouldRequestPushNotifications: boolean;
  pollingInterval: number;
  loadingIndicator?: string;
}

export interface ChatResponse {
  globalId: string;
  id: string;
  body?: MessageBody;
  header?: MessageHeader;
}

export interface ChatState {
  ongoingClaim: boolean;
  showOfferScreen: boolean;
  onboardingDone: boolean;
}

export interface Avatar {
  name: string;
  URL: string;
  width: number;
  height: number;
  duration: number;
  data?: Object;
}

export type Object = any;

export interface Mutation {
  logout: boolean;
  createSession: string;
  createSessionV2?: SessionInformation;
  createOffer?: boolean;
  signOffer?: boolean;
  uploadFile: File;
  selectCashbackOption: Cashback;
  offerClosed: boolean;
  startDirectDebitRegistration: URL;
  sendChatTextResponse: boolean;
  sendChatSingleSelectResponse: boolean;
  sendChatFileResponse: boolean;
  resetConversation: boolean;
}

export interface CampaignInput {
  source?: string;
  medium?: string;
  term?: string;
  content?: string;
  name?: string;
}

export type UUID = any;

export interface SessionInformation {
  token: string;
  memberId: string;
}

export interface OfferInput {
  firstName: string;
  lastName: string;
  age: number;
  address: string;
  postalNumber: string;
  city?: string;
  insuranceType: InsuranceType;
  squareMeters: number;
  personsInHousehold: number;
  previousInsurer?: string;
}

export interface SignInput {
  personalNumber: string;
  email: string;
}

export type Upload = any;

export type URL = any;

export interface ChatResponseTextInput {
  globalId: string;
  body: ChatResponseBodyTextInput;
}

export interface ChatResponseBodyTextInput {
  text: string;
}

export interface ChatResponseSingleSelectInput {
  globalId: string;
  body: ChatResponseBodySingleSelectInput;
}

export interface ChatResponseBodySingleSelectInput {
  selectedValue: string;
}

export interface ChatResponseFileInput {
  globalId: string;
  body: ChatResponseBodyFileInput;
}

export interface ChatResponseBodyFileInput {
  key: string;
  mimeType: string;
}

export interface Subscription {
  offer?: OfferEvent;
  signStatus?: SignEvent;
  message?: Message;
  currentChatResponse?: ChatResponse;
  chatState: ChatState;
}

export interface OfferEvent {
  status: OfferStatus;
  insurance?: Insurance;
}

export enum OfferStatus {
  SUCCESS = 'SUCCESS',
  FAIL = 'FAIL'
}

export interface SignEvent {
  status?: SignStatus;
}

/*********************************
 *                               *
 *         TYPE RESOLVERS        *
 *                               *
 *********************************/
/**
 * This interface define the shape of your resolver
 * Note that this type is designed to be compatible with graphql-tools resolvers
 * However, you can still use other generated interfaces to make your resolver type-safed
 */
export interface Resolver {
  Query?: QueryTypeResolver;
  Insurance?: InsuranceTypeResolver;
  LocalDate?: GraphQLScalarType;
  PerilCategory?: PerilCategoryTypeResolver;
  Peril?: PerilTypeResolver;
  Cashback?: CashbackTypeResolver;
  SignStatus?: SignStatusTypeResolver;
  CollectStatus?: CollectStatusTypeResolver;
  Member?: MemberTypeResolver;
  Gif?: GifTypeResolver;
  File?: FileTypeResolver;
  Message?: MessageTypeResolver;
  MessageBody?: {
    __resolveType: MessageBodyTypeResolver
  };
  
  MessageBodySingleSelect?: MessageBodySingleSelectTypeResolver;
  MessageBodyCore?: {
    __resolveType: MessageBodyCoreTypeResolver
  };
  
  MessageBodyChoices?: {
    __resolveType: MessageBodyChoicesTypeResolver
  };
  
  MessageBodyChoicesUndefined?: MessageBodyChoicesUndefinedTypeResolver;
  MessageBodyChoicesCore?: {
    __resolveType: MessageBodyChoicesCoreTypeResolver
  };
  
  MessageBodyChoicesSelection?: MessageBodyChoicesSelectionTypeResolver;
  MessageBodyChoicesLink?: MessageBodyChoicesLinkTypeResolver;
  MessageBodyMultipleSelect?: MessageBodyMultipleSelectTypeResolver;
  MessageBodyText?: MessageBodyTextTypeResolver;
  MessageBodyNumber?: MessageBodyNumberTypeResolver;
  MessageBodyAudio?: MessageBodyAudioTypeResolver;
  MessageBodyBankIdCollect?: MessageBodyBankIdCollectTypeResolver;
  MessageBodyFile?: MessageBodyFileTypeResolver;
  MessageBodyParagraph?: MessageBodyParagraphTypeResolver;
  MessageBodyUndefined?: MessageBodyUndefinedTypeResolver;
  MessageHeader?: MessageHeaderTypeResolver;
  ChatResponse?: ChatResponseTypeResolver;
  ChatState?: ChatStateTypeResolver;
  Avatar?: AvatarTypeResolver;
  Object?: GraphQLScalarType;
  Mutation?: MutationTypeResolver;
  UUID?: GraphQLScalarType;
  SessionInformation?: SessionInformationTypeResolver;
  Upload?: GraphQLScalarType;
  URL?: GraphQLScalarType;
  Subscription?: SubscriptionTypeResolver;
  OfferEvent?: OfferEventTypeResolver;
  SignEvent?: SignEventTypeResolver;
}
export interface QueryTypeResolver<TParent = undefined> {
  insurance?: QueryToInsuranceResolver<TParent>;
  cashback?: QueryToCashbackResolver<TParent>;
  cashbackOptions?: QueryToCashbackOptionsResolver<TParent>;
  signStatus?: QueryToSignStatusResolver<TParent>;
  member?: QueryToMemberResolver<TParent>;
  gifs?: QueryToGifsResolver<TParent>;
  file?: QueryToFileResolver<TParent>;
  directDebitStatus?: QueryToDirectDebitStatusResolver<TParent>;
  messages?: QueryToMessagesResolver<TParent>;
  currentChatResponse?: QueryToCurrentChatResponseResolver<TParent>;
  chatState?: QueryToChatStateResolver<TParent>;
  avatars?: QueryToAvatarsResolver<TParent>;
}

export interface QueryToInsuranceResolver<TParent = undefined, TResult = Insurance> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface QueryToCashbackResolver<TParent = undefined, TResult = Cashback> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface QueryToCashbackOptionsResolver<TParent = undefined, TResult = Array<Cashback | null>> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface QueryToSignStatusResolver<TParent = undefined, TResult = SignStatus | null> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface QueryToMemberResolver<TParent = undefined, TResult = Member> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface QueryToGifsArgs {
  query: string;
}
export interface QueryToGifsResolver<TParent = undefined, TResult = Array<Gif | null>> {
  (parent: TParent, args: QueryToGifsArgs, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface QueryToFileArgs {
  key: string;
}
export interface QueryToFileResolver<TParent = undefined, TResult = File> {
  (parent: TParent, args: QueryToFileArgs, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface QueryToDirectDebitStatusResolver<TParent = undefined, TResult = DirectDebitStatus> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface QueryToMessagesResolver<TParent = undefined, TResult = Array<Message | null>> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface QueryToCurrentChatResponseResolver<TParent = undefined, TResult = ChatResponse | null> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface QueryToChatStateResolver<TParent = undefined, TResult = ChatState> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface QueryToAvatarsResolver<TParent = undefined, TResult = Array<Avatar | null> | null> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface InsuranceTypeResolver<TParent = Insurance> {
  address?: InsuranceToAddressResolver<TParent>;
  postalNumber?: InsuranceToPostalNumberResolver<TParent>;
  monthlyCost?: InsuranceToMonthlyCostResolver<TParent>;
  safetyIncreasers?: InsuranceToSafetyIncreasersResolver<TParent>;
  personsInHousehold?: InsuranceToPersonsInHouseholdResolver<TParent>;
  certificateUrl?: InsuranceToCertificateUrlResolver<TParent>;
  status?: InsuranceToStatusResolver<TParent>;
  type?: InsuranceToTypeResolver<TParent>;
  activeFrom?: InsuranceToActiveFromResolver<TParent>;
  insuredAtOtherCompany?: InsuranceToInsuredAtOtherCompanyResolver<TParent>;
  presaleInformationUrl?: InsuranceToPresaleInformationUrlResolver<TParent>;
  policyUrl?: InsuranceToPolicyUrlResolver<TParent>;
  currentInsurerName?: InsuranceToCurrentInsurerNameResolver<TParent>;
  perilCategories?: InsuranceToPerilCategoriesResolver<TParent>;
}

export interface InsuranceToAddressResolver<TParent = Insurance, TResult = string | null> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface InsuranceToPostalNumberResolver<TParent = Insurance, TResult = string | null> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface InsuranceToMonthlyCostResolver<TParent = Insurance, TResult = number | null> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface InsuranceToSafetyIncreasersResolver<TParent = Insurance, TResult = Array<string> | null> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface InsuranceToPersonsInHouseholdResolver<TParent = Insurance, TResult = number | null> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface InsuranceToCertificateUrlResolver<TParent = Insurance, TResult = string | null> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface InsuranceToStatusResolver<TParent = Insurance, TResult = InsuranceStatus> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface InsuranceToTypeResolver<TParent = Insurance, TResult = InsuranceType | null> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface InsuranceToActiveFromResolver<TParent = Insurance, TResult = LocalDate | null> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface InsuranceToInsuredAtOtherCompanyResolver<TParent = Insurance, TResult = boolean | null> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface InsuranceToPresaleInformationUrlResolver<TParent = Insurance, TResult = string | null> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface InsuranceToPolicyUrlResolver<TParent = Insurance, TResult = string | null> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface InsuranceToCurrentInsurerNameResolver<TParent = Insurance, TResult = string | null> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface InsuranceToPerilCategoriesResolver<TParent = Insurance, TResult = Array<PerilCategory | null> | null> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface PerilCategoryTypeResolver<TParent = PerilCategory> {
  title?: PerilCategoryToTitleResolver<TParent>;
  description?: PerilCategoryToDescriptionResolver<TParent>;
  iconUrl?: PerilCategoryToIconUrlResolver<TParent>;
  perils?: PerilCategoryToPerilsResolver<TParent>;
}

export interface PerilCategoryToTitleResolver<TParent = PerilCategory, TResult = string | null> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface PerilCategoryToDescriptionResolver<TParent = PerilCategory, TResult = string | null> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface PerilCategoryToIconUrlResolver<TParent = PerilCategory, TResult = string | null> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface PerilCategoryToPerilsResolver<TParent = PerilCategory, TResult = Array<Peril | null> | null> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface PerilTypeResolver<TParent = Peril> {
  id?: PerilToIdResolver<TParent>;
  title?: PerilToTitleResolver<TParent>;
  imageUrl?: PerilToImageUrlResolver<TParent>;
  description?: PerilToDescriptionResolver<TParent>;
}

export interface PerilToIdResolver<TParent = Peril, TResult = string | null> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface PerilToTitleResolver<TParent = Peril, TResult = string | null> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface PerilToImageUrlResolver<TParent = Peril, TResult = string | null> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface PerilToDescriptionResolver<TParent = Peril, TResult = string | null> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface CashbackTypeResolver<TParent = Cashback> {
  id?: CashbackToIdResolver<TParent>;
  name?: CashbackToNameResolver<TParent>;
  imageUrl?: CashbackToImageUrlResolver<TParent>;
  selectedUrl?: CashbackToSelectedUrlResolver<TParent>;
  description?: CashbackToDescriptionResolver<TParent>;
  title?: CashbackToTitleResolver<TParent>;
  paragraph?: CashbackToParagraphResolver<TParent>;
}

export interface CashbackToIdResolver<TParent = Cashback, TResult = string | null> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface CashbackToNameResolver<TParent = Cashback, TResult = string | null> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface CashbackToImageUrlResolver<TParent = Cashback, TResult = string | null> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface CashbackToSelectedUrlResolver<TParent = Cashback, TResult = string | null> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface CashbackToDescriptionResolver<TParent = Cashback, TResult = string | null> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface CashbackToTitleResolver<TParent = Cashback, TResult = string | null> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface CashbackToParagraphResolver<TParent = Cashback, TResult = string | null> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface SignStatusTypeResolver<TParent = SignStatus> {
  collectStatus?: SignStatusToCollectStatusResolver<TParent>;
  signState?: SignStatusToSignStateResolver<TParent>;
}

export interface SignStatusToCollectStatusResolver<TParent = SignStatus, TResult = CollectStatus | null> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface SignStatusToSignStateResolver<TParent = SignStatus, TResult = SignState | null> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface CollectStatusTypeResolver<TParent = CollectStatus> {
  status?: CollectStatusToStatusResolver<TParent>;
  code?: CollectStatusToCodeResolver<TParent>;
}

export interface CollectStatusToStatusResolver<TParent = CollectStatus, TResult = BankIdStatus | null> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface CollectStatusToCodeResolver<TParent = CollectStatus, TResult = string | null> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface MemberTypeResolver<TParent = Member> {
  firstName?: MemberToFirstNameResolver<TParent>;
  lastName?: MemberToLastNameResolver<TParent>;
}

export interface MemberToFirstNameResolver<TParent = Member, TResult = string | null> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface MemberToLastNameResolver<TParent = Member, TResult = string | null> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface GifTypeResolver<TParent = Gif> {
  url?: GifToUrlResolver<TParent>;
}

export interface GifToUrlResolver<TParent = Gif, TResult = string | null> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface FileTypeResolver<TParent = File> {
  signedUrl?: FileToSignedUrlResolver<TParent>;
  key?: FileToKeyResolver<TParent>;
}

export interface FileToSignedUrlResolver<TParent = File, TResult = string> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface FileToKeyResolver<TParent = File, TResult = string> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface MessageTypeResolver<TParent = Message> {
  globalId?: MessageToGlobalIdResolver<TParent>;
  id?: MessageToIdResolver<TParent>;
  body?: MessageToBodyResolver<TParent>;
  header?: MessageToHeaderResolver<TParent>;
}

export interface MessageToGlobalIdResolver<TParent = Message, TResult = string> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface MessageToIdResolver<TParent = Message, TResult = string> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface MessageToBodyResolver<TParent = Message, TResult = MessageBody> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface MessageToHeaderResolver<TParent = Message, TResult = MessageHeader> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface MessageBodyTypeResolver<TParent = MessageBody> {
  (parent: TParent, context: Context, info: GraphQLResolveInfo): 'MessageBodySingleSelect' | 'MessageBodyMultipleSelect' | 'MessageBodyText' | 'MessageBodyNumber' | 'MessageBodyAudio' | 'MessageBodyBankIdCollect' | 'MessageBodyFile' | 'MessageBodyParagraph' | 'MessageBodyUndefined';
}
export interface MessageBodySingleSelectTypeResolver<TParent = MessageBodySingleSelect> {
  type?: MessageBodySingleSelectToTypeResolver<TParent>;
  id?: MessageBodySingleSelectToIdResolver<TParent>;
  text?: MessageBodySingleSelectToTextResolver<TParent>;
  choices?: MessageBodySingleSelectToChoicesResolver<TParent>;
}

export interface MessageBodySingleSelectToTypeResolver<TParent = MessageBodySingleSelect, TResult = string> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface MessageBodySingleSelectToIdResolver<TParent = MessageBodySingleSelect, TResult = string> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface MessageBodySingleSelectToTextResolver<TParent = MessageBodySingleSelect, TResult = string> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface MessageBodySingleSelectToChoicesResolver<TParent = MessageBodySingleSelect, TResult = Array<MessageBodyChoices | null> | null> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface MessageBodyCoreTypeResolver<TParent = MessageBodyCore> {
  (parent: TParent, context: Context, info: GraphQLResolveInfo): 'MessageBodySingleSelect' | 'MessageBodyMultipleSelect' | 'MessageBodyText' | 'MessageBodyNumber' | 'MessageBodyAudio' | 'MessageBodyBankIdCollect' | 'MessageBodyFile' | 'MessageBodyParagraph' | 'MessageBodyUndefined';
}
export interface MessageBodyChoicesTypeResolver<TParent = MessageBodyChoices> {
  (parent: TParent, context: Context, info: GraphQLResolveInfo): 'MessageBodyChoicesUndefined' | 'MessageBodyChoicesSelection' | 'MessageBodyChoicesLink';
}
export interface MessageBodyChoicesUndefinedTypeResolver<TParent = MessageBodyChoicesUndefined> {
  type?: MessageBodyChoicesUndefinedToTypeResolver<TParent>;
  value?: MessageBodyChoicesUndefinedToValueResolver<TParent>;
  text?: MessageBodyChoicesUndefinedToTextResolver<TParent>;
  selected?: MessageBodyChoicesUndefinedToSelectedResolver<TParent>;
}

export interface MessageBodyChoicesUndefinedToTypeResolver<TParent = MessageBodyChoicesUndefined, TResult = string> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface MessageBodyChoicesUndefinedToValueResolver<TParent = MessageBodyChoicesUndefined, TResult = string> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface MessageBodyChoicesUndefinedToTextResolver<TParent = MessageBodyChoicesUndefined, TResult = string> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface MessageBodyChoicesUndefinedToSelectedResolver<TParent = MessageBodyChoicesUndefined, TResult = boolean> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface MessageBodyChoicesCoreTypeResolver<TParent = MessageBodyChoicesCore> {
  (parent: TParent, context: Context, info: GraphQLResolveInfo): 'MessageBodyChoicesUndefined' | 'MessageBodyChoicesSelection' | 'MessageBodyChoicesLink';
}
export interface MessageBodyChoicesSelectionTypeResolver<TParent = MessageBodyChoicesSelection> {
  type?: MessageBodyChoicesSelectionToTypeResolver<TParent>;
  value?: MessageBodyChoicesSelectionToValueResolver<TParent>;
  text?: MessageBodyChoicesSelectionToTextResolver<TParent>;
  selected?: MessageBodyChoicesSelectionToSelectedResolver<TParent>;
  clearable?: MessageBodyChoicesSelectionToClearableResolver<TParent>;
}

export interface MessageBodyChoicesSelectionToTypeResolver<TParent = MessageBodyChoicesSelection, TResult = string> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface MessageBodyChoicesSelectionToValueResolver<TParent = MessageBodyChoicesSelection, TResult = string> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface MessageBodyChoicesSelectionToTextResolver<TParent = MessageBodyChoicesSelection, TResult = string> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface MessageBodyChoicesSelectionToSelectedResolver<TParent = MessageBodyChoicesSelection, TResult = boolean> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface MessageBodyChoicesSelectionToClearableResolver<TParent = MessageBodyChoicesSelection, TResult = boolean | null> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface MessageBodyChoicesLinkTypeResolver<TParent = MessageBodyChoicesLink> {
  type?: MessageBodyChoicesLinkToTypeResolver<TParent>;
  value?: MessageBodyChoicesLinkToValueResolver<TParent>;
  text?: MessageBodyChoicesLinkToTextResolver<TParent>;
  selected?: MessageBodyChoicesLinkToSelectedResolver<TParent>;
  view?: MessageBodyChoicesLinkToViewResolver<TParent>;
  appUrl?: MessageBodyChoicesLinkToAppUrlResolver<TParent>;
  webUrl?: MessageBodyChoicesLinkToWebUrlResolver<TParent>;
}

export interface MessageBodyChoicesLinkToTypeResolver<TParent = MessageBodyChoicesLink, TResult = string> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface MessageBodyChoicesLinkToValueResolver<TParent = MessageBodyChoicesLink, TResult = string> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface MessageBodyChoicesLinkToTextResolver<TParent = MessageBodyChoicesLink, TResult = string> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface MessageBodyChoicesLinkToSelectedResolver<TParent = MessageBodyChoicesLink, TResult = boolean> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface MessageBodyChoicesLinkToViewResolver<TParent = MessageBodyChoicesLink, TResult = MessageBodyChoicesLinkView | null> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface MessageBodyChoicesLinkToAppUrlResolver<TParent = MessageBodyChoicesLink, TResult = string | null> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface MessageBodyChoicesLinkToWebUrlResolver<TParent = MessageBodyChoicesLink, TResult = string | null> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface MessageBodyMultipleSelectTypeResolver<TParent = MessageBodyMultipleSelect> {
  type?: MessageBodyMultipleSelectToTypeResolver<TParent>;
  id?: MessageBodyMultipleSelectToIdResolver<TParent>;
  text?: MessageBodyMultipleSelectToTextResolver<TParent>;
  choices?: MessageBodyMultipleSelectToChoicesResolver<TParent>;
}

export interface MessageBodyMultipleSelectToTypeResolver<TParent = MessageBodyMultipleSelect, TResult = string> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface MessageBodyMultipleSelectToIdResolver<TParent = MessageBodyMultipleSelect, TResult = string> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface MessageBodyMultipleSelectToTextResolver<TParent = MessageBodyMultipleSelect, TResult = string> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface MessageBodyMultipleSelectToChoicesResolver<TParent = MessageBodyMultipleSelect, TResult = Array<MessageBodyChoices | null> | null> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface MessageBodyTextTypeResolver<TParent = MessageBodyText> {
  type?: MessageBodyTextToTypeResolver<TParent>;
  id?: MessageBodyTextToIdResolver<TParent>;
  text?: MessageBodyTextToTextResolver<TParent>;
}

export interface MessageBodyTextToTypeResolver<TParent = MessageBodyText, TResult = string> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface MessageBodyTextToIdResolver<TParent = MessageBodyText, TResult = string> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface MessageBodyTextToTextResolver<TParent = MessageBodyText, TResult = string> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface MessageBodyNumberTypeResolver<TParent = MessageBodyNumber> {
  type?: MessageBodyNumberToTypeResolver<TParent>;
  id?: MessageBodyNumberToIdResolver<TParent>;
  text?: MessageBodyNumberToTextResolver<TParent>;
}

export interface MessageBodyNumberToTypeResolver<TParent = MessageBodyNumber, TResult = string> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface MessageBodyNumberToIdResolver<TParent = MessageBodyNumber, TResult = string> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface MessageBodyNumberToTextResolver<TParent = MessageBodyNumber, TResult = string> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface MessageBodyAudioTypeResolver<TParent = MessageBodyAudio> {
  type?: MessageBodyAudioToTypeResolver<TParent>;
  id?: MessageBodyAudioToIdResolver<TParent>;
  text?: MessageBodyAudioToTextResolver<TParent>;
  url?: MessageBodyAudioToUrlResolver<TParent>;
}

export interface MessageBodyAudioToTypeResolver<TParent = MessageBodyAudio, TResult = string> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface MessageBodyAudioToIdResolver<TParent = MessageBodyAudio, TResult = string> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface MessageBodyAudioToTextResolver<TParent = MessageBodyAudio, TResult = string> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface MessageBodyAudioToUrlResolver<TParent = MessageBodyAudio, TResult = string | null> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface MessageBodyBankIdCollectTypeResolver<TParent = MessageBodyBankIdCollect> {
  type?: MessageBodyBankIdCollectToTypeResolver<TParent>;
  id?: MessageBodyBankIdCollectToIdResolver<TParent>;
  text?: MessageBodyBankIdCollectToTextResolver<TParent>;
  referenceId?: MessageBodyBankIdCollectToReferenceIdResolver<TParent>;
}

export interface MessageBodyBankIdCollectToTypeResolver<TParent = MessageBodyBankIdCollect, TResult = string> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface MessageBodyBankIdCollectToIdResolver<TParent = MessageBodyBankIdCollect, TResult = string> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface MessageBodyBankIdCollectToTextResolver<TParent = MessageBodyBankIdCollect, TResult = string> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface MessageBodyBankIdCollectToReferenceIdResolver<TParent = MessageBodyBankIdCollect, TResult = string | null> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface MessageBodyFileTypeResolver<TParent = MessageBodyFile> {
  type?: MessageBodyFileToTypeResolver<TParent>;
  id?: MessageBodyFileToIdResolver<TParent>;
  text?: MessageBodyFileToTextResolver<TParent>;
  key?: MessageBodyFileToKeyResolver<TParent>;
  mimeType?: MessageBodyFileToMimeTypeResolver<TParent>;
}

export interface MessageBodyFileToTypeResolver<TParent = MessageBodyFile, TResult = string> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface MessageBodyFileToIdResolver<TParent = MessageBodyFile, TResult = string> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface MessageBodyFileToTextResolver<TParent = MessageBodyFile, TResult = string> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface MessageBodyFileToKeyResolver<TParent = MessageBodyFile, TResult = string | null> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface MessageBodyFileToMimeTypeResolver<TParent = MessageBodyFile, TResult = string | null> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface MessageBodyParagraphTypeResolver<TParent = MessageBodyParagraph> {
  type?: MessageBodyParagraphToTypeResolver<TParent>;
  id?: MessageBodyParagraphToIdResolver<TParent>;
  text?: MessageBodyParagraphToTextResolver<TParent>;
}

export interface MessageBodyParagraphToTypeResolver<TParent = MessageBodyParagraph, TResult = string> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface MessageBodyParagraphToIdResolver<TParent = MessageBodyParagraph, TResult = string> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface MessageBodyParagraphToTextResolver<TParent = MessageBodyParagraph, TResult = string> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface MessageBodyUndefinedTypeResolver<TParent = MessageBodyUndefined> {
  type?: MessageBodyUndefinedToTypeResolver<TParent>;
  id?: MessageBodyUndefinedToIdResolver<TParent>;
  text?: MessageBodyUndefinedToTextResolver<TParent>;
}

export interface MessageBodyUndefinedToTypeResolver<TParent = MessageBodyUndefined, TResult = string> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface MessageBodyUndefinedToIdResolver<TParent = MessageBodyUndefined, TResult = string> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface MessageBodyUndefinedToTextResolver<TParent = MessageBodyUndefined, TResult = string> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface MessageHeaderTypeResolver<TParent = MessageHeader> {
  messageId?: MessageHeaderToMessageIdResolver<TParent>;
  fromMyself?: MessageHeaderToFromMyselfResolver<TParent>;
  timeStamp?: MessageHeaderToTimeStampResolver<TParent>;
  richTextChatCompatible?: MessageHeaderToRichTextChatCompatibleResolver<TParent>;
  editAllowed?: MessageHeaderToEditAllowedResolver<TParent>;
  shouldRequestPushNotifications?: MessageHeaderToShouldRequestPushNotificationsResolver<TParent>;
  pollingInterval?: MessageHeaderToPollingIntervalResolver<TParent>;
  loadingIndicator?: MessageHeaderToLoadingIndicatorResolver<TParent>;
}

export interface MessageHeaderToMessageIdResolver<TParent = MessageHeader, TResult = string> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface MessageHeaderToFromMyselfResolver<TParent = MessageHeader, TResult = boolean> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface MessageHeaderToTimeStampResolver<TParent = MessageHeader, TResult = string> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface MessageHeaderToRichTextChatCompatibleResolver<TParent = MessageHeader, TResult = boolean> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface MessageHeaderToEditAllowedResolver<TParent = MessageHeader, TResult = boolean> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface MessageHeaderToShouldRequestPushNotificationsResolver<TParent = MessageHeader, TResult = boolean> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface MessageHeaderToPollingIntervalResolver<TParent = MessageHeader, TResult = number> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface MessageHeaderToLoadingIndicatorResolver<TParent = MessageHeader, TResult = string | null> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface ChatResponseTypeResolver<TParent = ChatResponse> {
  globalId?: ChatResponseToGlobalIdResolver<TParent>;
  id?: ChatResponseToIdResolver<TParent>;
  body?: ChatResponseToBodyResolver<TParent>;
  header?: ChatResponseToHeaderResolver<TParent>;
}

export interface ChatResponseToGlobalIdResolver<TParent = ChatResponse, TResult = string> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface ChatResponseToIdResolver<TParent = ChatResponse, TResult = string> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface ChatResponseToBodyResolver<TParent = ChatResponse, TResult = MessageBody | null> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface ChatResponseToHeaderResolver<TParent = ChatResponse, TResult = MessageHeader | null> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface ChatStateTypeResolver<TParent = ChatState> {
  ongoingClaim?: ChatStateToOngoingClaimResolver<TParent>;
  showOfferScreen?: ChatStateToShowOfferScreenResolver<TParent>;
  onboardingDone?: ChatStateToOnboardingDoneResolver<TParent>;
}

export interface ChatStateToOngoingClaimResolver<TParent = ChatState, TResult = boolean> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface ChatStateToShowOfferScreenResolver<TParent = ChatState, TResult = boolean> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface ChatStateToOnboardingDoneResolver<TParent = ChatState, TResult = boolean> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface AvatarTypeResolver<TParent = Avatar> {
  name?: AvatarToNameResolver<TParent>;
  URL?: AvatarToURLResolver<TParent>;
  width?: AvatarToWidthResolver<TParent>;
  height?: AvatarToHeightResolver<TParent>;
  duration?: AvatarToDurationResolver<TParent>;
  data?: AvatarToDataResolver<TParent>;
}

export interface AvatarToNameResolver<TParent = Avatar, TResult = string> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface AvatarToURLResolver<TParent = Avatar, TResult = string> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface AvatarToWidthResolver<TParent = Avatar, TResult = number> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface AvatarToHeightResolver<TParent = Avatar, TResult = number> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface AvatarToDurationResolver<TParent = Avatar, TResult = number> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface AvatarToDataResolver<TParent = Avatar, TResult = Object | null> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface MutationTypeResolver<TParent = undefined> {
  logout?: MutationToLogoutResolver<TParent>;
  createSession?: MutationToCreateSessionResolver<TParent>;
  createSessionV2?: MutationToCreateSessionV2Resolver<TParent>;
  createOffer?: MutationToCreateOfferResolver<TParent>;
  signOffer?: MutationToSignOfferResolver<TParent>;
  uploadFile?: MutationToUploadFileResolver<TParent>;
  selectCashbackOption?: MutationToSelectCashbackOptionResolver<TParent>;
  offerClosed?: MutationToOfferClosedResolver<TParent>;
  startDirectDebitRegistration?: MutationToStartDirectDebitRegistrationResolver<TParent>;
  sendChatTextResponse?: MutationToSendChatTextResponseResolver<TParent>;
  sendChatSingleSelectResponse?: MutationToSendChatSingleSelectResponseResolver<TParent>;
  sendChatFileResponse?: MutationToSendChatFileResponseResolver<TParent>;
  resetConversation?: MutationToResetConversationResolver<TParent>;
}

export interface MutationToLogoutResolver<TParent = undefined, TResult = boolean> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface MutationToCreateSessionArgs {
  campaign?: CampaignInput;
  trackingId?: UUID;
}
export interface MutationToCreateSessionResolver<TParent = undefined, TResult = string> {
  (parent: TParent, args: MutationToCreateSessionArgs, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface MutationToCreateSessionV2Resolver<TParent = undefined, TResult = SessionInformation | null> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface MutationToCreateOfferArgs {
  details: OfferInput;
}
export interface MutationToCreateOfferResolver<TParent = undefined, TResult = boolean | null> {
  (parent: TParent, args: MutationToCreateOfferArgs, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface MutationToSignOfferArgs {
  details: SignInput;
}
export interface MutationToSignOfferResolver<TParent = undefined, TResult = boolean | null> {
  (parent: TParent, args: MutationToSignOfferArgs, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface MutationToUploadFileArgs {
  file: Upload;
}
export interface MutationToUploadFileResolver<TParent = undefined, TResult = File> {
  (parent: TParent, args: MutationToUploadFileArgs, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface MutationToSelectCashbackOptionArgs {
  id: string;
}
export interface MutationToSelectCashbackOptionResolver<TParent = undefined, TResult = Cashback> {
  (parent: TParent, args: MutationToSelectCashbackOptionArgs, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface MutationToOfferClosedResolver<TParent = undefined, TResult = boolean> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface MutationToStartDirectDebitRegistrationResolver<TParent = undefined, TResult = URL> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface MutationToSendChatTextResponseArgs {
  input: ChatResponseTextInput;
}
export interface MutationToSendChatTextResponseResolver<TParent = undefined, TResult = boolean> {
  (parent: TParent, args: MutationToSendChatTextResponseArgs, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface MutationToSendChatSingleSelectResponseArgs {
  input: ChatResponseSingleSelectInput;
}
export interface MutationToSendChatSingleSelectResponseResolver<TParent = undefined, TResult = boolean> {
  (parent: TParent, args: MutationToSendChatSingleSelectResponseArgs, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface MutationToSendChatFileResponseArgs {
  input: ChatResponseFileInput;
}
export interface MutationToSendChatFileResponseResolver<TParent = undefined, TResult = boolean> {
  (parent: TParent, args: MutationToSendChatFileResponseArgs, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface MutationToResetConversationResolver<TParent = undefined, TResult = boolean> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface SessionInformationTypeResolver<TParent = SessionInformation> {
  token?: SessionInformationToTokenResolver<TParent>;
  memberId?: SessionInformationToMemberIdResolver<TParent>;
}

export interface SessionInformationToTokenResolver<TParent = SessionInformation, TResult = string> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface SessionInformationToMemberIdResolver<TParent = SessionInformation, TResult = string> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface SubscriptionTypeResolver<TParent = undefined> {
  offer?: SubscriptionToOfferResolver<TParent>;
  signStatus?: SubscriptionToSignStatusResolver<TParent>;
  message?: SubscriptionToMessageResolver<TParent>;
  currentChatResponse?: SubscriptionToCurrentChatResponseResolver<TParent>;
  chatState?: SubscriptionToChatStateResolver<TParent>;
}

export interface SubscriptionToOfferResolver<TParent = undefined, TResult = OfferEvent | null> {
  resolve?: (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo) => TResult | Promise<TResult>;
  subscribe: (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo) => AsyncIterator<TResult> | Promise<AsyncIterator<TResult>>;
}

export interface SubscriptionToSignStatusResolver<TParent = undefined, TResult = SignEvent | null> {
  resolve?: (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo) => TResult | Promise<TResult>;
  subscribe: (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo) => AsyncIterator<TResult> | Promise<AsyncIterator<TResult>>;
}

export interface SubscriptionToMessageResolver<TParent = undefined, TResult = Message | null> {
  resolve?: (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo) => TResult | Promise<TResult>;
  subscribe: (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo) => AsyncIterator<TResult> | Promise<AsyncIterator<TResult>>;
}

export interface SubscriptionToCurrentChatResponseResolver<TParent = undefined, TResult = ChatResponse | null> {
  resolve?: (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo) => TResult | Promise<TResult>;
  subscribe: (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo) => AsyncIterator<TResult> | Promise<AsyncIterator<TResult>>;
}

export interface SubscriptionToChatStateResolver<TParent = undefined, TResult = ChatState> {
  resolve?: (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo) => TResult | Promise<TResult>;
  subscribe: (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo) => AsyncIterator<TResult> | Promise<AsyncIterator<TResult>>;
}

export interface OfferEventTypeResolver<TParent = OfferEvent> {
  status?: OfferEventToStatusResolver<TParent>;
  insurance?: OfferEventToInsuranceResolver<TParent>;
}

export interface OfferEventToStatusResolver<TParent = OfferEvent, TResult = OfferStatus> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface OfferEventToInsuranceResolver<TParent = OfferEvent, TResult = Insurance | null> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface SignEventTypeResolver<TParent = SignEvent> {
  status?: SignEventToStatusResolver<TParent>;
}

export interface SignEventToStatusResolver<TParent = SignEvent, TResult = SignStatus | null> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}
