import { Context } from '../context'
/* tslint:disable */
/* eslint-disable */
import { GraphQLResolveInfo, GraphQLScalarType } from 'graphql';
/**
 * This file is auto-generated by graphql-schema-typescript
 * Please note that any changes in this file may be overwritten
 */
 

/*******************************
 *                             *
 *          TYPE DEFS          *
 *                             *
 *******************************/
export interface Query {
  
  /**
   * 
   * @deprecated Use `contracts` instead
   */
  insurance: Insurance;
  cashback?: Cashback;
  cashbackOptions: Array<Cashback | null>;
  signStatus?: SignStatus;
  member: Member;
  gifs: Array<Gif | null>;
  file: File;
  messages: Array<Message | null>;
  currentChatResponse?: ChatResponse;
  chatState: ChatState;
  avatars?: Array<Avatar | null>;
  chatActions?: Array<ChatAction | null>;
  geo: Geo;
  angelStory?: AngelStory;
  
  /**
   * Returns all the currently active contracts, combined into bundles.
   */
  activeContractBundles: Array<ContractBundle>;
  
  /**
   * Returns all contracts the member currently holds, regardless of activation/termination status
   */
  contracts: Array<Contract>;
  
  /**
   * Returns whether a member has at least one contract
   */
  hasContract: boolean;
  
  /**
   * Returns a type describing whether the 'Self Change' functionality is possible.
   */
  selfChangeEligibility: SelfChangeEligibility;
  
  /**
   * All locales that are available and activated
   */
  availableLocales: Array<Locale>;
}

export interface Insurance {
  address?: string;
  postalNumber?: string;
  cost?: InsuranceCost;
  personsInHousehold?: number;
  certificateUrl?: string;
  status: InsuranceStatus;
  type?: InsuranceType;
  activeFrom?: LocalDate;
  
  /**
   * 
   * @deprecated Use previousInsurer instead
   */
  insuredAtOtherCompany?: boolean;
  presaleInformationUrl?: string;
  policyUrl?: string;
  
  /**
   * 
   * @deprecated Use previousInsurer instead
   */
  currentInsurerName?: string;
  livingSpace?: number;
  
  /**
   * 
   * @deprecated Use arrangedPerilCategories instead
   */
  perilCategories?: Array<PerilCategory | null>;
  
  /**
   * 
   * @deprecated Use cost instead
   */
  monthlyCost?: number;
  
  /**
   * 
   * @deprecated No longer supported
   */
  safetyIncreasers?: Array<string>;
  arrangedPerilCategories: ArrangedPerilCategories;
  renewal?: Renewal;
  previousInsurer?: PreviousInsurer;
  ancillaryArea?: number;
  yearOfConstruction?: number;
  numberOfBathrooms?: number;
  extraBuildings?: Array<ExtraBuilding>;
  isSubleted?: boolean;
}

export interface InsuranceCost {
  monthlyGross: MonetaryAmountV2;
  monthlyDiscount: MonetaryAmountV2;
  monthlyNet: MonetaryAmountV2;
  freeUntil?: LocalDate;
}

export interface MonetaryAmountV2 {
  amount: string;
  currency: string;
}

export type LocalDate = any;

export enum InsuranceStatus {
  PENDING = 'PENDING',
  ACTIVE = 'ACTIVE',
  INACTIVE = 'INACTIVE',
  INACTIVE_WITH_START_DATE = 'INACTIVE_WITH_START_DATE',
  TERMINATED = 'TERMINATED'
}

export enum InsuranceType {
  RENT = 'RENT',
  BRF = 'BRF',
  STUDENT_RENT = 'STUDENT_RENT',
  STUDENT_BRF = 'STUDENT_BRF',
  HOUSE = 'HOUSE'
}

export interface PerilCategory {
  title?: string;
  description?: string;
  iconUrl?: string;
  perils?: Array<Peril | null>;
}

export interface Peril {
  id?: string;
  title?: string;
  imageUrl?: string;
  description?: string;
}

export interface ArrangedPerilCategories {
  me?: PerilCategory;
  home?: PerilCategory;
  stuff?: PerilCategory;
}

export interface Renewal {
  certificateUrl: string;
  date: LocalDate;
}

export interface PreviousInsurer {
  displayName?: string;
  id: string;
  switchable: boolean;
}

export type ExtraBuilding = ExtraBuildingValue;

/** Use this to resolve union type ExtraBuilding */
export type PossibleExtraBuildingTypeNames = 'ExtraBuildingValue';

export interface ExtraBuildingNameMap {
  ExtraBuilding: ExtraBuilding;
  ExtraBuildingValue: ExtraBuildingValue;
}

export interface ExtraBuildingValue extends ExtraBuildingCore {
  type: ExtraBuildingType;
  area: number;
  displayName: string;
  hasWaterConnected: boolean;
}

export interface ExtraBuildingCore {
  type: ExtraBuildingType;
  area: number;
  displayName: string;
  hasWaterConnected: boolean;
}

/** Use this to resolve interface type ExtraBuildingCore */
export type PossibleExtraBuildingCoreTypeNames = 'ExtraBuildingValue';

export interface ExtraBuildingCoreNameMap {
  ExtraBuildingCore: ExtraBuildingCore;
  ExtraBuildingValue: ExtraBuildingValue;
}

export enum ExtraBuildingType {
  GARAGE = 'GARAGE',
  CARPORT = 'CARPORT',
  SHED = 'SHED',
  STOREHOUSE = 'STOREHOUSE',
  FRIGGEBOD = 'FRIGGEBOD',
  ATTEFALL = 'ATTEFALL',
  OUTHOUSE = 'OUTHOUSE',
  GUESTHOUSE = 'GUESTHOUSE',
  GAZEBO = 'GAZEBO',
  GREENHOUSE = 'GREENHOUSE',
  SAUNA = 'SAUNA',
  BARN = 'BARN',
  BOATHOUSE = 'BOATHOUSE',
  OTHER = 'OTHER'
}

export enum Locale {
  sv_SE = 'sv_SE',
  en_SE = 'en_SE',
  nb_NO = 'nb_NO',
  en_NO = 'en_NO',
  da_DK = 'da_DK',
  en_DK = 'en_DK'
}

export interface Cashback {
  id?: string;
  name?: string;
  imageUrl?: string;
  selectedUrl?: string;
  description?: string;
  title?: string;
  paragraph?: string;
}

export interface SignStatus {
  collectStatus?: CollectStatus;
  signState?: SignState;
}

export interface CollectStatus {
  status?: BankIdStatus;
  code?: string;
}

export enum BankIdStatus {
  pending = 'pending',
  failed = 'failed',
  complete = 'complete'
}

export enum SignState {
  INITIATED = 'INITIATED',
  IN_PROGRESS = 'IN_PROGRESS',
  FAILED = 'FAILED',
  COMPLETED = 'COMPLETED'
}

export interface Member {
  id?: string;
  firstName?: string;
  lastName?: string;
  email?: string;
  phoneNumber?: string;
  acceptLanguage?: string;
  features: Array<Feature>;
}

export enum Feature {
  KeyGear = 'KeyGear',
  Referrals = 'Referrals'
}

export interface Gif {
  url?: string;
}

export interface File {
  
  /**
   * signedUrl is valid for 30 minutes after upload, don't hang on to this.
   */
  signedUrl: string;
  
  /**
   * S3 key that can be used to retreive new signed urls in the future.
   */
  key: string;
  
  /**
   * S3 bucket that the file was uploaded to.
   */
  bucket: string;
}

export interface Message {
  globalId: string;
  id: string;
  body: MessageBody;
  header: MessageHeader;
}

export type MessageBody =
MessageBodySingleSelect |
MessageBodyMultipleSelect |
MessageBodyText |
MessageBodyNumber |
MessageBodyAudio |
MessageBodyBankIdCollect |
MessageBodyFile |
MessageBodyParagraph |
MessageBodyUndefined;

/** Use this to resolve union type MessageBody */
export type PossibleMessageBodyTypeNames =
'MessageBodySingleSelect' |
'MessageBodyMultipleSelect' |
'MessageBodyText' |
'MessageBodyNumber' |
'MessageBodyAudio' |
'MessageBodyBankIdCollect' |
'MessageBodyFile' |
'MessageBodyParagraph' |
'MessageBodyUndefined';

export interface MessageBodyNameMap {
  MessageBody: MessageBody;
  MessageBodySingleSelect: MessageBodySingleSelect;
  MessageBodyMultipleSelect: MessageBodyMultipleSelect;
  MessageBodyText: MessageBodyText;
  MessageBodyNumber: MessageBodyNumber;
  MessageBodyAudio: MessageBodyAudio;
  MessageBodyBankIdCollect: MessageBodyBankIdCollect;
  MessageBodyFile: MessageBodyFile;
  MessageBodyParagraph: MessageBodyParagraph;
  MessageBodyUndefined: MessageBodyUndefined;
}

export interface MessageBodySingleSelect extends MessageBodyCore {
  type: string;
  id: string;
  text: string;
  choices?: Array<MessageBodyChoices | null>;
}

export interface MessageBodyCore {
  type: string;
  id: string;
  text: string;
}

/** Use this to resolve interface type MessageBodyCore */
export type PossibleMessageBodyCoreTypeNames =
'MessageBodySingleSelect' |
'MessageBodyMultipleSelect' |
'MessageBodyText' |
'MessageBodyNumber' |
'MessageBodyAudio' |
'MessageBodyBankIdCollect' |
'MessageBodyFile' |
'MessageBodyParagraph' |
'MessageBodyUndefined';

export interface MessageBodyCoreNameMap {
  MessageBodyCore: MessageBodyCore;
  MessageBodySingleSelect: MessageBodySingleSelect;
  MessageBodyMultipleSelect: MessageBodyMultipleSelect;
  MessageBodyText: MessageBodyText;
  MessageBodyNumber: MessageBodyNumber;
  MessageBodyAudio: MessageBodyAudio;
  MessageBodyBankIdCollect: MessageBodyBankIdCollect;
  MessageBodyFile: MessageBodyFile;
  MessageBodyParagraph: MessageBodyParagraph;
  MessageBodyUndefined: MessageBodyUndefined;
}

export type MessageBodyChoices =
MessageBodyChoicesUndefined |
MessageBodyChoicesSelection |
MessageBodyChoicesLink;

/** Use this to resolve union type MessageBodyChoices */
export type PossibleMessageBodyChoicesTypeNames =
'MessageBodyChoicesUndefined' |
'MessageBodyChoicesSelection' |
'MessageBodyChoicesLink';

export interface MessageBodyChoicesNameMap {
  MessageBodyChoices: MessageBodyChoices;
  MessageBodyChoicesUndefined: MessageBodyChoicesUndefined;
  MessageBodyChoicesSelection: MessageBodyChoicesSelection;
  MessageBodyChoicesLink: MessageBodyChoicesLink;
}

export interface MessageBodyChoicesUndefined extends MessageBodyChoicesCore {
  type: string;
  value: string;
  text: string;
  selected: boolean;
}

export interface MessageBodyChoicesCore {
  type: string;
  value: string;
  text: string;
  selected: boolean;
}

/** Use this to resolve interface type MessageBodyChoicesCore */
export type PossibleMessageBodyChoicesCoreTypeNames =
'MessageBodyChoicesUndefined' |
'MessageBodyChoicesSelection' |
'MessageBodyChoicesLink';

export interface MessageBodyChoicesCoreNameMap {
  MessageBodyChoicesCore: MessageBodyChoicesCore;
  MessageBodyChoicesUndefined: MessageBodyChoicesUndefined;
  MessageBodyChoicesSelection: MessageBodyChoicesSelection;
  MessageBodyChoicesLink: MessageBodyChoicesLink;
}

export interface MessageBodyChoicesSelection extends MessageBodyChoicesCore {
  type: string;
  value: string;
  text: string;
  selected: boolean;
  clearable?: boolean;
}

export interface MessageBodyChoicesLink extends MessageBodyChoicesCore {
  type: string;
  value: string;
  text: string;
  selected: boolean;
  view?: MessageBodyChoicesLinkView;
  appUrl?: string;
  webUrl?: string;
}

export enum MessageBodyChoicesLinkView {
  OFFER = 'OFFER',
  DASHBOARD = 'DASHBOARD'
}

export interface MessageBodyMultipleSelect extends MessageBodyCore {
  type: string;
  id: string;
  text: string;
  choices?: Array<MessageBodyChoices | null>;
}

export interface MessageBodyText extends MessageBodyCore {
  type: string;
  id: string;
  text: string;
  placeholder?: string;
  keyboard?: KeyboardType;
  textContentType?: TextContentType;
}

export enum KeyboardType {
  DEFAULT = 'DEFAULT',
  NUMBERPAD = 'NUMBERPAD',
  DECIMALPAD = 'DECIMALPAD',
  NUMERIC = 'NUMERIC',
  EMAIL = 'EMAIL',
  PHONE = 'PHONE'
}

export enum TextContentType {
  NONE = 'NONE',
  URL = 'URL',
  ADDRESS_CITY = 'ADDRESS_CITY',
  ADDRESS_CITY_STATE = 'ADDRESS_CITY_STATE',
  ADDRESS_STATE = 'ADDRESS_STATE',
  COUNTRY_NAME = 'COUNTRY_NAME',
  CREDIT_CARD_NUMBER = 'CREDIT_CARD_NUMBER',
  EMAIL_ADDRESS = 'EMAIL_ADDRESS',
  FAMILY_NAME = 'FAMILY_NAME',
  FULL_STREET_ADDRESS = 'FULL_STREET_ADDRESS',
  GIVEN_NAME = 'GIVEN_NAME',
  JOB_TITLE = 'JOB_TITLE',
  LOCATION = 'LOCATION',
  MIDDLE_NAME = 'MIDDLE_NAME',
  NAME = 'NAME',
  NAME_PREFIX = 'NAME_PREFIX',
  NAME_SUFFIX = 'NAME_SUFFIX',
  NICK_NAME = 'NICK_NAME',
  ORGANIZATION_NAME = 'ORGANIZATION_NAME',
  POSTAL_CODE = 'POSTAL_CODE',
  STREET_ADDRESS_LINE1 = 'STREET_ADDRESS_LINE1',
  STREET_ADDRESS_LINE2 = 'STREET_ADDRESS_LINE2',
  SUBLOCALITY = 'SUBLOCALITY',
  TELEPHONE_NUMBER = 'TELEPHONE_NUMBER',
  USERNAME = 'USERNAME',
  PASSWORD = 'PASSWORD'
}

export interface MessageBodyNumber extends MessageBodyCore {
  type: string;
  id: string;
  text: string;
  placeholder?: string;
  keyboard?: KeyboardType;
  textContentType?: TextContentType;
}

export interface MessageBodyAudio extends MessageBodyCore {
  type: string;
  id: string;
  text: string;
  url?: string;
}

export interface MessageBodyBankIdCollect extends MessageBodyCore {
  type: string;
  id: string;
  text: string;
  referenceId?: string;
}

export interface MessageBodyFile extends MessageBodyCore {
  type: string;
  id: string;
  text: string;
  key?: string;
  mimeType?: string;
  file: File;
}

export interface MessageBodyParagraph extends MessageBodyCore {
  type: string;
  id: string;
  text: string;
}

export interface MessageBodyUndefined extends MessageBodyCore {
  type: string;
  id: string;
  text: string;
}

export interface MessageHeader {
  messageId: string;
  fromMyself: boolean;
  timeStamp: string;
  richTextChatCompatible: boolean;
  editAllowed: boolean;
  shouldRequestPushNotifications: boolean;
  pollingInterval: number;
  loadingIndicator?: string;
  markedAsRead: boolean;
  statusMessage?: string;
}

export interface ChatResponse {
  globalId: string;
  id: string;
  body: MessageBody;
  header: MessageHeader;
}

export interface ChatState {
  ongoingClaim: boolean;
  showOfferScreen: boolean;
  onboardingDone: boolean;
}

export interface Avatar {
  name: string;
  URL: string;
  width: number;
  height: number;
  duration: number;
  data?: Object;
}

export type Object = any;

export interface ChatAction {
  text?: string;
  triggerUrl?: URL;
  enabled?: boolean;
}

export type URL = any;

export interface Geo {
  countryISOCode: string;
}

export interface AngelStory {
  content: string;
}

export interface ContractBundle {
  id: string;
  contracts: Array<Contract>;
  angelStories: ContractBundleAngelStories;
}

export interface Contract {
  id: string;
  holderMember: string;
  typeOfContract: TypeOfContract;
  switchedFromInsuranceProvider?: string;
  status: ContractStatus;
  displayName: string;
  
  /**
   * "The 'best guess' of the agreement that depicts the member's insurance, either the pending, future, current or, if terminated, past agreement
   */
  currentAgreement: Agreement;
  
  /**
   * The date the contract agreement timeline begin, if it has been activated
   */
  inception?: LocalDate;
  
  /**
   * The date the contract agreement timelinen end, on if it has been terminated
   */
  termination?: LocalDate;
  
  /**
   * An upcoming renewal, present if the member has been notified and the renewal is within 31 days
   */
  upcomingRenewal?: UpcomingRenewal;
  createdAt: Instant;
}

export enum TypeOfContract {
  SE_HOUSE = 'SE_HOUSE',
  SE_APARTMENT_BRF = 'SE_APARTMENT_BRF',
  SE_APARTMENT_RENT = 'SE_APARTMENT_RENT',
  SE_APARTMENT_STUDENT_BRF = 'SE_APARTMENT_STUDENT_BRF',
  SE_APARTMENT_STUDENT_RENT = 'SE_APARTMENT_STUDENT_RENT',
  NO_HOME_CONTENT_OWN = 'NO_HOME_CONTENT_OWN',
  NO_HOME_CONTENT_RENT = 'NO_HOME_CONTENT_RENT',
  NO_HOME_CONTENT_YOUTH_OWN = 'NO_HOME_CONTENT_YOUTH_OWN',
  NO_HOME_CONTENT_YOUTH_RENT = 'NO_HOME_CONTENT_YOUTH_RENT',
  NO_TRAVEL = 'NO_TRAVEL',
  NO_TRAVEL_YOUTH = 'NO_TRAVEL_YOUTH',
  DK_HOME_CONTENT_OWN = 'DK_HOME_CONTENT_OWN',
  DK_HOME_CONTENT_RENT = 'DK_HOME_CONTENT_RENT',
  DK_HOME_CONTENT_STUDENT_OWN = 'DK_HOME_CONTENT_STUDENT_OWN',
  DK_HOME_CONTENT_STUDENT_RENT = 'DK_HOME_CONTENT_STUDENT_RENT',
  DK_ACCIDENT = 'DK_ACCIDENT',
  DK_ACCIDENT_STUDENT = 'DK_ACCIDENT_STUDENT',
  DK_TRAVEL = 'DK_TRAVEL',
  DK_TRAVEL_STUDENT = 'DK_TRAVEL_STUDENT'
}

export type ContractStatus =
PendingStatus |
ActiveInFutureStatus |
ActiveStatus |
ActiveInFutureAndTerminatedInFutureStatus |
TerminatedInFutureStatus |
TerminatedTodayStatus |
TerminatedStatus;

/** Use this to resolve union type ContractStatus */
export type PossibleContractStatusTypeNames =
'PendingStatus' |
'ActiveInFutureStatus' |
'ActiveStatus' |
'ActiveInFutureAndTerminatedInFutureStatus' |
'TerminatedInFutureStatus' |
'TerminatedTodayStatus' |
'TerminatedStatus';

export interface ContractStatusNameMap {
  ContractStatus: ContractStatus;
  PendingStatus: PendingStatus;
  ActiveInFutureStatus: ActiveInFutureStatus;
  ActiveStatus: ActiveStatus;
  ActiveInFutureAndTerminatedInFutureStatus: ActiveInFutureAndTerminatedInFutureStatus;
  TerminatedInFutureStatus: TerminatedInFutureStatus;
  TerminatedTodayStatus: TerminatedTodayStatus;
  TerminatedStatus: TerminatedStatus;
}

/**
 * The contract is neither active or terminated, waiting to have an inception date set
 */
export interface PendingStatus {
  pendingSince?: LocalDate;
}

/**
 * The contract has an inception date set in the future
 */
export interface ActiveInFutureStatus {
  futureInception?: LocalDate;
}

/**
 * The contract has an inception date set today or in the past without a termination date set
 */
export interface ActiveStatus {
  pastInception?: LocalDate;
  upcomingAgreementChange?: UpcomingAgreementChange;
}

/**
 * If present, the upcomingAgreementChange contains info regarding the agreement that will succeed the current one
 */
export interface UpcomingAgreementChange {
  newAgreement: Agreement;
}

export type Agreement =
SwedishApartmentAgreement |
SwedishHouseAgreement |
NorwegianHomeContentAgreement |
NorwegianTravelAgreement |
DanishHomeContentAgreement |
DanishAccidentAgreement |
DanishTravelAgreement;

/** Use this to resolve union type Agreement */
export type PossibleAgreementTypeNames =
'SwedishApartmentAgreement' |
'SwedishHouseAgreement' |
'NorwegianHomeContentAgreement' |
'NorwegianTravelAgreement' |
'DanishHomeContentAgreement' |
'DanishAccidentAgreement' |
'DanishTravelAgreement';

export interface AgreementNameMap {
  Agreement: Agreement;
  SwedishApartmentAgreement: SwedishApartmentAgreement;
  SwedishHouseAgreement: SwedishHouseAgreement;
  NorwegianHomeContentAgreement: NorwegianHomeContentAgreement;
  NorwegianTravelAgreement: NorwegianTravelAgreement;
  DanishHomeContentAgreement: DanishHomeContentAgreement;
  DanishAccidentAgreement: DanishAccidentAgreement;
  DanishTravelAgreement: DanishTravelAgreement;
}

export interface SwedishApartmentAgreement extends AgreementCore {
  id: string;
  activeFrom?: LocalDate;
  activeTo?: LocalDate;
  premium: MonetaryAmountV2;
  certificateUrl?: string;
  status: AgreementStatus;
  address: Address;
  numberCoInsured: number;
  squareMeters: number;
  type: SwedishApartmentLineOfBusiness;
}

export interface AgreementCore {
  id: string;
  status: AgreementStatus;
  activeFrom?: LocalDate;
  activeTo?: LocalDate;
  premium: MonetaryAmountV2;
  certificateUrl?: string;
}

/** Use this to resolve interface type AgreementCore */
export type PossibleAgreementCoreTypeNames =
'SwedishApartmentAgreement' |
'SwedishHouseAgreement' |
'NorwegianHomeContentAgreement' |
'NorwegianTravelAgreement' |
'DanishHomeContentAgreement' |
'DanishAccidentAgreement' |
'DanishTravelAgreement';

export interface AgreementCoreNameMap {
  AgreementCore: AgreementCore;
  SwedishApartmentAgreement: SwedishApartmentAgreement;
  SwedishHouseAgreement: SwedishHouseAgreement;
  NorwegianHomeContentAgreement: NorwegianHomeContentAgreement;
  NorwegianTravelAgreement: NorwegianTravelAgreement;
  DanishHomeContentAgreement: DanishHomeContentAgreement;
  DanishAccidentAgreement: DanishAccidentAgreement;
  DanishTravelAgreement: DanishTravelAgreement;
}

export enum AgreementStatus {
  
  /**
   * An agreement with no activation date, waiting to be activated
   */
  PENDING = 'PENDING',
  
  /**
   * An agreement that will be active on a future date
   */
  ACTIVE_IN_FUTURE = 'ACTIVE_IN_FUTURE',
  
  /**
   * An agreement that is active today
   */
  ACTIVE = 'ACTIVE',
  
  /**
   * An agreement that either was never active that is now terminated or was active in the past of a now terminated contract
   */
  TERMINATED = 'TERMINATED'
}

export interface Address {
  street: string;
  postalCode: string;
  city?: string;
  apartment?: string;
  floor?: string;
}

export enum SwedishApartmentLineOfBusiness {
  RENT = 'RENT',
  BRF = 'BRF',
  STUDENT_RENT = 'STUDENT_RENT',
  STUDENT_BRF = 'STUDENT_BRF'
}

export interface SwedishHouseAgreement extends AgreementCore {
  id: string;
  activeFrom?: LocalDate;
  activeTo?: LocalDate;
  premium: MonetaryAmountV2;
  certificateUrl?: string;
  status: AgreementStatus;
  address: Address;
  numberCoInsured: number;
  squareMeters: number;
  ancillaryArea: number;
  yearOfConstruction: number;
  numberOfBathrooms: number;
  extraBuildings: Array<ExtraBuilding | null>;
  isSubleted: boolean;
}

export interface NorwegianHomeContentAgreement extends AgreementCore {
  id: string;
  activeFrom?: LocalDate;
  activeTo?: LocalDate;
  premium: MonetaryAmountV2;
  certificateUrl?: string;
  status: AgreementStatus;
  address: Address;
  numberCoInsured: number;
  squareMeters: number;
  type?: NorwegianHomeContentLineOfBusiness;
}

export enum NorwegianHomeContentLineOfBusiness {
  RENT = 'RENT',
  OWN = 'OWN',
  YOUTH_RENT = 'YOUTH_RENT',
  YOUTH_OWN = 'YOUTH_OWN'
}

export interface NorwegianTravelAgreement extends AgreementCore {
  id: string;
  activeFrom?: LocalDate;
  activeTo?: LocalDate;
  premium: MonetaryAmountV2;
  certificateUrl?: string;
  status: AgreementStatus;
  numberCoInsured: number;
  type?: NorwegianTravelLineOfBusiness;
}

export enum NorwegianTravelLineOfBusiness {
  REGULAR = 'REGULAR',
  YOUTH = 'YOUTH'
}

export interface DanishHomeContentAgreement extends AgreementCore {
  id: string;
  activeFrom?: LocalDate;
  activeTo?: LocalDate;
  premium: MonetaryAmountV2;
  certificateUrl?: string;
  status: AgreementStatus;
  address: Address;
  numberCoInsured: number;
  squareMeters: number;
  type?: DanishHomeContentLineOfBusiness;
}

export enum DanishHomeContentLineOfBusiness {
  RENT = 'RENT',
  OWN = 'OWN',
  STUDENT_RENT = 'STUDENT_RENT',
  STUDENT_OWN = 'STUDENT_OWN'
}

export interface DanishAccidentAgreement extends AgreementCore {
  id: string;
  activeFrom?: LocalDate;
  activeTo?: LocalDate;
  premium: MonetaryAmountV2;
  certificateUrl?: string;
  status: AgreementStatus;
  address: Address;
  numberCoInsured: number;
  type?: DanishAccidentLineOfBusiness;
}

export enum DanishAccidentLineOfBusiness {
  REGULAR = 'REGULAR',
  STUDENT = 'STUDENT'
}

export interface DanishTravelAgreement extends AgreementCore {
  id: string;
  activeFrom?: LocalDate;
  activeTo?: LocalDate;
  premium: MonetaryAmountV2;
  certificateUrl?: string;
  status: AgreementStatus;
  address: Address;
  numberCoInsured: number;
  type?: DanishTravelLineOfBusiness;
}

export enum DanishTravelLineOfBusiness {
  REGULAR = 'REGULAR',
  STUDENT = 'STUDENT'
}

/**
 * The contract has an inception date in the future and a termination date in the future
 */
export interface ActiveInFutureAndTerminatedInFutureStatus {
  futureInception?: LocalDate;
  futureTermination?: LocalDate;
}

/**
 * The contract is active today but will be terminated in the future, i.e. is active today but will not be in the future
 */
export interface TerminatedInFutureStatus {
  futureTermination?: LocalDate;
  upcomingAgreementChange?: UpcomingAgreementChange;
}

/**
 * The contract has been active and has its termination date set to today, i.e. today is the last day the contract is active
 */
export interface TerminatedTodayStatus {
  today?: LocalDate;
  upcomingAgreementChange?: UpcomingAgreementChange;
}

/**
 * The contract has been terminated in the past, terminated on the same date as its start date or has never been activated and has a termination date set
 */
export interface TerminatedStatus {
  termination?: LocalDate;
}

export interface UpcomingRenewal {
  renewalDate: LocalDate;
  draftCertificateUrl: string;
}

export type Instant = any;

export interface ContractBundleAngelStories {
  addressChange?: string;
}

export interface SelfChangeEligibility {
  
  /**
   * 
   * @deprecated Use addressChangeEmbarkStoryId instead
   */
  blockers: Array<SelfChangeBlocker>;
  
  /**
   * 
   * @deprecated Use addressChangeEmbarkStoryId instead
   */
  embarkStoryId?: string;
  
  /**
   * The ID of an embark story that contains an address change flow, if eligible.
   */
  addressChangeEmbarkStoryId?: string;
}

/**
 * These types represent reasons for why the self-change flow cannot be run.
 */
export enum SelfChangeBlocker {
  
  /**
   * Member has no contracts - changing them makes no sense.
   */
  NO_CONTRACTS = 'NO_CONTRACTS',
  
  /**
   * Member has at least one contract that is not supported at this time
   */
  UNSUPPORTED_CONTRACT = 'UNSUPPORTED_CONTRACT',
  
  /**
   * Contract is still pending, it can't be changed until it is active.
   */
  STILL_PENDING = 'STILL_PENDING',
  
  /**
   * Contract has a termination date set.
   */
  HAS_TERMINATION = 'HAS_TERMINATION',
  
  /**
   * Contract is already undergoing future changes.
   */
  HAS_FUTURE_CHANGES = 'HAS_FUTURE_CHANGES',
  
  /**
   * Contract is not currently active.
   */
  NOT_ACTIVE_TODAY = 'NOT_ACTIVE_TODAY',
  
  /**
   * Member has multiple contracts with mismatching number of co-insured.
   */
  COINSURED_MISMATCH = 'COINSURED_MISMATCH',
  
  /**
   * Member has multiple contracts with mismatching 'youth' status.
   */
  YOUTH_MISMATCH = 'YOUTH_MISMATCH',
  
  /**
   * Member has too many contracts.
   */
  TOO_MANY_CONTRACTS = 'TOO_MANY_CONTRACTS'
}

export interface Mutation {
  logout: boolean;
  createSession: string;
  createSessionV2?: SessionInformation;
  
  /**
   * 
   * @deprecated Use Quotes instead
   */
  createOffer?: boolean;
  
  /**
   * 
   * @deprecated Use `signOfferV2`.
   */
  signOffer?: boolean;
  
  /**
   * 
   * @deprecated Use Quotes instead
   */
  signOfferV2: BankIdSignResponse;
  uploadFile: File;
  uploadFiles?: Array<File>;
  selectCashbackOption: Cashback;
  
  /**
   * 
   * @deprecated Use Quotes instead
   */
  offerClosed: boolean;
  startDirectDebitRegistration: URL;
  sendChatTextResponse: boolean;
  sendChatSingleSelectResponse: boolean;
  sendChatFileResponse: boolean;
  sendChatAudioResponse: boolean;
  resetConversation: boolean;
  editLastResponse: boolean;
  updateEmail: Member;
  updatePhoneNumber: Member;
  registerPushToken?: boolean;
  triggerFreeTextChat?: boolean;
  triggerClaimChat?: boolean;
  triggerCallMeChat?: boolean;
  emailSign?: boolean;
  markMessageAsRead: Message;
  log?: boolean;
  
  /**
   * 
   * @deprecated Use `swedishBankIdAuth`.
   */
  bankIdAuth: BankIdAuthResponse;
  swedishBankIdAuth: BankIdAuthResponse;
  norwegianBankIdAuth: NorwegianBankIdAuthResponse;
  danishBankIdAuth: DanishBankIdAuthResponse;
  registerBranchCampaign?: boolean;
  updateLanguage: boolean;
  updatePickedLocale: Member;
  
  /**
   * Create all the quotes needed in relation to a change of address, based on the current state of the member's insurance.
   */
  createAddressChangeQuotes: AddressChangeQuoteResult;
}

export interface CampaignInput {
  source?: string;
  medium?: string;
  term?: string;
  content?: string;
  name?: string;
}

export type UUID = any;

export interface SessionInformation {
  token: string;
  memberId: string;
}

export interface OfferInput {
  firstName: string;
  lastName: string;
  age: number;
  address: string;
  postalNumber: string;
  city?: string;
  insuranceType: InsuranceType;
  squareMeters: number;
  personsInHousehold: number;
  previousInsurer?: string;
}

export interface SignInput {
  personalNumber: string;
  email: string;
}

export interface BankIdSignResponse {
  autoStartToken?: string;
  redirectUrl?: string;
}

export type Upload = any;

export interface ChatResponseTextInput {
  globalId: string;
  body: ChatResponseBodyTextInput;
}

export interface ChatResponseBodyTextInput {
  text: string;
}

export interface ChatResponseSingleSelectInput {
  globalId: string;
  body: ChatResponseBodySingleSelectInput;
}

export interface ChatResponseBodySingleSelectInput {
  selectedValue: string;
}

export interface ChatResponseFileInput {
  globalId: string;
  body: ChatResponseBodyFileInput;
}

export interface ChatResponseBodyFileInput {
  key: string;
  mimeType: string;
}

export interface ChatResponseAudioInput {
  globalId: string;
  file: Upload;
}

export interface TriggerClaimChatInput {
  claimTypeId?: string;
}

export interface LoggingInput {
  timestamp: TimeStamp;
  source: LoggingSource;
  payload: JSONObject;
  severity: LoggingSeverity;
}

export type TimeStamp = any;

export enum LoggingSource {
  IOS = 'IOS',
  ANDROID = 'ANDROID'
}

export type JSONObject = any;

export enum LoggingSeverity {
  DEFAULT = 'DEFAULT',
  DEBUG = 'DEBUG',
  INFO = 'INFO',
  NOTICE = 'NOTICE',
  WARNING = 'WARNING',
  ERROR = 'ERROR',
  CRITICAL = 'CRITICAL',
  ALERT = 'ALERT',
  EMERGENCY = 'EMERGENCY'
}

export interface BankIdAuthResponse {
  autoStartToken: string;
}

export interface NorwegianBankIdAuthResponse {
  redirectUrl: string;
}

export interface DanishBankIdAuthResponse {
  redirectUrl: string;
}

/**
 * A quote-agnostic payload type for changing the addess.
 */
export interface AddressChangeInput {
  
  /**
   * The target bundle that should have its address changed.
   */
  contractBundleId: string;
  
  /**
   * Is this an apartment or a house.
   */
  type: AddressHomeType;
  
  /**
   * Street value, including number.
   */
  street: string;
  
  /**
   * Zip code.
   */
  zip: string;
  
  /**
   * The total living space, in square meters.
   */
  livingSpace: number;
  
  /**
   * Number co-insured, the number of people on the contract except for the policy holder.
   */
  numberCoInsured: number;
  
  /**
   * Is this a rental or do does the policy holder own it?
   */
  ownership: AddressOwnership;
  
  /**
   * The date the member gets access to this new home.
   */
  startDate: LocalDate;
  
  /**
   * Set to true if the insurance is concerning a youth. Concept used in Norway
   */
  isYouth?: boolean;
  
  /**
   * Set to true if the insurance is concerning a student. Concept used in Sweden, Denmark
   */
  isStudent?: boolean;
  
  /**
   * Ancillary area. Required if type == HOUSE.
   */
  ancillaryArea?: number;
  
  /**
   * Year of construction. Required if type == HOUSE.
   */
  yearOfConstruction?: number;
  
  /**
   * Number of bathrooms. Required if type == HOUSE.
   */
  numberOfBathrooms?: number;
  
  /**
   * Number of floors. Required if type == HOUSE.
   */
  numberOfFloors?: number;
  
  /**
   * Is this property subleted? Required if type == HOUSE.
   */
  isSubleted?: boolean;
  
  /**
   * A list of extra buildings outside of the main property. Required if type == HOUSE.
   */
  extraBuildings?: Array<AddressHouseExtraBuilding>;
}

export enum AddressHomeType {
  APARTMENT = 'APARTMENT',
  HOUSE = 'HOUSE'
}

export enum AddressOwnership {
  OWN = 'OWN',
  RENT = 'RENT'
}

export interface AddressHouseExtraBuilding {
  type: string;
  area: number;
  hasWaterConnected: boolean;
}

export type AddressChangeQuoteResult =
AddressChangeQuoteSuccess |
AddressChangeQuoteFailure;

/** Use this to resolve union type AddressChangeQuoteResult */
export type PossibleAddressChangeQuoteResultTypeNames =
'AddressChangeQuoteSuccess' |
'AddressChangeQuoteFailure';

export interface AddressChangeQuoteResultNameMap {
  AddressChangeQuoteResult: AddressChangeQuoteResult;
  AddressChangeQuoteSuccess: AddressChangeQuoteSuccess;
  AddressChangeQuoteFailure: AddressChangeQuoteFailure;
}

export interface AddressChangeQuoteSuccess {
  quoteIds: Array<string>;
}

export interface AddressChangeQuoteFailure {
  breachedUnderwritingGuidelines: Array<string>;
}

export interface Subscription {
  
  /**
   * 
   * @deprecated Use Quotes instead
   */
  offer?: OfferEvent;
  
  /**
   * 
   * @deprecated Use Quotes instead
   */
  signStatus?: SignEvent;
  message: Message;
  currentChatResponse?: ChatResponse;
  chatState: ChatState;
  authStatus?: AuthEvent;
}

export interface OfferEvent {
  status: OfferStatus;
  insurance?: Insurance;
}

export enum OfferStatus {
  SUCCESS = 'SUCCESS',
  FAIL = 'FAIL'
}

export interface SignEvent {
  status?: SignStatus;
}

export interface AuthEvent {
  status?: AuthState;
}

export enum AuthState {
  INITIATED = 'INITIATED',
  IN_PROGRESS = 'IN_PROGRESS',
  FAILED = 'FAILED',
  SUCCESS = 'SUCCESS'
}

export interface ChatResponseBodyAudioInput {
  url: string;
}

/*********************************
 *                               *
 *         TYPE RESOLVERS        *
 *                               *
 *********************************/
/**
 * This interface define the shape of your resolver
 * Note that this type is designed to be compatible with graphql-tools resolvers
 * However, you can still use other generated interfaces to make your resolver type-safed
 */
export interface Resolver {
  Query?: QueryTypeResolver;
  Insurance?: InsuranceTypeResolver;
  InsuranceCost?: InsuranceCostTypeResolver;
  MonetaryAmountV2?: MonetaryAmountV2TypeResolver;
  LocalDate?: GraphQLScalarType;
  PerilCategory?: PerilCategoryTypeResolver;
  Peril?: PerilTypeResolver;
  ArrangedPerilCategories?: ArrangedPerilCategoriesTypeResolver;
  Renewal?: RenewalTypeResolver;
  PreviousInsurer?: PreviousInsurerTypeResolver;
  ExtraBuilding?: {
    __resolveType: ExtraBuildingTypeResolver
  };
  
  ExtraBuildingValue?: ExtraBuildingValueTypeResolver;
  ExtraBuildingCore?: {
    __resolveType: ExtraBuildingCoreTypeResolver
  };
  
  Cashback?: CashbackTypeResolver;
  SignStatus?: SignStatusTypeResolver;
  CollectStatus?: CollectStatusTypeResolver;
  Member?: MemberTypeResolver;
  Gif?: GifTypeResolver;
  File?: FileTypeResolver;
  Message?: MessageTypeResolver;
  MessageBody?: {
    __resolveType: MessageBodyTypeResolver
  };
  
  MessageBodySingleSelect?: MessageBodySingleSelectTypeResolver;
  MessageBodyCore?: {
    __resolveType: MessageBodyCoreTypeResolver
  };
  
  MessageBodyChoices?: {
    __resolveType: MessageBodyChoicesTypeResolver
  };
  
  MessageBodyChoicesUndefined?: MessageBodyChoicesUndefinedTypeResolver;
  MessageBodyChoicesCore?: {
    __resolveType: MessageBodyChoicesCoreTypeResolver
  };
  
  MessageBodyChoicesSelection?: MessageBodyChoicesSelectionTypeResolver;
  MessageBodyChoicesLink?: MessageBodyChoicesLinkTypeResolver;
  MessageBodyMultipleSelect?: MessageBodyMultipleSelectTypeResolver;
  MessageBodyText?: MessageBodyTextTypeResolver;
  MessageBodyNumber?: MessageBodyNumberTypeResolver;
  MessageBodyAudio?: MessageBodyAudioTypeResolver;
  MessageBodyBankIdCollect?: MessageBodyBankIdCollectTypeResolver;
  MessageBodyFile?: MessageBodyFileTypeResolver;
  MessageBodyParagraph?: MessageBodyParagraphTypeResolver;
  MessageBodyUndefined?: MessageBodyUndefinedTypeResolver;
  MessageHeader?: MessageHeaderTypeResolver;
  ChatResponse?: ChatResponseTypeResolver;
  ChatState?: ChatStateTypeResolver;
  Avatar?: AvatarTypeResolver;
  Object?: GraphQLScalarType;
  ChatAction?: ChatActionTypeResolver;
  URL?: GraphQLScalarType;
  Geo?: GeoTypeResolver;
  AngelStory?: AngelStoryTypeResolver;
  ContractBundle?: ContractBundleTypeResolver;
  Contract?: ContractTypeResolver;
  ContractStatus?: {
    __resolveType: ContractStatusTypeResolver
  };
  
  PendingStatus?: PendingStatusTypeResolver;
  ActiveInFutureStatus?: ActiveInFutureStatusTypeResolver;
  ActiveStatus?: ActiveStatusTypeResolver;
  UpcomingAgreementChange?: UpcomingAgreementChangeTypeResolver;
  Agreement?: {
    __resolveType: AgreementTypeResolver
  };
  
  SwedishApartmentAgreement?: SwedishApartmentAgreementTypeResolver;
  AgreementCore?: {
    __resolveType: AgreementCoreTypeResolver
  };
  
  Address?: AddressTypeResolver;
  SwedishHouseAgreement?: SwedishHouseAgreementTypeResolver;
  NorwegianHomeContentAgreement?: NorwegianHomeContentAgreementTypeResolver;
  NorwegianTravelAgreement?: NorwegianTravelAgreementTypeResolver;
  DanishHomeContentAgreement?: DanishHomeContentAgreementTypeResolver;
  DanishAccidentAgreement?: DanishAccidentAgreementTypeResolver;
  DanishTravelAgreement?: DanishTravelAgreementTypeResolver;
  ActiveInFutureAndTerminatedInFutureStatus?: ActiveInFutureAndTerminatedInFutureStatusTypeResolver;
  TerminatedInFutureStatus?: TerminatedInFutureStatusTypeResolver;
  TerminatedTodayStatus?: TerminatedTodayStatusTypeResolver;
  TerminatedStatus?: TerminatedStatusTypeResolver;
  UpcomingRenewal?: UpcomingRenewalTypeResolver;
  Instant?: GraphQLScalarType;
  ContractBundleAngelStories?: ContractBundleAngelStoriesTypeResolver;
  SelfChangeEligibility?: SelfChangeEligibilityTypeResolver;
  Mutation?: MutationTypeResolver;
  UUID?: GraphQLScalarType;
  SessionInformation?: SessionInformationTypeResolver;
  BankIdSignResponse?: BankIdSignResponseTypeResolver;
  Upload?: GraphQLScalarType;
  TimeStamp?: GraphQLScalarType;
  JSONObject?: GraphQLScalarType;
  BankIdAuthResponse?: BankIdAuthResponseTypeResolver;
  NorwegianBankIdAuthResponse?: NorwegianBankIdAuthResponseTypeResolver;
  DanishBankIdAuthResponse?: DanishBankIdAuthResponseTypeResolver;
  AddressChangeQuoteResult?: {
    __resolveType: AddressChangeQuoteResultTypeResolver
  };
  
  AddressChangeQuoteSuccess?: AddressChangeQuoteSuccessTypeResolver;
  AddressChangeQuoteFailure?: AddressChangeQuoteFailureTypeResolver;
  Subscription?: SubscriptionTypeResolver;
  OfferEvent?: OfferEventTypeResolver;
  SignEvent?: SignEventTypeResolver;
  AuthEvent?: AuthEventTypeResolver;
}
export interface QueryTypeResolver<TParent = undefined> {
  insurance?: QueryToInsuranceResolver<TParent>;
  cashback?: QueryToCashbackResolver<TParent>;
  cashbackOptions?: QueryToCashbackOptionsResolver<TParent>;
  signStatus?: QueryToSignStatusResolver<TParent>;
  member?: QueryToMemberResolver<TParent>;
  gifs?: QueryToGifsResolver<TParent>;
  file?: QueryToFileResolver<TParent>;
  messages?: QueryToMessagesResolver<TParent>;
  currentChatResponse?: QueryToCurrentChatResponseResolver<TParent>;
  chatState?: QueryToChatStateResolver<TParent>;
  avatars?: QueryToAvatarsResolver<TParent>;
  chatActions?: QueryToChatActionsResolver<TParent>;
  geo?: QueryToGeoResolver<TParent>;
  angelStory?: QueryToAngelStoryResolver<TParent>;
  activeContractBundles?: QueryToActiveContractBundlesResolver<TParent>;
  contracts?: QueryToContractsResolver<TParent>;
  hasContract?: QueryToHasContractResolver<TParent>;
  selfChangeEligibility?: QueryToSelfChangeEligibilityResolver<TParent>;
  availableLocales?: QueryToAvailableLocalesResolver<TParent>;
}

export interface QueryToInsuranceResolver<TParent = undefined, TResult = Insurance> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface QueryToCashbackArgs {
  locale?: Locale;
}
export interface QueryToCashbackResolver<TParent = undefined, TResult = Cashback | null> {
  (parent: TParent, args: QueryToCashbackArgs, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface QueryToCashbackOptionsArgs {
  locale?: Locale;
}
export interface QueryToCashbackOptionsResolver<TParent = undefined, TResult = Array<Cashback | null>> {
  (parent: TParent, args: QueryToCashbackOptionsArgs, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface QueryToSignStatusResolver<TParent = undefined, TResult = SignStatus | null> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface QueryToMemberResolver<TParent = undefined, TResult = Member> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface QueryToGifsArgs {
  query: string;
}
export interface QueryToGifsResolver<TParent = undefined, TResult = Array<Gif | null>> {
  (parent: TParent, args: QueryToGifsArgs, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface QueryToFileArgs {
  key: string;
}
export interface QueryToFileResolver<TParent = undefined, TResult = File> {
  (parent: TParent, args: QueryToFileArgs, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface QueryToMessagesResolver<TParent = undefined, TResult = Array<Message | null>> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface QueryToCurrentChatResponseResolver<TParent = undefined, TResult = ChatResponse | null> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface QueryToChatStateResolver<TParent = undefined, TResult = ChatState> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface QueryToAvatarsResolver<TParent = undefined, TResult = Array<Avatar | null> | null> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface QueryToChatActionsResolver<TParent = undefined, TResult = Array<ChatAction | null> | null> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface QueryToGeoResolver<TParent = undefined, TResult = Geo> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface QueryToAngelStoryArgs {
  name: string;
  locale?: string;
}
export interface QueryToAngelStoryResolver<TParent = undefined, TResult = AngelStory | null> {
  (parent: TParent, args: QueryToAngelStoryArgs, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface QueryToActiveContractBundlesResolver<TParent = undefined, TResult = Array<ContractBundle>> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface QueryToContractsResolver<TParent = undefined, TResult = Array<Contract>> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface QueryToHasContractResolver<TParent = undefined, TResult = boolean> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface QueryToSelfChangeEligibilityResolver<TParent = undefined, TResult = SelfChangeEligibility> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface QueryToAvailableLocalesResolver<TParent = undefined, TResult = Array<Locale>> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface InsuranceTypeResolver<TParent = Insurance> {
  address?: InsuranceToAddressResolver<TParent>;
  postalNumber?: InsuranceToPostalNumberResolver<TParent>;
  cost?: InsuranceToCostResolver<TParent>;
  personsInHousehold?: InsuranceToPersonsInHouseholdResolver<TParent>;
  certificateUrl?: InsuranceToCertificateUrlResolver<TParent>;
  status?: InsuranceToStatusResolver<TParent>;
  type?: InsuranceToTypeResolver<TParent>;
  activeFrom?: InsuranceToActiveFromResolver<TParent>;
  insuredAtOtherCompany?: InsuranceToInsuredAtOtherCompanyResolver<TParent>;
  presaleInformationUrl?: InsuranceToPresaleInformationUrlResolver<TParent>;
  policyUrl?: InsuranceToPolicyUrlResolver<TParent>;
  currentInsurerName?: InsuranceToCurrentInsurerNameResolver<TParent>;
  livingSpace?: InsuranceToLivingSpaceResolver<TParent>;
  perilCategories?: InsuranceToPerilCategoriesResolver<TParent>;
  monthlyCost?: InsuranceToMonthlyCostResolver<TParent>;
  safetyIncreasers?: InsuranceToSafetyIncreasersResolver<TParent>;
  arrangedPerilCategories?: InsuranceToArrangedPerilCategoriesResolver<TParent>;
  renewal?: InsuranceToRenewalResolver<TParent>;
  previousInsurer?: InsuranceToPreviousInsurerResolver<TParent>;
  ancillaryArea?: InsuranceToAncillaryAreaResolver<TParent>;
  yearOfConstruction?: InsuranceToYearOfConstructionResolver<TParent>;
  numberOfBathrooms?: InsuranceToNumberOfBathroomsResolver<TParent>;
  extraBuildings?: InsuranceToExtraBuildingsResolver<TParent>;
  isSubleted?: InsuranceToIsSubletedResolver<TParent>;
}

export interface InsuranceToAddressResolver<TParent = Insurance, TResult = string | null> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface InsuranceToPostalNumberResolver<TParent = Insurance, TResult = string | null> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface InsuranceToCostResolver<TParent = Insurance, TResult = InsuranceCost | null> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface InsuranceToPersonsInHouseholdResolver<TParent = Insurance, TResult = number | null> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface InsuranceToCertificateUrlResolver<TParent = Insurance, TResult = string | null> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface InsuranceToStatusResolver<TParent = Insurance, TResult = InsuranceStatus> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface InsuranceToTypeResolver<TParent = Insurance, TResult = InsuranceType | null> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface InsuranceToActiveFromResolver<TParent = Insurance, TResult = LocalDate | null> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface InsuranceToInsuredAtOtherCompanyResolver<TParent = Insurance, TResult = boolean | null> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface InsuranceToPresaleInformationUrlResolver<TParent = Insurance, TResult = string | null> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface InsuranceToPolicyUrlResolver<TParent = Insurance, TResult = string | null> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface InsuranceToCurrentInsurerNameResolver<TParent = Insurance, TResult = string | null> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface InsuranceToLivingSpaceResolver<TParent = Insurance, TResult = number | null> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface InsuranceToPerilCategoriesResolver<TParent = Insurance, TResult = Array<PerilCategory | null> | null> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface InsuranceToMonthlyCostResolver<TParent = Insurance, TResult = number | null> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface InsuranceToSafetyIncreasersResolver<TParent = Insurance, TResult = Array<string> | null> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface InsuranceToArrangedPerilCategoriesResolver<TParent = Insurance, TResult = ArrangedPerilCategories> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface InsuranceToRenewalResolver<TParent = Insurance, TResult = Renewal | null> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface InsuranceToPreviousInsurerResolver<TParent = Insurance, TResult = PreviousInsurer | null> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface InsuranceToAncillaryAreaResolver<TParent = Insurance, TResult = number | null> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface InsuranceToYearOfConstructionResolver<TParent = Insurance, TResult = number | null> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface InsuranceToNumberOfBathroomsResolver<TParent = Insurance, TResult = number | null> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface InsuranceToExtraBuildingsResolver<TParent = Insurance, TResult = Array<ExtraBuilding> | null> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface InsuranceToIsSubletedResolver<TParent = Insurance, TResult = boolean | null> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface InsuranceCostTypeResolver<TParent = InsuranceCost> {
  monthlyGross?: InsuranceCostToMonthlyGrossResolver<TParent>;
  monthlyDiscount?: InsuranceCostToMonthlyDiscountResolver<TParent>;
  monthlyNet?: InsuranceCostToMonthlyNetResolver<TParent>;
  freeUntil?: InsuranceCostToFreeUntilResolver<TParent>;
}

export interface InsuranceCostToMonthlyGrossResolver<TParent = InsuranceCost, TResult = MonetaryAmountV2> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface InsuranceCostToMonthlyDiscountResolver<TParent = InsuranceCost, TResult = MonetaryAmountV2> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface InsuranceCostToMonthlyNetResolver<TParent = InsuranceCost, TResult = MonetaryAmountV2> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface InsuranceCostToFreeUntilResolver<TParent = InsuranceCost, TResult = LocalDate | null> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface MonetaryAmountV2TypeResolver<TParent = MonetaryAmountV2> {
  amount?: MonetaryAmountV2ToAmountResolver<TParent>;
  currency?: MonetaryAmountV2ToCurrencyResolver<TParent>;
}

export interface MonetaryAmountV2ToAmountResolver<TParent = MonetaryAmountV2, TResult = string> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface MonetaryAmountV2ToCurrencyResolver<TParent = MonetaryAmountV2, TResult = string> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface PerilCategoryTypeResolver<TParent = PerilCategory> {
  title?: PerilCategoryToTitleResolver<TParent>;
  description?: PerilCategoryToDescriptionResolver<TParent>;
  iconUrl?: PerilCategoryToIconUrlResolver<TParent>;
  perils?: PerilCategoryToPerilsResolver<TParent>;
}

export interface PerilCategoryToTitleResolver<TParent = PerilCategory, TResult = string | null> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface PerilCategoryToDescriptionResolver<TParent = PerilCategory, TResult = string | null> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface PerilCategoryToIconUrlResolver<TParent = PerilCategory, TResult = string | null> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface PerilCategoryToPerilsResolver<TParent = PerilCategory, TResult = Array<Peril | null> | null> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface PerilTypeResolver<TParent = Peril> {
  id?: PerilToIdResolver<TParent>;
  title?: PerilToTitleResolver<TParent>;
  imageUrl?: PerilToImageUrlResolver<TParent>;
  description?: PerilToDescriptionResolver<TParent>;
}

export interface PerilToIdResolver<TParent = Peril, TResult = string | null> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface PerilToTitleResolver<TParent = Peril, TResult = string | null> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface PerilToImageUrlResolver<TParent = Peril, TResult = string | null> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface PerilToDescriptionResolver<TParent = Peril, TResult = string | null> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface ArrangedPerilCategoriesTypeResolver<TParent = ArrangedPerilCategories> {
  me?: ArrangedPerilCategoriesToMeResolver<TParent>;
  home?: ArrangedPerilCategoriesToHomeResolver<TParent>;
  stuff?: ArrangedPerilCategoriesToStuffResolver<TParent>;
}

export interface ArrangedPerilCategoriesToMeResolver<TParent = ArrangedPerilCategories, TResult = PerilCategory | null> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface ArrangedPerilCategoriesToHomeResolver<TParent = ArrangedPerilCategories, TResult = PerilCategory | null> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface ArrangedPerilCategoriesToStuffResolver<TParent = ArrangedPerilCategories, TResult = PerilCategory | null> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface RenewalTypeResolver<TParent = Renewal> {
  certificateUrl?: RenewalToCertificateUrlResolver<TParent>;
  date?: RenewalToDateResolver<TParent>;
}

export interface RenewalToCertificateUrlResolver<TParent = Renewal, TResult = string> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface RenewalToDateResolver<TParent = Renewal, TResult = LocalDate> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface PreviousInsurerTypeResolver<TParent = PreviousInsurer> {
  displayName?: PreviousInsurerToDisplayNameResolver<TParent>;
  id?: PreviousInsurerToIdResolver<TParent>;
  switchable?: PreviousInsurerToSwitchableResolver<TParent>;
}

export interface PreviousInsurerToDisplayNameResolver<TParent = PreviousInsurer, TResult = string | null> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface PreviousInsurerToIdResolver<TParent = PreviousInsurer, TResult = string> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface PreviousInsurerToSwitchableResolver<TParent = PreviousInsurer, TResult = boolean> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface ExtraBuildingTypeResolver<TParent = ExtraBuilding> {
  (parent: TParent, context: Context, info: GraphQLResolveInfo): 'ExtraBuildingValue' | Promise<'ExtraBuildingValue'>;
}
export interface ExtraBuildingValueTypeResolver<TParent = ExtraBuildingValue> {
  type?: ExtraBuildingValueToTypeResolver<TParent>;
  area?: ExtraBuildingValueToAreaResolver<TParent>;
  displayName?: ExtraBuildingValueToDisplayNameResolver<TParent>;
  hasWaterConnected?: ExtraBuildingValueToHasWaterConnectedResolver<TParent>;
}

export interface ExtraBuildingValueToTypeResolver<TParent = ExtraBuildingValue, TResult = ExtraBuildingType> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface ExtraBuildingValueToAreaResolver<TParent = ExtraBuildingValue, TResult = number> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface ExtraBuildingValueToDisplayNameResolver<TParent = ExtraBuildingValue, TResult = string> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface ExtraBuildingValueToHasWaterConnectedResolver<TParent = ExtraBuildingValue, TResult = boolean> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface ExtraBuildingCoreTypeResolver<TParent = ExtraBuildingCore> {
  (parent: TParent, context: Context, info: GraphQLResolveInfo): 'ExtraBuildingValue' | Promise<'ExtraBuildingValue'>;
}
export interface CashbackTypeResolver<TParent = Cashback> {
  id?: CashbackToIdResolver<TParent>;
  name?: CashbackToNameResolver<TParent>;
  imageUrl?: CashbackToImageUrlResolver<TParent>;
  selectedUrl?: CashbackToSelectedUrlResolver<TParent>;
  description?: CashbackToDescriptionResolver<TParent>;
  title?: CashbackToTitleResolver<TParent>;
  paragraph?: CashbackToParagraphResolver<TParent>;
}

export interface CashbackToIdResolver<TParent = Cashback, TResult = string | null> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface CashbackToNameResolver<TParent = Cashback, TResult = string | null> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface CashbackToImageUrlResolver<TParent = Cashback, TResult = string | null> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface CashbackToSelectedUrlResolver<TParent = Cashback, TResult = string | null> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface CashbackToDescriptionResolver<TParent = Cashback, TResult = string | null> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface CashbackToTitleResolver<TParent = Cashback, TResult = string | null> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface CashbackToParagraphResolver<TParent = Cashback, TResult = string | null> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface SignStatusTypeResolver<TParent = SignStatus> {
  collectStatus?: SignStatusToCollectStatusResolver<TParent>;
  signState?: SignStatusToSignStateResolver<TParent>;
}

export interface SignStatusToCollectStatusResolver<TParent = SignStatus, TResult = CollectStatus | null> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface SignStatusToSignStateResolver<TParent = SignStatus, TResult = SignState | null> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface CollectStatusTypeResolver<TParent = CollectStatus> {
  status?: CollectStatusToStatusResolver<TParent>;
  code?: CollectStatusToCodeResolver<TParent>;
}

export interface CollectStatusToStatusResolver<TParent = CollectStatus, TResult = BankIdStatus | null> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface CollectStatusToCodeResolver<TParent = CollectStatus, TResult = string | null> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface MemberTypeResolver<TParent = Member> {
  id?: MemberToIdResolver<TParent>;
  firstName?: MemberToFirstNameResolver<TParent>;
  lastName?: MemberToLastNameResolver<TParent>;
  email?: MemberToEmailResolver<TParent>;
  phoneNumber?: MemberToPhoneNumberResolver<TParent>;
  acceptLanguage?: MemberToAcceptLanguageResolver<TParent>;
  features?: MemberToFeaturesResolver<TParent>;
}

export interface MemberToIdResolver<TParent = Member, TResult = string | null> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface MemberToFirstNameResolver<TParent = Member, TResult = string | null> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface MemberToLastNameResolver<TParent = Member, TResult = string | null> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface MemberToEmailResolver<TParent = Member, TResult = string | null> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface MemberToPhoneNumberResolver<TParent = Member, TResult = string | null> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface MemberToAcceptLanguageResolver<TParent = Member, TResult = string | null> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface MemberToFeaturesResolver<TParent = Member, TResult = Array<Feature>> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface GifTypeResolver<TParent = Gif> {
  url?: GifToUrlResolver<TParent>;
}

export interface GifToUrlResolver<TParent = Gif, TResult = string | null> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface FileTypeResolver<TParent = File> {
  signedUrl?: FileToSignedUrlResolver<TParent>;
  key?: FileToKeyResolver<TParent>;
  bucket?: FileToBucketResolver<TParent>;
}

export interface FileToSignedUrlResolver<TParent = File, TResult = string> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface FileToKeyResolver<TParent = File, TResult = string> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface FileToBucketResolver<TParent = File, TResult = string> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface MessageTypeResolver<TParent = Message> {
  globalId?: MessageToGlobalIdResolver<TParent>;
  id?: MessageToIdResolver<TParent>;
  body?: MessageToBodyResolver<TParent>;
  header?: MessageToHeaderResolver<TParent>;
}

export interface MessageToGlobalIdResolver<TParent = Message, TResult = string> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface MessageToIdResolver<TParent = Message, TResult = string> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface MessageToBodyResolver<TParent = Message, TResult = MessageBody> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface MessageToHeaderResolver<TParent = Message, TResult = MessageHeader> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface MessageBodyTypeResolver<TParent = MessageBody> {
  (parent: TParent, context: Context, info: GraphQLResolveInfo): 'MessageBodySingleSelect' | 'MessageBodyMultipleSelect' | 'MessageBodyText' | 'MessageBodyNumber' | 'MessageBodyAudio' | 'MessageBodyBankIdCollect' | 'MessageBodyFile' | 'MessageBodyParagraph' | 'MessageBodyUndefined' | Promise<'MessageBodySingleSelect' | 'MessageBodyMultipleSelect' | 'MessageBodyText' | 'MessageBodyNumber' | 'MessageBodyAudio' | 'MessageBodyBankIdCollect' | 'MessageBodyFile' | 'MessageBodyParagraph' | 'MessageBodyUndefined'>;
}
export interface MessageBodySingleSelectTypeResolver<TParent = MessageBodySingleSelect> {
  type?: MessageBodySingleSelectToTypeResolver<TParent>;
  id?: MessageBodySingleSelectToIdResolver<TParent>;
  text?: MessageBodySingleSelectToTextResolver<TParent>;
  choices?: MessageBodySingleSelectToChoicesResolver<TParent>;
}

export interface MessageBodySingleSelectToTypeResolver<TParent = MessageBodySingleSelect, TResult = string> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface MessageBodySingleSelectToIdResolver<TParent = MessageBodySingleSelect, TResult = string> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface MessageBodySingleSelectToTextResolver<TParent = MessageBodySingleSelect, TResult = string> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface MessageBodySingleSelectToChoicesResolver<TParent = MessageBodySingleSelect, TResult = Array<MessageBodyChoices | null> | null> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface MessageBodyCoreTypeResolver<TParent = MessageBodyCore> {
  (parent: TParent, context: Context, info: GraphQLResolveInfo): 'MessageBodySingleSelect' | 'MessageBodyMultipleSelect' | 'MessageBodyText' | 'MessageBodyNumber' | 'MessageBodyAudio' | 'MessageBodyBankIdCollect' | 'MessageBodyFile' | 'MessageBodyParagraph' | 'MessageBodyUndefined' | Promise<'MessageBodySingleSelect' | 'MessageBodyMultipleSelect' | 'MessageBodyText' | 'MessageBodyNumber' | 'MessageBodyAudio' | 'MessageBodyBankIdCollect' | 'MessageBodyFile' | 'MessageBodyParagraph' | 'MessageBodyUndefined'>;
}
export interface MessageBodyChoicesTypeResolver<TParent = MessageBodyChoices> {
  (parent: TParent, context: Context, info: GraphQLResolveInfo): 'MessageBodyChoicesUndefined' | 'MessageBodyChoicesSelection' | 'MessageBodyChoicesLink' | Promise<'MessageBodyChoicesUndefined' | 'MessageBodyChoicesSelection' | 'MessageBodyChoicesLink'>;
}
export interface MessageBodyChoicesUndefinedTypeResolver<TParent = MessageBodyChoicesUndefined> {
  type?: MessageBodyChoicesUndefinedToTypeResolver<TParent>;
  value?: MessageBodyChoicesUndefinedToValueResolver<TParent>;
  text?: MessageBodyChoicesUndefinedToTextResolver<TParent>;
  selected?: MessageBodyChoicesUndefinedToSelectedResolver<TParent>;
}

export interface MessageBodyChoicesUndefinedToTypeResolver<TParent = MessageBodyChoicesUndefined, TResult = string> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface MessageBodyChoicesUndefinedToValueResolver<TParent = MessageBodyChoicesUndefined, TResult = string> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface MessageBodyChoicesUndefinedToTextResolver<TParent = MessageBodyChoicesUndefined, TResult = string> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface MessageBodyChoicesUndefinedToSelectedResolver<TParent = MessageBodyChoicesUndefined, TResult = boolean> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface MessageBodyChoicesCoreTypeResolver<TParent = MessageBodyChoicesCore> {
  (parent: TParent, context: Context, info: GraphQLResolveInfo): 'MessageBodyChoicesUndefined' | 'MessageBodyChoicesSelection' | 'MessageBodyChoicesLink' | Promise<'MessageBodyChoicesUndefined' | 'MessageBodyChoicesSelection' | 'MessageBodyChoicesLink'>;
}
export interface MessageBodyChoicesSelectionTypeResolver<TParent = MessageBodyChoicesSelection> {
  type?: MessageBodyChoicesSelectionToTypeResolver<TParent>;
  value?: MessageBodyChoicesSelectionToValueResolver<TParent>;
  text?: MessageBodyChoicesSelectionToTextResolver<TParent>;
  selected?: MessageBodyChoicesSelectionToSelectedResolver<TParent>;
  clearable?: MessageBodyChoicesSelectionToClearableResolver<TParent>;
}

export interface MessageBodyChoicesSelectionToTypeResolver<TParent = MessageBodyChoicesSelection, TResult = string> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface MessageBodyChoicesSelectionToValueResolver<TParent = MessageBodyChoicesSelection, TResult = string> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface MessageBodyChoicesSelectionToTextResolver<TParent = MessageBodyChoicesSelection, TResult = string> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface MessageBodyChoicesSelectionToSelectedResolver<TParent = MessageBodyChoicesSelection, TResult = boolean> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface MessageBodyChoicesSelectionToClearableResolver<TParent = MessageBodyChoicesSelection, TResult = boolean | null> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface MessageBodyChoicesLinkTypeResolver<TParent = MessageBodyChoicesLink> {
  type?: MessageBodyChoicesLinkToTypeResolver<TParent>;
  value?: MessageBodyChoicesLinkToValueResolver<TParent>;
  text?: MessageBodyChoicesLinkToTextResolver<TParent>;
  selected?: MessageBodyChoicesLinkToSelectedResolver<TParent>;
  view?: MessageBodyChoicesLinkToViewResolver<TParent>;
  appUrl?: MessageBodyChoicesLinkToAppUrlResolver<TParent>;
  webUrl?: MessageBodyChoicesLinkToWebUrlResolver<TParent>;
}

export interface MessageBodyChoicesLinkToTypeResolver<TParent = MessageBodyChoicesLink, TResult = string> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface MessageBodyChoicesLinkToValueResolver<TParent = MessageBodyChoicesLink, TResult = string> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface MessageBodyChoicesLinkToTextResolver<TParent = MessageBodyChoicesLink, TResult = string> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface MessageBodyChoicesLinkToSelectedResolver<TParent = MessageBodyChoicesLink, TResult = boolean> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface MessageBodyChoicesLinkToViewResolver<TParent = MessageBodyChoicesLink, TResult = MessageBodyChoicesLinkView | null> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface MessageBodyChoicesLinkToAppUrlResolver<TParent = MessageBodyChoicesLink, TResult = string | null> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface MessageBodyChoicesLinkToWebUrlResolver<TParent = MessageBodyChoicesLink, TResult = string | null> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface MessageBodyMultipleSelectTypeResolver<TParent = MessageBodyMultipleSelect> {
  type?: MessageBodyMultipleSelectToTypeResolver<TParent>;
  id?: MessageBodyMultipleSelectToIdResolver<TParent>;
  text?: MessageBodyMultipleSelectToTextResolver<TParent>;
  choices?: MessageBodyMultipleSelectToChoicesResolver<TParent>;
}

export interface MessageBodyMultipleSelectToTypeResolver<TParent = MessageBodyMultipleSelect, TResult = string> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface MessageBodyMultipleSelectToIdResolver<TParent = MessageBodyMultipleSelect, TResult = string> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface MessageBodyMultipleSelectToTextResolver<TParent = MessageBodyMultipleSelect, TResult = string> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface MessageBodyMultipleSelectToChoicesResolver<TParent = MessageBodyMultipleSelect, TResult = Array<MessageBodyChoices | null> | null> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface MessageBodyTextTypeResolver<TParent = MessageBodyText> {
  type?: MessageBodyTextToTypeResolver<TParent>;
  id?: MessageBodyTextToIdResolver<TParent>;
  text?: MessageBodyTextToTextResolver<TParent>;
  placeholder?: MessageBodyTextToPlaceholderResolver<TParent>;
  keyboard?: MessageBodyTextToKeyboardResolver<TParent>;
  textContentType?: MessageBodyTextToTextContentTypeResolver<TParent>;
}

export interface MessageBodyTextToTypeResolver<TParent = MessageBodyText, TResult = string> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface MessageBodyTextToIdResolver<TParent = MessageBodyText, TResult = string> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface MessageBodyTextToTextResolver<TParent = MessageBodyText, TResult = string> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface MessageBodyTextToPlaceholderResolver<TParent = MessageBodyText, TResult = string | null> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface MessageBodyTextToKeyboardResolver<TParent = MessageBodyText, TResult = KeyboardType | null> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface MessageBodyTextToTextContentTypeResolver<TParent = MessageBodyText, TResult = TextContentType | null> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface MessageBodyNumberTypeResolver<TParent = MessageBodyNumber> {
  type?: MessageBodyNumberToTypeResolver<TParent>;
  id?: MessageBodyNumberToIdResolver<TParent>;
  text?: MessageBodyNumberToTextResolver<TParent>;
  placeholder?: MessageBodyNumberToPlaceholderResolver<TParent>;
  keyboard?: MessageBodyNumberToKeyboardResolver<TParent>;
  textContentType?: MessageBodyNumberToTextContentTypeResolver<TParent>;
}

export interface MessageBodyNumberToTypeResolver<TParent = MessageBodyNumber, TResult = string> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface MessageBodyNumberToIdResolver<TParent = MessageBodyNumber, TResult = string> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface MessageBodyNumberToTextResolver<TParent = MessageBodyNumber, TResult = string> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface MessageBodyNumberToPlaceholderResolver<TParent = MessageBodyNumber, TResult = string | null> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface MessageBodyNumberToKeyboardResolver<TParent = MessageBodyNumber, TResult = KeyboardType | null> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface MessageBodyNumberToTextContentTypeResolver<TParent = MessageBodyNumber, TResult = TextContentType | null> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface MessageBodyAudioTypeResolver<TParent = MessageBodyAudio> {
  type?: MessageBodyAudioToTypeResolver<TParent>;
  id?: MessageBodyAudioToIdResolver<TParent>;
  text?: MessageBodyAudioToTextResolver<TParent>;
  url?: MessageBodyAudioToUrlResolver<TParent>;
}

export interface MessageBodyAudioToTypeResolver<TParent = MessageBodyAudio, TResult = string> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface MessageBodyAudioToIdResolver<TParent = MessageBodyAudio, TResult = string> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface MessageBodyAudioToTextResolver<TParent = MessageBodyAudio, TResult = string> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface MessageBodyAudioToUrlResolver<TParent = MessageBodyAudio, TResult = string | null> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface MessageBodyBankIdCollectTypeResolver<TParent = MessageBodyBankIdCollect> {
  type?: MessageBodyBankIdCollectToTypeResolver<TParent>;
  id?: MessageBodyBankIdCollectToIdResolver<TParent>;
  text?: MessageBodyBankIdCollectToTextResolver<TParent>;
  referenceId?: MessageBodyBankIdCollectToReferenceIdResolver<TParent>;
}

export interface MessageBodyBankIdCollectToTypeResolver<TParent = MessageBodyBankIdCollect, TResult = string> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface MessageBodyBankIdCollectToIdResolver<TParent = MessageBodyBankIdCollect, TResult = string> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface MessageBodyBankIdCollectToTextResolver<TParent = MessageBodyBankIdCollect, TResult = string> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface MessageBodyBankIdCollectToReferenceIdResolver<TParent = MessageBodyBankIdCollect, TResult = string | null> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface MessageBodyFileTypeResolver<TParent = MessageBodyFile> {
  type?: MessageBodyFileToTypeResolver<TParent>;
  id?: MessageBodyFileToIdResolver<TParent>;
  text?: MessageBodyFileToTextResolver<TParent>;
  key?: MessageBodyFileToKeyResolver<TParent>;
  mimeType?: MessageBodyFileToMimeTypeResolver<TParent>;
  file?: MessageBodyFileToFileResolver<TParent>;
}

export interface MessageBodyFileToTypeResolver<TParent = MessageBodyFile, TResult = string> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface MessageBodyFileToIdResolver<TParent = MessageBodyFile, TResult = string> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface MessageBodyFileToTextResolver<TParent = MessageBodyFile, TResult = string> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface MessageBodyFileToKeyResolver<TParent = MessageBodyFile, TResult = string | null> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface MessageBodyFileToMimeTypeResolver<TParent = MessageBodyFile, TResult = string | null> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface MessageBodyFileToFileResolver<TParent = MessageBodyFile, TResult = File> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface MessageBodyParagraphTypeResolver<TParent = MessageBodyParagraph> {
  type?: MessageBodyParagraphToTypeResolver<TParent>;
  id?: MessageBodyParagraphToIdResolver<TParent>;
  text?: MessageBodyParagraphToTextResolver<TParent>;
}

export interface MessageBodyParagraphToTypeResolver<TParent = MessageBodyParagraph, TResult = string> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface MessageBodyParagraphToIdResolver<TParent = MessageBodyParagraph, TResult = string> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface MessageBodyParagraphToTextResolver<TParent = MessageBodyParagraph, TResult = string> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface MessageBodyUndefinedTypeResolver<TParent = MessageBodyUndefined> {
  type?: MessageBodyUndefinedToTypeResolver<TParent>;
  id?: MessageBodyUndefinedToIdResolver<TParent>;
  text?: MessageBodyUndefinedToTextResolver<TParent>;
}

export interface MessageBodyUndefinedToTypeResolver<TParent = MessageBodyUndefined, TResult = string> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface MessageBodyUndefinedToIdResolver<TParent = MessageBodyUndefined, TResult = string> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface MessageBodyUndefinedToTextResolver<TParent = MessageBodyUndefined, TResult = string> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface MessageHeaderTypeResolver<TParent = MessageHeader> {
  messageId?: MessageHeaderToMessageIdResolver<TParent>;
  fromMyself?: MessageHeaderToFromMyselfResolver<TParent>;
  timeStamp?: MessageHeaderToTimeStampResolver<TParent>;
  richTextChatCompatible?: MessageHeaderToRichTextChatCompatibleResolver<TParent>;
  editAllowed?: MessageHeaderToEditAllowedResolver<TParent>;
  shouldRequestPushNotifications?: MessageHeaderToShouldRequestPushNotificationsResolver<TParent>;
  pollingInterval?: MessageHeaderToPollingIntervalResolver<TParent>;
  loadingIndicator?: MessageHeaderToLoadingIndicatorResolver<TParent>;
  markedAsRead?: MessageHeaderToMarkedAsReadResolver<TParent>;
  statusMessage?: MessageHeaderToStatusMessageResolver<TParent>;
}

export interface MessageHeaderToMessageIdResolver<TParent = MessageHeader, TResult = string> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface MessageHeaderToFromMyselfResolver<TParent = MessageHeader, TResult = boolean> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface MessageHeaderToTimeStampResolver<TParent = MessageHeader, TResult = string> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface MessageHeaderToRichTextChatCompatibleResolver<TParent = MessageHeader, TResult = boolean> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface MessageHeaderToEditAllowedResolver<TParent = MessageHeader, TResult = boolean> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface MessageHeaderToShouldRequestPushNotificationsResolver<TParent = MessageHeader, TResult = boolean> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface MessageHeaderToPollingIntervalResolver<TParent = MessageHeader, TResult = number> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface MessageHeaderToLoadingIndicatorResolver<TParent = MessageHeader, TResult = string | null> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface MessageHeaderToMarkedAsReadResolver<TParent = MessageHeader, TResult = boolean> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface MessageHeaderToStatusMessageResolver<TParent = MessageHeader, TResult = string | null> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface ChatResponseTypeResolver<TParent = ChatResponse> {
  globalId?: ChatResponseToGlobalIdResolver<TParent>;
  id?: ChatResponseToIdResolver<TParent>;
  body?: ChatResponseToBodyResolver<TParent>;
  header?: ChatResponseToHeaderResolver<TParent>;
}

export interface ChatResponseToGlobalIdResolver<TParent = ChatResponse, TResult = string> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface ChatResponseToIdResolver<TParent = ChatResponse, TResult = string> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface ChatResponseToBodyResolver<TParent = ChatResponse, TResult = MessageBody> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface ChatResponseToHeaderResolver<TParent = ChatResponse, TResult = MessageHeader> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface ChatStateTypeResolver<TParent = ChatState> {
  ongoingClaim?: ChatStateToOngoingClaimResolver<TParent>;
  showOfferScreen?: ChatStateToShowOfferScreenResolver<TParent>;
  onboardingDone?: ChatStateToOnboardingDoneResolver<TParent>;
}

export interface ChatStateToOngoingClaimResolver<TParent = ChatState, TResult = boolean> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface ChatStateToShowOfferScreenResolver<TParent = ChatState, TResult = boolean> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface ChatStateToOnboardingDoneResolver<TParent = ChatState, TResult = boolean> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface AvatarTypeResolver<TParent = Avatar> {
  name?: AvatarToNameResolver<TParent>;
  URL?: AvatarToURLResolver<TParent>;
  width?: AvatarToWidthResolver<TParent>;
  height?: AvatarToHeightResolver<TParent>;
  duration?: AvatarToDurationResolver<TParent>;
  data?: AvatarToDataResolver<TParent>;
}

export interface AvatarToNameResolver<TParent = Avatar, TResult = string> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface AvatarToURLResolver<TParent = Avatar, TResult = string> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface AvatarToWidthResolver<TParent = Avatar, TResult = number> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface AvatarToHeightResolver<TParent = Avatar, TResult = number> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface AvatarToDurationResolver<TParent = Avatar, TResult = number> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface AvatarToDataResolver<TParent = Avatar, TResult = Object | null> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface ChatActionTypeResolver<TParent = ChatAction> {
  text?: ChatActionToTextResolver<TParent>;
  triggerUrl?: ChatActionToTriggerUrlResolver<TParent>;
  enabled?: ChatActionToEnabledResolver<TParent>;
}

export interface ChatActionToTextResolver<TParent = ChatAction, TResult = string | null> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface ChatActionToTriggerUrlResolver<TParent = ChatAction, TResult = URL | null> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface ChatActionToEnabledResolver<TParent = ChatAction, TResult = boolean | null> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface GeoTypeResolver<TParent = Geo> {
  countryISOCode?: GeoToCountryISOCodeResolver<TParent>;
}

export interface GeoToCountryISOCodeResolver<TParent = Geo, TResult = string> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface AngelStoryTypeResolver<TParent = AngelStory> {
  content?: AngelStoryToContentResolver<TParent>;
}

export interface AngelStoryToContentResolver<TParent = AngelStory, TResult = string> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface ContractBundleTypeResolver<TParent = ContractBundle> {
  id?: ContractBundleToIdResolver<TParent>;
  contracts?: ContractBundleToContractsResolver<TParent>;
  angelStories?: ContractBundleToAngelStoriesResolver<TParent>;
}

export interface ContractBundleToIdResolver<TParent = ContractBundle, TResult = string> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface ContractBundleToContractsResolver<TParent = ContractBundle, TResult = Array<Contract>> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface ContractBundleToAngelStoriesResolver<TParent = ContractBundle, TResult = ContractBundleAngelStories> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface ContractTypeResolver<TParent = Contract> {
  id?: ContractToIdResolver<TParent>;
  holderMember?: ContractToHolderMemberResolver<TParent>;
  typeOfContract?: ContractToTypeOfContractResolver<TParent>;
  switchedFromInsuranceProvider?: ContractToSwitchedFromInsuranceProviderResolver<TParent>;
  status?: ContractToStatusResolver<TParent>;
  displayName?: ContractToDisplayNameResolver<TParent>;
  currentAgreement?: ContractToCurrentAgreementResolver<TParent>;
  inception?: ContractToInceptionResolver<TParent>;
  termination?: ContractToTerminationResolver<TParent>;
  upcomingRenewal?: ContractToUpcomingRenewalResolver<TParent>;
  createdAt?: ContractToCreatedAtResolver<TParent>;
}

export interface ContractToIdResolver<TParent = Contract, TResult = string> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface ContractToHolderMemberResolver<TParent = Contract, TResult = string> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface ContractToTypeOfContractResolver<TParent = Contract, TResult = TypeOfContract> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface ContractToSwitchedFromInsuranceProviderResolver<TParent = Contract, TResult = string | null> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface ContractToStatusResolver<TParent = Contract, TResult = ContractStatus> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface ContractToDisplayNameResolver<TParent = Contract, TResult = string> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface ContractToCurrentAgreementResolver<TParent = Contract, TResult = Agreement> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface ContractToInceptionResolver<TParent = Contract, TResult = LocalDate | null> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface ContractToTerminationResolver<TParent = Contract, TResult = LocalDate | null> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface ContractToUpcomingRenewalResolver<TParent = Contract, TResult = UpcomingRenewal | null> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface ContractToCreatedAtResolver<TParent = Contract, TResult = Instant> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface ContractStatusTypeResolver<TParent = ContractStatus> {
  (parent: TParent, context: Context, info: GraphQLResolveInfo): 'PendingStatus' | 'ActiveInFutureStatus' | 'ActiveStatus' | 'ActiveInFutureAndTerminatedInFutureStatus' | 'TerminatedInFutureStatus' | 'TerminatedTodayStatus' | 'TerminatedStatus' | Promise<'PendingStatus' | 'ActiveInFutureStatus' | 'ActiveStatus' | 'ActiveInFutureAndTerminatedInFutureStatus' | 'TerminatedInFutureStatus' | 'TerminatedTodayStatus' | 'TerminatedStatus'>;
}
export interface PendingStatusTypeResolver<TParent = PendingStatus> {
  pendingSince?: PendingStatusToPendingSinceResolver<TParent>;
}

export interface PendingStatusToPendingSinceResolver<TParent = PendingStatus, TResult = LocalDate | null> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface ActiveInFutureStatusTypeResolver<TParent = ActiveInFutureStatus> {
  futureInception?: ActiveInFutureStatusToFutureInceptionResolver<TParent>;
}

export interface ActiveInFutureStatusToFutureInceptionResolver<TParent = ActiveInFutureStatus, TResult = LocalDate | null> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface ActiveStatusTypeResolver<TParent = ActiveStatus> {
  pastInception?: ActiveStatusToPastInceptionResolver<TParent>;
  upcomingAgreementChange?: ActiveStatusToUpcomingAgreementChangeResolver<TParent>;
}

export interface ActiveStatusToPastInceptionResolver<TParent = ActiveStatus, TResult = LocalDate | null> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface ActiveStatusToUpcomingAgreementChangeResolver<TParent = ActiveStatus, TResult = UpcomingAgreementChange | null> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface UpcomingAgreementChangeTypeResolver<TParent = UpcomingAgreementChange> {
  newAgreement?: UpcomingAgreementChangeToNewAgreementResolver<TParent>;
}

export interface UpcomingAgreementChangeToNewAgreementResolver<TParent = UpcomingAgreementChange, TResult = Agreement> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface AgreementTypeResolver<TParent = Agreement> {
  (parent: TParent, context: Context, info: GraphQLResolveInfo): 'SwedishApartmentAgreement' | 'SwedishHouseAgreement' | 'NorwegianHomeContentAgreement' | 'NorwegianTravelAgreement' | 'DanishHomeContentAgreement' | 'DanishAccidentAgreement' | 'DanishTravelAgreement' | Promise<'SwedishApartmentAgreement' | 'SwedishHouseAgreement' | 'NorwegianHomeContentAgreement' | 'NorwegianTravelAgreement' | 'DanishHomeContentAgreement' | 'DanishAccidentAgreement' | 'DanishTravelAgreement'>;
}
export interface SwedishApartmentAgreementTypeResolver<TParent = SwedishApartmentAgreement> {
  id?: SwedishApartmentAgreementToIdResolver<TParent>;
  activeFrom?: SwedishApartmentAgreementToActiveFromResolver<TParent>;
  activeTo?: SwedishApartmentAgreementToActiveToResolver<TParent>;
  premium?: SwedishApartmentAgreementToPremiumResolver<TParent>;
  certificateUrl?: SwedishApartmentAgreementToCertificateUrlResolver<TParent>;
  status?: SwedishApartmentAgreementToStatusResolver<TParent>;
  address?: SwedishApartmentAgreementToAddressResolver<TParent>;
  numberCoInsured?: SwedishApartmentAgreementToNumberCoInsuredResolver<TParent>;
  squareMeters?: SwedishApartmentAgreementToSquareMetersResolver<TParent>;
  type?: SwedishApartmentAgreementToTypeResolver<TParent>;
}

export interface SwedishApartmentAgreementToIdResolver<TParent = SwedishApartmentAgreement, TResult = string> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface SwedishApartmentAgreementToActiveFromResolver<TParent = SwedishApartmentAgreement, TResult = LocalDate | null> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface SwedishApartmentAgreementToActiveToResolver<TParent = SwedishApartmentAgreement, TResult = LocalDate | null> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface SwedishApartmentAgreementToPremiumResolver<TParent = SwedishApartmentAgreement, TResult = MonetaryAmountV2> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface SwedishApartmentAgreementToCertificateUrlResolver<TParent = SwedishApartmentAgreement, TResult = string | null> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface SwedishApartmentAgreementToStatusResolver<TParent = SwedishApartmentAgreement, TResult = AgreementStatus> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface SwedishApartmentAgreementToAddressResolver<TParent = SwedishApartmentAgreement, TResult = Address> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface SwedishApartmentAgreementToNumberCoInsuredResolver<TParent = SwedishApartmentAgreement, TResult = number> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface SwedishApartmentAgreementToSquareMetersResolver<TParent = SwedishApartmentAgreement, TResult = number> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface SwedishApartmentAgreementToTypeResolver<TParent = SwedishApartmentAgreement, TResult = SwedishApartmentLineOfBusiness> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface AgreementCoreTypeResolver<TParent = AgreementCore> {
  (parent: TParent, context: Context, info: GraphQLResolveInfo): 'SwedishApartmentAgreement' | 'SwedishHouseAgreement' | 'NorwegianHomeContentAgreement' | 'NorwegianTravelAgreement' | 'DanishHomeContentAgreement' | 'DanishAccidentAgreement' | 'DanishTravelAgreement' | Promise<'SwedishApartmentAgreement' | 'SwedishHouseAgreement' | 'NorwegianHomeContentAgreement' | 'NorwegianTravelAgreement' | 'DanishHomeContentAgreement' | 'DanishAccidentAgreement' | 'DanishTravelAgreement'>;
}
export interface AddressTypeResolver<TParent = Address> {
  street?: AddressToStreetResolver<TParent>;
  postalCode?: AddressToPostalCodeResolver<TParent>;
  city?: AddressToCityResolver<TParent>;
  apartment?: AddressToApartmentResolver<TParent>;
  floor?: AddressToFloorResolver<TParent>;
}

export interface AddressToStreetResolver<TParent = Address, TResult = string> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface AddressToPostalCodeResolver<TParent = Address, TResult = string> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface AddressToCityResolver<TParent = Address, TResult = string | null> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface AddressToApartmentResolver<TParent = Address, TResult = string | null> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface AddressToFloorResolver<TParent = Address, TResult = string | null> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface SwedishHouseAgreementTypeResolver<TParent = SwedishHouseAgreement> {
  id?: SwedishHouseAgreementToIdResolver<TParent>;
  activeFrom?: SwedishHouseAgreementToActiveFromResolver<TParent>;
  activeTo?: SwedishHouseAgreementToActiveToResolver<TParent>;
  premium?: SwedishHouseAgreementToPremiumResolver<TParent>;
  certificateUrl?: SwedishHouseAgreementToCertificateUrlResolver<TParent>;
  status?: SwedishHouseAgreementToStatusResolver<TParent>;
  address?: SwedishHouseAgreementToAddressResolver<TParent>;
  numberCoInsured?: SwedishHouseAgreementToNumberCoInsuredResolver<TParent>;
  squareMeters?: SwedishHouseAgreementToSquareMetersResolver<TParent>;
  ancillaryArea?: SwedishHouseAgreementToAncillaryAreaResolver<TParent>;
  yearOfConstruction?: SwedishHouseAgreementToYearOfConstructionResolver<TParent>;
  numberOfBathrooms?: SwedishHouseAgreementToNumberOfBathroomsResolver<TParent>;
  extraBuildings?: SwedishHouseAgreementToExtraBuildingsResolver<TParent>;
  isSubleted?: SwedishHouseAgreementToIsSubletedResolver<TParent>;
}

export interface SwedishHouseAgreementToIdResolver<TParent = SwedishHouseAgreement, TResult = string> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface SwedishHouseAgreementToActiveFromResolver<TParent = SwedishHouseAgreement, TResult = LocalDate | null> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface SwedishHouseAgreementToActiveToResolver<TParent = SwedishHouseAgreement, TResult = LocalDate | null> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface SwedishHouseAgreementToPremiumResolver<TParent = SwedishHouseAgreement, TResult = MonetaryAmountV2> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface SwedishHouseAgreementToCertificateUrlResolver<TParent = SwedishHouseAgreement, TResult = string | null> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface SwedishHouseAgreementToStatusResolver<TParent = SwedishHouseAgreement, TResult = AgreementStatus> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface SwedishHouseAgreementToAddressResolver<TParent = SwedishHouseAgreement, TResult = Address> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface SwedishHouseAgreementToNumberCoInsuredResolver<TParent = SwedishHouseAgreement, TResult = number> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface SwedishHouseAgreementToSquareMetersResolver<TParent = SwedishHouseAgreement, TResult = number> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface SwedishHouseAgreementToAncillaryAreaResolver<TParent = SwedishHouseAgreement, TResult = number> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface SwedishHouseAgreementToYearOfConstructionResolver<TParent = SwedishHouseAgreement, TResult = number> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface SwedishHouseAgreementToNumberOfBathroomsResolver<TParent = SwedishHouseAgreement, TResult = number> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface SwedishHouseAgreementToExtraBuildingsResolver<TParent = SwedishHouseAgreement, TResult = Array<ExtraBuilding | null>> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface SwedishHouseAgreementToIsSubletedResolver<TParent = SwedishHouseAgreement, TResult = boolean> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface NorwegianHomeContentAgreementTypeResolver<TParent = NorwegianHomeContentAgreement> {
  id?: NorwegianHomeContentAgreementToIdResolver<TParent>;
  activeFrom?: NorwegianHomeContentAgreementToActiveFromResolver<TParent>;
  activeTo?: NorwegianHomeContentAgreementToActiveToResolver<TParent>;
  premium?: NorwegianHomeContentAgreementToPremiumResolver<TParent>;
  certificateUrl?: NorwegianHomeContentAgreementToCertificateUrlResolver<TParent>;
  status?: NorwegianHomeContentAgreementToStatusResolver<TParent>;
  address?: NorwegianHomeContentAgreementToAddressResolver<TParent>;
  numberCoInsured?: NorwegianHomeContentAgreementToNumberCoInsuredResolver<TParent>;
  squareMeters?: NorwegianHomeContentAgreementToSquareMetersResolver<TParent>;
  type?: NorwegianHomeContentAgreementToTypeResolver<TParent>;
}

export interface NorwegianHomeContentAgreementToIdResolver<TParent = NorwegianHomeContentAgreement, TResult = string> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface NorwegianHomeContentAgreementToActiveFromResolver<TParent = NorwegianHomeContentAgreement, TResult = LocalDate | null> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface NorwegianHomeContentAgreementToActiveToResolver<TParent = NorwegianHomeContentAgreement, TResult = LocalDate | null> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface NorwegianHomeContentAgreementToPremiumResolver<TParent = NorwegianHomeContentAgreement, TResult = MonetaryAmountV2> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface NorwegianHomeContentAgreementToCertificateUrlResolver<TParent = NorwegianHomeContentAgreement, TResult = string | null> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface NorwegianHomeContentAgreementToStatusResolver<TParent = NorwegianHomeContentAgreement, TResult = AgreementStatus> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface NorwegianHomeContentAgreementToAddressResolver<TParent = NorwegianHomeContentAgreement, TResult = Address> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface NorwegianHomeContentAgreementToNumberCoInsuredResolver<TParent = NorwegianHomeContentAgreement, TResult = number> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface NorwegianHomeContentAgreementToSquareMetersResolver<TParent = NorwegianHomeContentAgreement, TResult = number> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface NorwegianHomeContentAgreementToTypeResolver<TParent = NorwegianHomeContentAgreement, TResult = NorwegianHomeContentLineOfBusiness | null> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface NorwegianTravelAgreementTypeResolver<TParent = NorwegianTravelAgreement> {
  id?: NorwegianTravelAgreementToIdResolver<TParent>;
  activeFrom?: NorwegianTravelAgreementToActiveFromResolver<TParent>;
  activeTo?: NorwegianTravelAgreementToActiveToResolver<TParent>;
  premium?: NorwegianTravelAgreementToPremiumResolver<TParent>;
  certificateUrl?: NorwegianTravelAgreementToCertificateUrlResolver<TParent>;
  status?: NorwegianTravelAgreementToStatusResolver<TParent>;
  numberCoInsured?: NorwegianTravelAgreementToNumberCoInsuredResolver<TParent>;
  type?: NorwegianTravelAgreementToTypeResolver<TParent>;
}

export interface NorwegianTravelAgreementToIdResolver<TParent = NorwegianTravelAgreement, TResult = string> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface NorwegianTravelAgreementToActiveFromResolver<TParent = NorwegianTravelAgreement, TResult = LocalDate | null> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface NorwegianTravelAgreementToActiveToResolver<TParent = NorwegianTravelAgreement, TResult = LocalDate | null> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface NorwegianTravelAgreementToPremiumResolver<TParent = NorwegianTravelAgreement, TResult = MonetaryAmountV2> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface NorwegianTravelAgreementToCertificateUrlResolver<TParent = NorwegianTravelAgreement, TResult = string | null> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface NorwegianTravelAgreementToStatusResolver<TParent = NorwegianTravelAgreement, TResult = AgreementStatus> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface NorwegianTravelAgreementToNumberCoInsuredResolver<TParent = NorwegianTravelAgreement, TResult = number> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface NorwegianTravelAgreementToTypeResolver<TParent = NorwegianTravelAgreement, TResult = NorwegianTravelLineOfBusiness | null> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface DanishHomeContentAgreementTypeResolver<TParent = DanishHomeContentAgreement> {
  id?: DanishHomeContentAgreementToIdResolver<TParent>;
  activeFrom?: DanishHomeContentAgreementToActiveFromResolver<TParent>;
  activeTo?: DanishHomeContentAgreementToActiveToResolver<TParent>;
  premium?: DanishHomeContentAgreementToPremiumResolver<TParent>;
  certificateUrl?: DanishHomeContentAgreementToCertificateUrlResolver<TParent>;
  status?: DanishHomeContentAgreementToStatusResolver<TParent>;
  address?: DanishHomeContentAgreementToAddressResolver<TParent>;
  numberCoInsured?: DanishHomeContentAgreementToNumberCoInsuredResolver<TParent>;
  squareMeters?: DanishHomeContentAgreementToSquareMetersResolver<TParent>;
  type?: DanishHomeContentAgreementToTypeResolver<TParent>;
}

export interface DanishHomeContentAgreementToIdResolver<TParent = DanishHomeContentAgreement, TResult = string> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface DanishHomeContentAgreementToActiveFromResolver<TParent = DanishHomeContentAgreement, TResult = LocalDate | null> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface DanishHomeContentAgreementToActiveToResolver<TParent = DanishHomeContentAgreement, TResult = LocalDate | null> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface DanishHomeContentAgreementToPremiumResolver<TParent = DanishHomeContentAgreement, TResult = MonetaryAmountV2> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface DanishHomeContentAgreementToCertificateUrlResolver<TParent = DanishHomeContentAgreement, TResult = string | null> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface DanishHomeContentAgreementToStatusResolver<TParent = DanishHomeContentAgreement, TResult = AgreementStatus> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface DanishHomeContentAgreementToAddressResolver<TParent = DanishHomeContentAgreement, TResult = Address> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface DanishHomeContentAgreementToNumberCoInsuredResolver<TParent = DanishHomeContentAgreement, TResult = number> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface DanishHomeContentAgreementToSquareMetersResolver<TParent = DanishHomeContentAgreement, TResult = number> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface DanishHomeContentAgreementToTypeResolver<TParent = DanishHomeContentAgreement, TResult = DanishHomeContentLineOfBusiness | null> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface DanishAccidentAgreementTypeResolver<TParent = DanishAccidentAgreement> {
  id?: DanishAccidentAgreementToIdResolver<TParent>;
  activeFrom?: DanishAccidentAgreementToActiveFromResolver<TParent>;
  activeTo?: DanishAccidentAgreementToActiveToResolver<TParent>;
  premium?: DanishAccidentAgreementToPremiumResolver<TParent>;
  certificateUrl?: DanishAccidentAgreementToCertificateUrlResolver<TParent>;
  status?: DanishAccidentAgreementToStatusResolver<TParent>;
  address?: DanishAccidentAgreementToAddressResolver<TParent>;
  numberCoInsured?: DanishAccidentAgreementToNumberCoInsuredResolver<TParent>;
  type?: DanishAccidentAgreementToTypeResolver<TParent>;
}

export interface DanishAccidentAgreementToIdResolver<TParent = DanishAccidentAgreement, TResult = string> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface DanishAccidentAgreementToActiveFromResolver<TParent = DanishAccidentAgreement, TResult = LocalDate | null> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface DanishAccidentAgreementToActiveToResolver<TParent = DanishAccidentAgreement, TResult = LocalDate | null> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface DanishAccidentAgreementToPremiumResolver<TParent = DanishAccidentAgreement, TResult = MonetaryAmountV2> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface DanishAccidentAgreementToCertificateUrlResolver<TParent = DanishAccidentAgreement, TResult = string | null> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface DanishAccidentAgreementToStatusResolver<TParent = DanishAccidentAgreement, TResult = AgreementStatus> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface DanishAccidentAgreementToAddressResolver<TParent = DanishAccidentAgreement, TResult = Address> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface DanishAccidentAgreementToNumberCoInsuredResolver<TParent = DanishAccidentAgreement, TResult = number> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface DanishAccidentAgreementToTypeResolver<TParent = DanishAccidentAgreement, TResult = DanishAccidentLineOfBusiness | null> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface DanishTravelAgreementTypeResolver<TParent = DanishTravelAgreement> {
  id?: DanishTravelAgreementToIdResolver<TParent>;
  activeFrom?: DanishTravelAgreementToActiveFromResolver<TParent>;
  activeTo?: DanishTravelAgreementToActiveToResolver<TParent>;
  premium?: DanishTravelAgreementToPremiumResolver<TParent>;
  certificateUrl?: DanishTravelAgreementToCertificateUrlResolver<TParent>;
  status?: DanishTravelAgreementToStatusResolver<TParent>;
  address?: DanishTravelAgreementToAddressResolver<TParent>;
  numberCoInsured?: DanishTravelAgreementToNumberCoInsuredResolver<TParent>;
  type?: DanishTravelAgreementToTypeResolver<TParent>;
}

export interface DanishTravelAgreementToIdResolver<TParent = DanishTravelAgreement, TResult = string> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface DanishTravelAgreementToActiveFromResolver<TParent = DanishTravelAgreement, TResult = LocalDate | null> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface DanishTravelAgreementToActiveToResolver<TParent = DanishTravelAgreement, TResult = LocalDate | null> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface DanishTravelAgreementToPremiumResolver<TParent = DanishTravelAgreement, TResult = MonetaryAmountV2> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface DanishTravelAgreementToCertificateUrlResolver<TParent = DanishTravelAgreement, TResult = string | null> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface DanishTravelAgreementToStatusResolver<TParent = DanishTravelAgreement, TResult = AgreementStatus> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface DanishTravelAgreementToAddressResolver<TParent = DanishTravelAgreement, TResult = Address> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface DanishTravelAgreementToNumberCoInsuredResolver<TParent = DanishTravelAgreement, TResult = number> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface DanishTravelAgreementToTypeResolver<TParent = DanishTravelAgreement, TResult = DanishTravelLineOfBusiness | null> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface ActiveInFutureAndTerminatedInFutureStatusTypeResolver<TParent = ActiveInFutureAndTerminatedInFutureStatus> {
  futureInception?: ActiveInFutureAndTerminatedInFutureStatusToFutureInceptionResolver<TParent>;
  futureTermination?: ActiveInFutureAndTerminatedInFutureStatusToFutureTerminationResolver<TParent>;
}

export interface ActiveInFutureAndTerminatedInFutureStatusToFutureInceptionResolver<TParent = ActiveInFutureAndTerminatedInFutureStatus, TResult = LocalDate | null> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface ActiveInFutureAndTerminatedInFutureStatusToFutureTerminationResolver<TParent = ActiveInFutureAndTerminatedInFutureStatus, TResult = LocalDate | null> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface TerminatedInFutureStatusTypeResolver<TParent = TerminatedInFutureStatus> {
  futureTermination?: TerminatedInFutureStatusToFutureTerminationResolver<TParent>;
  upcomingAgreementChange?: TerminatedInFutureStatusToUpcomingAgreementChangeResolver<TParent>;
}

export interface TerminatedInFutureStatusToFutureTerminationResolver<TParent = TerminatedInFutureStatus, TResult = LocalDate | null> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface TerminatedInFutureStatusToUpcomingAgreementChangeResolver<TParent = TerminatedInFutureStatus, TResult = UpcomingAgreementChange | null> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface TerminatedTodayStatusTypeResolver<TParent = TerminatedTodayStatus> {
  today?: TerminatedTodayStatusToTodayResolver<TParent>;
  upcomingAgreementChange?: TerminatedTodayStatusToUpcomingAgreementChangeResolver<TParent>;
}

export interface TerminatedTodayStatusToTodayResolver<TParent = TerminatedTodayStatus, TResult = LocalDate | null> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface TerminatedTodayStatusToUpcomingAgreementChangeResolver<TParent = TerminatedTodayStatus, TResult = UpcomingAgreementChange | null> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface TerminatedStatusTypeResolver<TParent = TerminatedStatus> {
  termination?: TerminatedStatusToTerminationResolver<TParent>;
}

export interface TerminatedStatusToTerminationResolver<TParent = TerminatedStatus, TResult = LocalDate | null> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface UpcomingRenewalTypeResolver<TParent = UpcomingRenewal> {
  renewalDate?: UpcomingRenewalToRenewalDateResolver<TParent>;
  draftCertificateUrl?: UpcomingRenewalToDraftCertificateUrlResolver<TParent>;
}

export interface UpcomingRenewalToRenewalDateResolver<TParent = UpcomingRenewal, TResult = LocalDate> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface UpcomingRenewalToDraftCertificateUrlResolver<TParent = UpcomingRenewal, TResult = string> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface ContractBundleAngelStoriesTypeResolver<TParent = ContractBundleAngelStories> {
  addressChange?: ContractBundleAngelStoriesToAddressChangeResolver<TParent>;
}

export interface ContractBundleAngelStoriesToAddressChangeResolver<TParent = ContractBundleAngelStories, TResult = string | null> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface SelfChangeEligibilityTypeResolver<TParent = SelfChangeEligibility> {
  blockers?: SelfChangeEligibilityToBlockersResolver<TParent>;
  embarkStoryId?: SelfChangeEligibilityToEmbarkStoryIdResolver<TParent>;
  addressChangeEmbarkStoryId?: SelfChangeEligibilityToAddressChangeEmbarkStoryIdResolver<TParent>;
}

export interface SelfChangeEligibilityToBlockersResolver<TParent = SelfChangeEligibility, TResult = Array<SelfChangeBlocker>> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface SelfChangeEligibilityToEmbarkStoryIdResolver<TParent = SelfChangeEligibility, TResult = string | null> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface SelfChangeEligibilityToAddressChangeEmbarkStoryIdResolver<TParent = SelfChangeEligibility, TResult = string | null> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface MutationTypeResolver<TParent = undefined> {
  logout?: MutationToLogoutResolver<TParent>;
  createSession?: MutationToCreateSessionResolver<TParent>;
  createSessionV2?: MutationToCreateSessionV2Resolver<TParent>;
  createOffer?: MutationToCreateOfferResolver<TParent>;
  signOffer?: MutationToSignOfferResolver<TParent>;
  signOfferV2?: MutationToSignOfferV2Resolver<TParent>;
  uploadFile?: MutationToUploadFileResolver<TParent>;
  uploadFiles?: MutationToUploadFilesResolver<TParent>;
  selectCashbackOption?: MutationToSelectCashbackOptionResolver<TParent>;
  offerClosed?: MutationToOfferClosedResolver<TParent>;
  startDirectDebitRegistration?: MutationToStartDirectDebitRegistrationResolver<TParent>;
  sendChatTextResponse?: MutationToSendChatTextResponseResolver<TParent>;
  sendChatSingleSelectResponse?: MutationToSendChatSingleSelectResponseResolver<TParent>;
  sendChatFileResponse?: MutationToSendChatFileResponseResolver<TParent>;
  sendChatAudioResponse?: MutationToSendChatAudioResponseResolver<TParent>;
  resetConversation?: MutationToResetConversationResolver<TParent>;
  editLastResponse?: MutationToEditLastResponseResolver<TParent>;
  updateEmail?: MutationToUpdateEmailResolver<TParent>;
  updatePhoneNumber?: MutationToUpdatePhoneNumberResolver<TParent>;
  registerPushToken?: MutationToRegisterPushTokenResolver<TParent>;
  triggerFreeTextChat?: MutationToTriggerFreeTextChatResolver<TParent>;
  triggerClaimChat?: MutationToTriggerClaimChatResolver<TParent>;
  triggerCallMeChat?: MutationToTriggerCallMeChatResolver<TParent>;
  emailSign?: MutationToEmailSignResolver<TParent>;
  markMessageAsRead?: MutationToMarkMessageAsReadResolver<TParent>;
  log?: MutationToLogResolver<TParent>;
  bankIdAuth?: MutationToBankIdAuthResolver<TParent>;
  swedishBankIdAuth?: MutationToSwedishBankIdAuthResolver<TParent>;
  norwegianBankIdAuth?: MutationToNorwegianBankIdAuthResolver<TParent>;
  danishBankIdAuth?: MutationToDanishBankIdAuthResolver<TParent>;
  registerBranchCampaign?: MutationToRegisterBranchCampaignResolver<TParent>;
  updateLanguage?: MutationToUpdateLanguageResolver<TParent>;
  updatePickedLocale?: MutationToUpdatePickedLocaleResolver<TParent>;
  createAddressChangeQuotes?: MutationToCreateAddressChangeQuotesResolver<TParent>;
}

export interface MutationToLogoutResolver<TParent = undefined, TResult = boolean> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface MutationToCreateSessionArgs {
  campaign?: CampaignInput;
  trackingId?: UUID;
}
export interface MutationToCreateSessionResolver<TParent = undefined, TResult = string> {
  (parent: TParent, args: MutationToCreateSessionArgs, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface MutationToCreateSessionV2Resolver<TParent = undefined, TResult = SessionInformation | null> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface MutationToCreateOfferArgs {
  details: OfferInput;
}
export interface MutationToCreateOfferResolver<TParent = undefined, TResult = boolean | null> {
  (parent: TParent, args: MutationToCreateOfferArgs, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface MutationToSignOfferArgs {
  details: SignInput;
}
export interface MutationToSignOfferResolver<TParent = undefined, TResult = boolean | null> {
  (parent: TParent, args: MutationToSignOfferArgs, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface MutationToSignOfferV2Args {
  details?: SignInput;
}
export interface MutationToSignOfferV2Resolver<TParent = undefined, TResult = BankIdSignResponse> {
  (parent: TParent, args: MutationToSignOfferV2Args, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface MutationToUploadFileArgs {
  file: Upload;
}
export interface MutationToUploadFileResolver<TParent = undefined, TResult = File> {
  (parent: TParent, args: MutationToUploadFileArgs, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface MutationToUploadFilesArgs {
  files: Array<Upload>;
}
export interface MutationToUploadFilesResolver<TParent = undefined, TResult = Array<File> | null> {
  (parent: TParent, args: MutationToUploadFilesArgs, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface MutationToSelectCashbackOptionArgs {
  id: string;
  locale?: Locale;
}
export interface MutationToSelectCashbackOptionResolver<TParent = undefined, TResult = Cashback> {
  (parent: TParent, args: MutationToSelectCashbackOptionArgs, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface MutationToOfferClosedResolver<TParent = undefined, TResult = boolean> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface MutationToStartDirectDebitRegistrationResolver<TParent = undefined, TResult = URL> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface MutationToSendChatTextResponseArgs {
  input: ChatResponseTextInput;
}
export interface MutationToSendChatTextResponseResolver<TParent = undefined, TResult = boolean> {
  (parent: TParent, args: MutationToSendChatTextResponseArgs, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface MutationToSendChatSingleSelectResponseArgs {
  input: ChatResponseSingleSelectInput;
}
export interface MutationToSendChatSingleSelectResponseResolver<TParent = undefined, TResult = boolean> {
  (parent: TParent, args: MutationToSendChatSingleSelectResponseArgs, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface MutationToSendChatFileResponseArgs {
  input: ChatResponseFileInput;
}
export interface MutationToSendChatFileResponseResolver<TParent = undefined, TResult = boolean> {
  (parent: TParent, args: MutationToSendChatFileResponseArgs, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface MutationToSendChatAudioResponseArgs {
  input: ChatResponseAudioInput;
}
export interface MutationToSendChatAudioResponseResolver<TParent = undefined, TResult = boolean> {
  (parent: TParent, args: MutationToSendChatAudioResponseArgs, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface MutationToResetConversationResolver<TParent = undefined, TResult = boolean> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface MutationToEditLastResponseResolver<TParent = undefined, TResult = boolean> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface MutationToUpdateEmailArgs {
  input: string;
}
export interface MutationToUpdateEmailResolver<TParent = undefined, TResult = Member> {
  (parent: TParent, args: MutationToUpdateEmailArgs, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface MutationToUpdatePhoneNumberArgs {
  input: string;
}
export interface MutationToUpdatePhoneNumberResolver<TParent = undefined, TResult = Member> {
  (parent: TParent, args: MutationToUpdatePhoneNumberArgs, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface MutationToRegisterPushTokenArgs {
  pushToken: string;
}
export interface MutationToRegisterPushTokenResolver<TParent = undefined, TResult = boolean | null> {
  (parent: TParent, args: MutationToRegisterPushTokenArgs, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface MutationToTriggerFreeTextChatResolver<TParent = undefined, TResult = boolean | null> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface MutationToTriggerClaimChatArgs {
  input: TriggerClaimChatInput;
}
export interface MutationToTriggerClaimChatResolver<TParent = undefined, TResult = boolean | null> {
  (parent: TParent, args: MutationToTriggerClaimChatArgs, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface MutationToTriggerCallMeChatResolver<TParent = undefined, TResult = boolean | null> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface MutationToEmailSignResolver<TParent = undefined, TResult = boolean | null> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface MutationToMarkMessageAsReadArgs {
  globalId: string;
}
export interface MutationToMarkMessageAsReadResolver<TParent = undefined, TResult = Message> {
  (parent: TParent, args: MutationToMarkMessageAsReadArgs, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface MutationToLogArgs {
  input: LoggingInput;
}
export interface MutationToLogResolver<TParent = undefined, TResult = boolean | null> {
  (parent: TParent, args: MutationToLogArgs, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface MutationToBankIdAuthResolver<TParent = undefined, TResult = BankIdAuthResponse> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface MutationToSwedishBankIdAuthResolver<TParent = undefined, TResult = BankIdAuthResponse> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface MutationToNorwegianBankIdAuthArgs {
  personalNumber?: string;
}
export interface MutationToNorwegianBankIdAuthResolver<TParent = undefined, TResult = NorwegianBankIdAuthResponse> {
  (parent: TParent, args: MutationToNorwegianBankIdAuthArgs, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface MutationToDanishBankIdAuthArgs {
  personalNumber: string;
}
export interface MutationToDanishBankIdAuthResolver<TParent = undefined, TResult = DanishBankIdAuthResponse> {
  (parent: TParent, args: MutationToDanishBankIdAuthArgs, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface MutationToRegisterBranchCampaignArgs {
  campaign: CampaignInput;
}
export interface MutationToRegisterBranchCampaignResolver<TParent = undefined, TResult = boolean | null> {
  (parent: TParent, args: MutationToRegisterBranchCampaignArgs, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface MutationToUpdateLanguageArgs {
  input: string;
}
export interface MutationToUpdateLanguageResolver<TParent = undefined, TResult = boolean> {
  (parent: TParent, args: MutationToUpdateLanguageArgs, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface MutationToUpdatePickedLocaleArgs {
  pickedLocale: Locale;
}
export interface MutationToUpdatePickedLocaleResolver<TParent = undefined, TResult = Member> {
  (parent: TParent, args: MutationToUpdatePickedLocaleArgs, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface MutationToCreateAddressChangeQuotesArgs {
  input: AddressChangeInput;
}
export interface MutationToCreateAddressChangeQuotesResolver<TParent = undefined, TResult = AddressChangeQuoteResult> {
  (parent: TParent, args: MutationToCreateAddressChangeQuotesArgs, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface SessionInformationTypeResolver<TParent = SessionInformation> {
  token?: SessionInformationToTokenResolver<TParent>;
  memberId?: SessionInformationToMemberIdResolver<TParent>;
}

export interface SessionInformationToTokenResolver<TParent = SessionInformation, TResult = string> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface SessionInformationToMemberIdResolver<TParent = SessionInformation, TResult = string> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface BankIdSignResponseTypeResolver<TParent = BankIdSignResponse> {
  autoStartToken?: BankIdSignResponseToAutoStartTokenResolver<TParent>;
  redirectUrl?: BankIdSignResponseToRedirectUrlResolver<TParent>;
}

export interface BankIdSignResponseToAutoStartTokenResolver<TParent = BankIdSignResponse, TResult = string | null> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface BankIdSignResponseToRedirectUrlResolver<TParent = BankIdSignResponse, TResult = string | null> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface BankIdAuthResponseTypeResolver<TParent = BankIdAuthResponse> {
  autoStartToken?: BankIdAuthResponseToAutoStartTokenResolver<TParent>;
}

export interface BankIdAuthResponseToAutoStartTokenResolver<TParent = BankIdAuthResponse, TResult = string> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface NorwegianBankIdAuthResponseTypeResolver<TParent = NorwegianBankIdAuthResponse> {
  redirectUrl?: NorwegianBankIdAuthResponseToRedirectUrlResolver<TParent>;
}

export interface NorwegianBankIdAuthResponseToRedirectUrlResolver<TParent = NorwegianBankIdAuthResponse, TResult = string> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface DanishBankIdAuthResponseTypeResolver<TParent = DanishBankIdAuthResponse> {
  redirectUrl?: DanishBankIdAuthResponseToRedirectUrlResolver<TParent>;
}

export interface DanishBankIdAuthResponseToRedirectUrlResolver<TParent = DanishBankIdAuthResponse, TResult = string> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface AddressChangeQuoteResultTypeResolver<TParent = AddressChangeQuoteResult> {
  (parent: TParent, context: Context, info: GraphQLResolveInfo): 'AddressChangeQuoteSuccess' | 'AddressChangeQuoteFailure' | Promise<'AddressChangeQuoteSuccess' | 'AddressChangeQuoteFailure'>;
}
export interface AddressChangeQuoteSuccessTypeResolver<TParent = AddressChangeQuoteSuccess> {
  quoteIds?: AddressChangeQuoteSuccessToQuoteIdsResolver<TParent>;
}

export interface AddressChangeQuoteSuccessToQuoteIdsResolver<TParent = AddressChangeQuoteSuccess, TResult = Array<string>> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface AddressChangeQuoteFailureTypeResolver<TParent = AddressChangeQuoteFailure> {
  breachedUnderwritingGuidelines?: AddressChangeQuoteFailureToBreachedUnderwritingGuidelinesResolver<TParent>;
}

export interface AddressChangeQuoteFailureToBreachedUnderwritingGuidelinesResolver<TParent = AddressChangeQuoteFailure, TResult = Array<string>> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface SubscriptionTypeResolver<TParent = undefined> {
  offer?: SubscriptionToOfferResolver<TParent>;
  signStatus?: SubscriptionToSignStatusResolver<TParent>;
  message?: SubscriptionToMessageResolver<TParent>;
  currentChatResponse?: SubscriptionToCurrentChatResponseResolver<TParent>;
  chatState?: SubscriptionToChatStateResolver<TParent>;
  authStatus?: SubscriptionToAuthStatusResolver<TParent>;
}

export interface SubscriptionToOfferResolver<TParent = undefined, TResult = OfferEvent | null> {
  resolve?: (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo) => TResult | Promise<TResult>;
  subscribe: (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo) => AsyncIterator<TResult> | Promise<AsyncIterator<TResult>>;
}

export interface SubscriptionToSignStatusResolver<TParent = undefined, TResult = SignEvent | null> {
  resolve?: (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo) => TResult | Promise<TResult>;
  subscribe: (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo) => AsyncIterator<TResult> | Promise<AsyncIterator<TResult>>;
}

export interface SubscriptionToMessageResolver<TParent = undefined, TResult = Message> {
  resolve?: (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo) => TResult | Promise<TResult>;
  subscribe: (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo) => AsyncIterator<TResult> | Promise<AsyncIterator<TResult>>;
}

export interface SubscriptionToCurrentChatResponseArgs {
  mostRecentTimestamp: string;
}
export interface SubscriptionToCurrentChatResponseResolver<TParent = undefined, TResult = ChatResponse | null> {
  resolve?: (parent: TParent, args: SubscriptionToCurrentChatResponseArgs, context: Context, info: GraphQLResolveInfo) => TResult | Promise<TResult>;
  subscribe: (parent: TParent, args: SubscriptionToCurrentChatResponseArgs, context: Context, info: GraphQLResolveInfo) => AsyncIterator<TResult> | Promise<AsyncIterator<TResult>>;
}

export interface SubscriptionToChatStateArgs {
  mostRecentTimestamp: string;
}
export interface SubscriptionToChatStateResolver<TParent = undefined, TResult = ChatState> {
  resolve?: (parent: TParent, args: SubscriptionToChatStateArgs, context: Context, info: GraphQLResolveInfo) => TResult | Promise<TResult>;
  subscribe: (parent: TParent, args: SubscriptionToChatStateArgs, context: Context, info: GraphQLResolveInfo) => AsyncIterator<TResult> | Promise<AsyncIterator<TResult>>;
}

export interface SubscriptionToAuthStatusResolver<TParent = undefined, TResult = AuthEvent | null> {
  resolve?: (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo) => TResult | Promise<TResult>;
  subscribe: (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo) => AsyncIterator<TResult> | Promise<AsyncIterator<TResult>>;
}

export interface OfferEventTypeResolver<TParent = OfferEvent> {
  status?: OfferEventToStatusResolver<TParent>;
  insurance?: OfferEventToInsuranceResolver<TParent>;
}

export interface OfferEventToStatusResolver<TParent = OfferEvent, TResult = OfferStatus> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface OfferEventToInsuranceResolver<TParent = OfferEvent, TResult = Insurance | null> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface SignEventTypeResolver<TParent = SignEvent> {
  status?: SignEventToStatusResolver<TParent>;
}

export interface SignEventToStatusResolver<TParent = SignEvent, TResult = SignStatus | null> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface AuthEventTypeResolver<TParent = AuthEvent> {
  status?: AuthEventToStatusResolver<TParent>;
}

export interface AuthEventToStatusResolver<TParent = AuthEvent, TResult = AuthState | null> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}
