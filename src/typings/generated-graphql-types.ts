import { Context } from '../context'
/* tslint:disable */
import { GraphQLResolveInfo, GraphQLScalarType } from 'graphql';
/**
 * This file is auto-generated by graphql-schema-typescript
 * Please note that any changes in this file may be overwritten
 */
 

/*******************************
 *                             *
 *          TYPE DEFS          *
 *                             *
 *******************************/
export interface Query {
  
  /**
   * 
   * @deprecated Use `contracts` instead
   */
  insurance: Insurance;
  cashback?: Cashback;
  cashbackOptions: Array<Cashback | null>;
  signStatus?: SignStatus;
  member: Member;
  gifs: Array<Gif | null>;
  file: File;
  messages: Array<Message | null>;
  currentChatResponse?: ChatResponse;
  chatState: ChatState;
  avatars?: Array<Avatar | null>;
  chatActions?: Array<ChatAction | null>;
  geo: Geo;
  angelStory?: AngelStory;
}

export interface Insurance {
  address?: string;
  postalNumber?: string;
  cost?: InsuranceCost;
  personsInHousehold?: number;
  certificateUrl?: string;
  status: InsuranceStatus;
  type?: InsuranceType;
  activeFrom?: LocalDate;
  
  /**
   * 
   * @deprecated Use previousInsurer instead
   */
  insuredAtOtherCompany?: boolean;
  presaleInformationUrl?: string;
  policyUrl?: string;
  
  /**
   * 
   * @deprecated Use previousInsurer instead
   */
  currentInsurerName?: string;
  livingSpace?: number;
  
  /**
   * 
   * @deprecated Use arrangedPerilCategories instead
   */
  perilCategories?: Array<PerilCategory | null>;
  
  /**
   * 
   * @deprecated Use cost instead
   */
  monthlyCost?: number;
  
  /**
   * 
   * @deprecated No longer supported
   */
  safetyIncreasers?: Array<string>;
  arrangedPerilCategories: ArrangedPerilCategories;
  renewal?: Renewal;
  previousInsurer?: PreviousInsurer;
  ancillaryArea?: number;
  yearOfConstruction?: number;
  numberOfBathrooms?: number;
  extraBuildings?: Array<ExtraBuilding>;
  isSubleted?: boolean;
}

export interface InsuranceCost {
  monthlyGross: MonetaryAmountV2;
  monthlyDiscount: MonetaryAmountV2;
  monthlyNet: MonetaryAmountV2;
  freeUntil?: LocalDate;
}

export interface MonetaryAmountV2 {
  amount: string;
  currency: string;
}

export type LocalDate = any;

export enum InsuranceStatus {
  PENDING = 'PENDING',
  ACTIVE = 'ACTIVE',
  INACTIVE = 'INACTIVE',
  INACTIVE_WITH_START_DATE = 'INACTIVE_WITH_START_DATE',
  TERMINATED = 'TERMINATED'
}

export enum InsuranceType {
  RENT = 'RENT',
  BRF = 'BRF',
  STUDENT_RENT = 'STUDENT_RENT',
  STUDENT_BRF = 'STUDENT_BRF',
  HOUSE = 'HOUSE'
}

export interface PerilCategory {
  title?: string;
  description?: string;
  iconUrl?: string;
  perils?: Array<Peril | null>;
}

export interface Peril {
  id?: string;
  title?: string;
  imageUrl?: string;
  description?: string;
}

export interface ArrangedPerilCategories {
  me?: PerilCategory;
  home?: PerilCategory;
  stuff?: PerilCategory;
}

export interface Renewal {
  certificateUrl: string;
  date: LocalDate;
}

export interface PreviousInsurer {
  displayName?: string;
  id: string;
  switchable: boolean;
}

export type ExtraBuilding =
ExtraBuildingGarage |
ExtraBuildingCarport |
ExtraBuildingShed |
ExtraBuildingStorehouse |
ExtraBuildingFriggebod |
ExtraBuildingAttefall |
ExtraBuildingOuthouse |
ExtraBuildingGuesthouse |
ExtraBuildingGazebo |
ExtraBuildingGreenhouse |
ExtraBuildingSauna |
ExtraBuildingBarn |
ExtraBuildingBoathouse |
ExtraBuildingOther;

/** Use this to resolve union type ExtraBuilding */
export type PossibleExtraBuildingTypeNames =
'ExtraBuildingGarage' |
'ExtraBuildingCarport' |
'ExtraBuildingShed' |
'ExtraBuildingStorehouse' |
'ExtraBuildingFriggebod' |
'ExtraBuildingAttefall' |
'ExtraBuildingOuthouse' |
'ExtraBuildingGuesthouse' |
'ExtraBuildingGazebo' |
'ExtraBuildingGreenhouse' |
'ExtraBuildingSauna' |
'ExtraBuildingBarn' |
'ExtraBuildingBoathouse' |
'ExtraBuildingOther';

export interface ExtraBuildingNameMap {
  ExtraBuilding: ExtraBuilding;
  ExtraBuildingGarage: ExtraBuildingGarage;
  ExtraBuildingCarport: ExtraBuildingCarport;
  ExtraBuildingShed: ExtraBuildingShed;
  ExtraBuildingStorehouse: ExtraBuildingStorehouse;
  ExtraBuildingFriggebod: ExtraBuildingFriggebod;
  ExtraBuildingAttefall: ExtraBuildingAttefall;
  ExtraBuildingOuthouse: ExtraBuildingOuthouse;
  ExtraBuildingGuesthouse: ExtraBuildingGuesthouse;
  ExtraBuildingGazebo: ExtraBuildingGazebo;
  ExtraBuildingGreenhouse: ExtraBuildingGreenhouse;
  ExtraBuildingSauna: ExtraBuildingSauna;
  ExtraBuildingBarn: ExtraBuildingBarn;
  ExtraBuildingBoathouse: ExtraBuildingBoathouse;
  ExtraBuildingOther: ExtraBuildingOther;
}

export interface ExtraBuildingGarage extends ExtraBuildingCore {
  area: number;
  displayName: string;
  hasWaterConnected: boolean;
}

export interface ExtraBuildingCore {
  area: number;
  displayName: string;
  hasWaterConnected: boolean;
}

/** Use this to resolve interface type ExtraBuildingCore */
export type PossibleExtraBuildingCoreTypeNames =
'ExtraBuildingGarage' |
'ExtraBuildingCarport' |
'ExtraBuildingShed' |
'ExtraBuildingStorehouse' |
'ExtraBuildingFriggebod' |
'ExtraBuildingAttefall' |
'ExtraBuildingOuthouse' |
'ExtraBuildingGuesthouse' |
'ExtraBuildingGazebo' |
'ExtraBuildingGreenhouse' |
'ExtraBuildingSauna' |
'ExtraBuildingBarn' |
'ExtraBuildingBoathouse' |
'ExtraBuildingOther';

export interface ExtraBuildingCoreNameMap {
  ExtraBuildingCore: ExtraBuildingCore;
  ExtraBuildingGarage: ExtraBuildingGarage;
  ExtraBuildingCarport: ExtraBuildingCarport;
  ExtraBuildingShed: ExtraBuildingShed;
  ExtraBuildingStorehouse: ExtraBuildingStorehouse;
  ExtraBuildingFriggebod: ExtraBuildingFriggebod;
  ExtraBuildingAttefall: ExtraBuildingAttefall;
  ExtraBuildingOuthouse: ExtraBuildingOuthouse;
  ExtraBuildingGuesthouse: ExtraBuildingGuesthouse;
  ExtraBuildingGazebo: ExtraBuildingGazebo;
  ExtraBuildingGreenhouse: ExtraBuildingGreenhouse;
  ExtraBuildingSauna: ExtraBuildingSauna;
  ExtraBuildingBarn: ExtraBuildingBarn;
  ExtraBuildingBoathouse: ExtraBuildingBoathouse;
  ExtraBuildingOther: ExtraBuildingOther;
}

export interface ExtraBuildingCarport extends ExtraBuildingCore {
  area: number;
  displayName: string;
  hasWaterConnected: boolean;
}

export interface ExtraBuildingShed extends ExtraBuildingCore {
  area: number;
  displayName: string;
  hasWaterConnected: boolean;
}

export interface ExtraBuildingStorehouse extends ExtraBuildingCore {
  area: number;
  displayName: string;
  hasWaterConnected: boolean;
}

export interface ExtraBuildingFriggebod extends ExtraBuildingCore {
  area: number;
  displayName: string;
  hasWaterConnected: boolean;
}

export interface ExtraBuildingAttefall extends ExtraBuildingCore {
  area: number;
  displayName: string;
  hasWaterConnected: boolean;
}

export interface ExtraBuildingOuthouse extends ExtraBuildingCore {
  area: number;
  displayName: string;
  hasWaterConnected: boolean;
}

export interface ExtraBuildingGuesthouse extends ExtraBuildingCore {
  area: number;
  displayName: string;
  hasWaterConnected: boolean;
}

export interface ExtraBuildingGazebo extends ExtraBuildingCore {
  area: number;
  displayName: string;
  hasWaterConnected: boolean;
}

export interface ExtraBuildingGreenhouse extends ExtraBuildingCore {
  area: number;
  displayName: string;
  hasWaterConnected: boolean;
}

export interface ExtraBuildingSauna extends ExtraBuildingCore {
  area: number;
  displayName: string;
  hasWaterConnected: boolean;
}

export interface ExtraBuildingBarn extends ExtraBuildingCore {
  area: number;
  displayName: string;
  hasWaterConnected: boolean;
}

export interface ExtraBuildingBoathouse extends ExtraBuildingCore {
  area: number;
  displayName: string;
  hasWaterConnected: boolean;
}

export interface ExtraBuildingOther extends ExtraBuildingCore {
  area: number;
  displayName: string;
  hasWaterConnected: boolean;
}

export interface Cashback {
  id?: string;
  name?: string;
  imageUrl?: string;
  selectedUrl?: string;
  description?: string;
  title?: string;
  paragraph?: string;
}

export interface SignStatus {
  collectStatus?: CollectStatus;
  signState?: SignState;
}

export interface CollectStatus {
  status?: BankIdStatus;
  code?: string;
}

export enum BankIdStatus {
  pending = 'pending',
  failed = 'failed',
  complete = 'complete'
}

export enum SignState {
  INITIATED = 'INITIATED',
  IN_PROGRESS = 'IN_PROGRESS',
  FAILED = 'FAILED',
  COMPLETED = 'COMPLETED'
}

export interface Member {
  id?: string;
  firstName?: string;
  lastName?: string;
  email?: string;
  phoneNumber?: string;
  acceptLanguage?: string;
  features: Array<Feature>;
}

export enum Feature {
  KeyGear = 'KeyGear',
  Referrals = 'Referrals'
}

export interface Gif {
  url?: string;
}

export interface File {
  
  /**
   * signedUrl is valid for 30 minutes after upload, don't hang on to this.
   */
  signedUrl: string;
  
  /**
   * S3 key that can be used to retreive new signed urls in the future.
   */
  key: string;
  
  /**
   * S3 bucket that the file was uploaded to.
   */
  bucket: string;
}

export interface Message {
  globalId: string;
  id: string;
  body: MessageBody;
  header: MessageHeader;
}

export type MessageBody =
MessageBodySingleSelect |
MessageBodyMultipleSelect |
MessageBodyText |
MessageBodyNumber |
MessageBodyAudio |
MessageBodyBankIdCollect |
MessageBodyFile |
MessageBodyParagraph |
MessageBodyUndefined;

/** Use this to resolve union type MessageBody */
export type PossibleMessageBodyTypeNames =
'MessageBodySingleSelect' |
'MessageBodyMultipleSelect' |
'MessageBodyText' |
'MessageBodyNumber' |
'MessageBodyAudio' |
'MessageBodyBankIdCollect' |
'MessageBodyFile' |
'MessageBodyParagraph' |
'MessageBodyUndefined';

export interface MessageBodyNameMap {
  MessageBody: MessageBody;
  MessageBodySingleSelect: MessageBodySingleSelect;
  MessageBodyMultipleSelect: MessageBodyMultipleSelect;
  MessageBodyText: MessageBodyText;
  MessageBodyNumber: MessageBodyNumber;
  MessageBodyAudio: MessageBodyAudio;
  MessageBodyBankIdCollect: MessageBodyBankIdCollect;
  MessageBodyFile: MessageBodyFile;
  MessageBodyParagraph: MessageBodyParagraph;
  MessageBodyUndefined: MessageBodyUndefined;
}

export interface MessageBodySingleSelect extends MessageBodyCore {
  type: string;
  id: string;
  text: string;
  choices?: Array<MessageBodyChoices | null>;
}

export interface MessageBodyCore {
  type: string;
  id: string;
  text: string;
}

/** Use this to resolve interface type MessageBodyCore */
export type PossibleMessageBodyCoreTypeNames =
'MessageBodySingleSelect' |
'MessageBodyMultipleSelect' |
'MessageBodyText' |
'MessageBodyNumber' |
'MessageBodyAudio' |
'MessageBodyBankIdCollect' |
'MessageBodyFile' |
'MessageBodyParagraph' |
'MessageBodyUndefined';

export interface MessageBodyCoreNameMap {
  MessageBodyCore: MessageBodyCore;
  MessageBodySingleSelect: MessageBodySingleSelect;
  MessageBodyMultipleSelect: MessageBodyMultipleSelect;
  MessageBodyText: MessageBodyText;
  MessageBodyNumber: MessageBodyNumber;
  MessageBodyAudio: MessageBodyAudio;
  MessageBodyBankIdCollect: MessageBodyBankIdCollect;
  MessageBodyFile: MessageBodyFile;
  MessageBodyParagraph: MessageBodyParagraph;
  MessageBodyUndefined: MessageBodyUndefined;
}

export type MessageBodyChoices =
MessageBodyChoicesUndefined |
MessageBodyChoicesSelection |
MessageBodyChoicesLink;

/** Use this to resolve union type MessageBodyChoices */
export type PossibleMessageBodyChoicesTypeNames =
'MessageBodyChoicesUndefined' |
'MessageBodyChoicesSelection' |
'MessageBodyChoicesLink';

export interface MessageBodyChoicesNameMap {
  MessageBodyChoices: MessageBodyChoices;
  MessageBodyChoicesUndefined: MessageBodyChoicesUndefined;
  MessageBodyChoicesSelection: MessageBodyChoicesSelection;
  MessageBodyChoicesLink: MessageBodyChoicesLink;
}

export interface MessageBodyChoicesUndefined extends MessageBodyChoicesCore {
  type: string;
  value: string;
  text: string;
  selected: boolean;
}

export interface MessageBodyChoicesCore {
  type: string;
  value: string;
  text: string;
  selected: boolean;
}

/** Use this to resolve interface type MessageBodyChoicesCore */
export type PossibleMessageBodyChoicesCoreTypeNames =
'MessageBodyChoicesUndefined' |
'MessageBodyChoicesSelection' |
'MessageBodyChoicesLink';

export interface MessageBodyChoicesCoreNameMap {
  MessageBodyChoicesCore: MessageBodyChoicesCore;
  MessageBodyChoicesUndefined: MessageBodyChoicesUndefined;
  MessageBodyChoicesSelection: MessageBodyChoicesSelection;
  MessageBodyChoicesLink: MessageBodyChoicesLink;
}

export interface MessageBodyChoicesSelection extends MessageBodyChoicesCore {
  type: string;
  value: string;
  text: string;
  selected: boolean;
  clearable?: boolean;
}

export interface MessageBodyChoicesLink extends MessageBodyChoicesCore {
  type: string;
  value: string;
  text: string;
  selected: boolean;
  view?: MessageBodyChoicesLinkView;
  appUrl?: string;
  webUrl?: string;
}

export enum MessageBodyChoicesLinkView {
  OFFER = 'OFFER',
  DASHBOARD = 'DASHBOARD'
}

export interface MessageBodyMultipleSelect extends MessageBodyCore {
  type: string;
  id: string;
  text: string;
  choices?: Array<MessageBodyChoices | null>;
}

export interface MessageBodyText extends MessageBodyCore {
  type: string;
  id: string;
  text: string;
  placeholder?: string;
  keyboard?: KeyboardType;
  textContentType?: TextContentType;
}

export enum KeyboardType {
  DEFAULT = 'DEFAULT',
  NUMBERPAD = 'NUMBERPAD',
  DECIMALPAD = 'DECIMALPAD',
  NUMERIC = 'NUMERIC',
  EMAIL = 'EMAIL',
  PHONE = 'PHONE'
}

export enum TextContentType {
  NONE = 'NONE',
  URL = 'URL',
  ADDRESS_CITY = 'ADDRESS_CITY',
  ADDRESS_CITY_STATE = 'ADDRESS_CITY_STATE',
  ADDRESS_STATE = 'ADDRESS_STATE',
  COUNTRY_NAME = 'COUNTRY_NAME',
  CREDIT_CARD_NUMBER = 'CREDIT_CARD_NUMBER',
  EMAIL_ADDRESS = 'EMAIL_ADDRESS',
  FAMILY_NAME = 'FAMILY_NAME',
  FULL_STREET_ADDRESS = 'FULL_STREET_ADDRESS',
  GIVEN_NAME = 'GIVEN_NAME',
  JOB_TITLE = 'JOB_TITLE',
  LOCATION = 'LOCATION',
  MIDDLE_NAME = 'MIDDLE_NAME',
  NAME = 'NAME',
  NAME_PREFIX = 'NAME_PREFIX',
  NAME_SUFFIX = 'NAME_SUFFIX',
  NICK_NAME = 'NICK_NAME',
  ORGANIZATION_NAME = 'ORGANIZATION_NAME',
  POSTAL_CODE = 'POSTAL_CODE',
  STREET_ADDRESS_LINE1 = 'STREET_ADDRESS_LINE1',
  STREET_ADDRESS_LINE2 = 'STREET_ADDRESS_LINE2',
  SUBLOCALITY = 'SUBLOCALITY',
  TELEPHONE_NUMBER = 'TELEPHONE_NUMBER',
  USERNAME = 'USERNAME',
  PASSWORD = 'PASSWORD'
}

export interface MessageBodyNumber extends MessageBodyCore {
  type: string;
  id: string;
  text: string;
  placeholder?: string;
  keyboard?: KeyboardType;
  textContentType?: TextContentType;
}

export interface MessageBodyAudio extends MessageBodyCore {
  type: string;
  id: string;
  text: string;
  url?: string;
}

export interface MessageBodyBankIdCollect extends MessageBodyCore {
  type: string;
  id: string;
  text: string;
  referenceId?: string;
}

export interface MessageBodyFile extends MessageBodyCore {
  type: string;
  id: string;
  text: string;
  key?: string;
  mimeType?: string;
  file: File;
}

export interface MessageBodyParagraph extends MessageBodyCore {
  type: string;
  id: string;
  text: string;
}

export interface MessageBodyUndefined extends MessageBodyCore {
  type: string;
  id: string;
  text: string;
}

export interface MessageHeader {
  messageId: string;
  fromMyself: boolean;
  timeStamp: string;
  richTextChatCompatible: boolean;
  editAllowed: boolean;
  shouldRequestPushNotifications: boolean;
  pollingInterval: number;
  loadingIndicator?: string;
  markedAsRead: boolean;
  statusMessage?: string;
}

export interface ChatResponse {
  globalId: string;
  id: string;
  body: MessageBody;
  header: MessageHeader;
}

export interface ChatState {
  ongoingClaim: boolean;
  showOfferScreen: boolean;
  onboardingDone: boolean;
}

export interface Avatar {
  name: string;
  URL: string;
  width: number;
  height: number;
  duration: number;
  data?: Object;
}

export type Object = any;

export interface ChatAction {
  text?: string;
  triggerUrl?: URL;
  enabled?: boolean;
}

export type URL = any;

export interface Geo {
  countryISOCode: string;
}

export interface AngelStory {
  content: string;
}

export interface Mutation {
  logout: boolean;
  createSession: string;
  createSessionV2?: SessionInformation;
  
  /**
   * 
   * @deprecated Use Quotes instead
   */
  createOffer?: boolean;
  
  /**
   * 
   * @deprecated Use `signOfferV2`.
   */
  signOffer?: boolean;
  
  /**
   * 
   * @deprecated Use Quotes instead
   */
  signOfferV2: BankIdSignResponse;
  uploadFile: File;
  uploadFiles?: Array<File>;
  selectCashbackOption: Cashback;
  
  /**
   * 
   * @deprecated Use Quotes instead
   */
  offerClosed: boolean;
  startDirectDebitRegistration: URL;
  sendChatTextResponse: boolean;
  sendChatSingleSelectResponse: boolean;
  sendChatFileResponse: boolean;
  sendChatAudioResponse: boolean;
  resetConversation: boolean;
  editLastResponse: boolean;
  updateEmail: Member;
  updatePhoneNumber: Member;
  registerPushToken?: boolean;
  triggerFreeTextChat?: boolean;
  triggerClaimChat?: boolean;
  triggerCallMeChat?: boolean;
  emailSign?: boolean;
  markMessageAsRead: Message;
  log?: boolean;
  
  /**
   * 
   * @deprecated Use `swedishBankIdAuth`.
   */
  bankIdAuth: BankIdAuthResponse;
  swedishBankIdAuth: BankIdAuthResponse;
  norwegianBankIdAuth: NorwegianBankIdAuthResponse;
  danishBankIdAuth: DanishBankIdAuthResponse;
  registerBranchCampaign?: boolean;
  updateLanguage: boolean;
  updatePickedLocale: Member;
}

export interface CampaignInput {
  source?: string;
  medium?: string;
  term?: string;
  content?: string;
  name?: string;
}

export type UUID = any;

export interface SessionInformation {
  token: string;
  memberId: string;
}

export interface OfferInput {
  firstName: string;
  lastName: string;
  age: number;
  address: string;
  postalNumber: string;
  city?: string;
  insuranceType: InsuranceType;
  squareMeters: number;
  personsInHousehold: number;
  previousInsurer?: string;
}

export interface SignInput {
  personalNumber: string;
  email: string;
}

export interface BankIdSignResponse {
  autoStartToken?: string;
  redirectUrl?: string;
}

export type Upload = any;

export interface ChatResponseTextInput {
  globalId: string;
  body: ChatResponseBodyTextInput;
}

export interface ChatResponseBodyTextInput {
  text: string;
}

export interface ChatResponseSingleSelectInput {
  globalId: string;
  body: ChatResponseBodySingleSelectInput;
}

export interface ChatResponseBodySingleSelectInput {
  selectedValue: string;
}

export interface ChatResponseFileInput {
  globalId: string;
  body: ChatResponseBodyFileInput;
}

export interface ChatResponseBodyFileInput {
  key: string;
  mimeType: string;
}

export interface ChatResponseAudioInput {
  globalId: string;
  file: Upload;
}

export interface TriggerClaimChatInput {
  claimTypeId?: string;
}

export interface LoggingInput {
  timestamp: TimeStamp;
  source: LoggingSource;
  payload: JSONObject;
  severity: LoggingSeverity;
}

export type TimeStamp = any;

export enum LoggingSource {
  IOS = 'IOS',
  ANDROID = 'ANDROID'
}

export type JSONObject = any;

export enum LoggingSeverity {
  DEFAULT = 'DEFAULT',
  DEBUG = 'DEBUG',
  INFO = 'INFO',
  NOTICE = 'NOTICE',
  WARNING = 'WARNING',
  ERROR = 'ERROR',
  CRITICAL = 'CRITICAL',
  ALERT = 'ALERT',
  EMERGENCY = 'EMERGENCY'
}

export interface BankIdAuthResponse {
  autoStartToken: string;
}

export interface NorwegianBankIdAuthResponse {
  redirectUrl: string;
}

export interface DanishBankIdAuthResponse {
  redirectUrl: string;
}

export enum Locale {
  sv_SE = 'sv_SE',
  en_SE = 'en_SE',
  nb_NO = 'nb_NO',
  en_NO = 'en_NO',
  da_DK = 'da_DK',
  en_DK = 'en_DK'
}

export interface Subscription {
  
  /**
   * 
   * @deprecated Use Quotes instead
   */
  offer?: OfferEvent;
  
  /**
   * 
   * @deprecated Use Quotes instead
   */
  signStatus?: SignEvent;
  message: Message;
  currentChatResponse?: ChatResponse;
  chatState: ChatState;
  authStatus?: AuthEvent;
}

export interface OfferEvent {
  status: OfferStatus;
  insurance?: Insurance;
}

export enum OfferStatus {
  SUCCESS = 'SUCCESS',
  FAIL = 'FAIL'
}

export interface SignEvent {
  status?: SignStatus;
}

export interface AuthEvent {
  status?: AuthState;
}

export enum AuthState {
  INITIATED = 'INITIATED',
  IN_PROGRESS = 'IN_PROGRESS',
  FAILED = 'FAILED',
  SUCCESS = 'SUCCESS'
}

export interface ChatResponseBodyAudioInput {
  url: string;
}

/*********************************
 *                               *
 *         TYPE RESOLVERS        *
 *                               *
 *********************************/
/**
 * This interface define the shape of your resolver
 * Note that this type is designed to be compatible with graphql-tools resolvers
 * However, you can still use other generated interfaces to make your resolver type-safed
 */
export interface Resolver {
  Query?: QueryTypeResolver;
  Insurance?: InsuranceTypeResolver;
  InsuranceCost?: InsuranceCostTypeResolver;
  MonetaryAmountV2?: MonetaryAmountV2TypeResolver;
  LocalDate?: GraphQLScalarType;
  PerilCategory?: PerilCategoryTypeResolver;
  Peril?: PerilTypeResolver;
  ArrangedPerilCategories?: ArrangedPerilCategoriesTypeResolver;
  Renewal?: RenewalTypeResolver;
  PreviousInsurer?: PreviousInsurerTypeResolver;
  ExtraBuilding?: {
    __resolveType: ExtraBuildingTypeResolver
  };
  
  ExtraBuildingGarage?: ExtraBuildingGarageTypeResolver;
  ExtraBuildingCore?: {
    __resolveType: ExtraBuildingCoreTypeResolver
  };
  
  ExtraBuildingCarport?: ExtraBuildingCarportTypeResolver;
  ExtraBuildingShed?: ExtraBuildingShedTypeResolver;
  ExtraBuildingStorehouse?: ExtraBuildingStorehouseTypeResolver;
  ExtraBuildingFriggebod?: ExtraBuildingFriggebodTypeResolver;
  ExtraBuildingAttefall?: ExtraBuildingAttefallTypeResolver;
  ExtraBuildingOuthouse?: ExtraBuildingOuthouseTypeResolver;
  ExtraBuildingGuesthouse?: ExtraBuildingGuesthouseTypeResolver;
  ExtraBuildingGazebo?: ExtraBuildingGazeboTypeResolver;
  ExtraBuildingGreenhouse?: ExtraBuildingGreenhouseTypeResolver;
  ExtraBuildingSauna?: ExtraBuildingSaunaTypeResolver;
  ExtraBuildingBarn?: ExtraBuildingBarnTypeResolver;
  ExtraBuildingBoathouse?: ExtraBuildingBoathouseTypeResolver;
  ExtraBuildingOther?: ExtraBuildingOtherTypeResolver;
  Cashback?: CashbackTypeResolver;
  SignStatus?: SignStatusTypeResolver;
  CollectStatus?: CollectStatusTypeResolver;
  Member?: MemberTypeResolver;
  Gif?: GifTypeResolver;
  File?: FileTypeResolver;
  Message?: MessageTypeResolver;
  MessageBody?: {
    __resolveType: MessageBodyTypeResolver
  };
  
  MessageBodySingleSelect?: MessageBodySingleSelectTypeResolver;
  MessageBodyCore?: {
    __resolveType: MessageBodyCoreTypeResolver
  };
  
  MessageBodyChoices?: {
    __resolveType: MessageBodyChoicesTypeResolver
  };
  
  MessageBodyChoicesUndefined?: MessageBodyChoicesUndefinedTypeResolver;
  MessageBodyChoicesCore?: {
    __resolveType: MessageBodyChoicesCoreTypeResolver
  };
  
  MessageBodyChoicesSelection?: MessageBodyChoicesSelectionTypeResolver;
  MessageBodyChoicesLink?: MessageBodyChoicesLinkTypeResolver;
  MessageBodyMultipleSelect?: MessageBodyMultipleSelectTypeResolver;
  MessageBodyText?: MessageBodyTextTypeResolver;
  MessageBodyNumber?: MessageBodyNumberTypeResolver;
  MessageBodyAudio?: MessageBodyAudioTypeResolver;
  MessageBodyBankIdCollect?: MessageBodyBankIdCollectTypeResolver;
  MessageBodyFile?: MessageBodyFileTypeResolver;
  MessageBodyParagraph?: MessageBodyParagraphTypeResolver;
  MessageBodyUndefined?: MessageBodyUndefinedTypeResolver;
  MessageHeader?: MessageHeaderTypeResolver;
  ChatResponse?: ChatResponseTypeResolver;
  ChatState?: ChatStateTypeResolver;
  Avatar?: AvatarTypeResolver;
  Object?: GraphQLScalarType;
  ChatAction?: ChatActionTypeResolver;
  URL?: GraphQLScalarType;
  Geo?: GeoTypeResolver;
  AngelStory?: AngelStoryTypeResolver;
  Mutation?: MutationTypeResolver;
  UUID?: GraphQLScalarType;
  SessionInformation?: SessionInformationTypeResolver;
  BankIdSignResponse?: BankIdSignResponseTypeResolver;
  Upload?: GraphQLScalarType;
  TimeStamp?: GraphQLScalarType;
  JSONObject?: GraphQLScalarType;
  BankIdAuthResponse?: BankIdAuthResponseTypeResolver;
  NorwegianBankIdAuthResponse?: NorwegianBankIdAuthResponseTypeResolver;
  DanishBankIdAuthResponse?: DanishBankIdAuthResponseTypeResolver;
  Subscription?: SubscriptionTypeResolver;
  OfferEvent?: OfferEventTypeResolver;
  SignEvent?: SignEventTypeResolver;
  AuthEvent?: AuthEventTypeResolver;
}
export interface QueryTypeResolver<TParent = undefined> {
  insurance?: QueryToInsuranceResolver<TParent>;
  cashback?: QueryToCashbackResolver<TParent>;
  cashbackOptions?: QueryToCashbackOptionsResolver<TParent>;
  signStatus?: QueryToSignStatusResolver<TParent>;
  member?: QueryToMemberResolver<TParent>;
  gifs?: QueryToGifsResolver<TParent>;
  file?: QueryToFileResolver<TParent>;
  messages?: QueryToMessagesResolver<TParent>;
  currentChatResponse?: QueryToCurrentChatResponseResolver<TParent>;
  chatState?: QueryToChatStateResolver<TParent>;
  avatars?: QueryToAvatarsResolver<TParent>;
  chatActions?: QueryToChatActionsResolver<TParent>;
  geo?: QueryToGeoResolver<TParent>;
  angelStory?: QueryToAngelStoryResolver<TParent>;
}

export interface QueryToInsuranceResolver<TParent = undefined, TResult = Insurance> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface QueryToCashbackResolver<TParent = undefined, TResult = Cashback | null> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface QueryToCashbackOptionsResolver<TParent = undefined, TResult = Array<Cashback | null>> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface QueryToSignStatusResolver<TParent = undefined, TResult = SignStatus | null> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface QueryToMemberResolver<TParent = undefined, TResult = Member> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface QueryToGifsArgs {
  query: string;
}
export interface QueryToGifsResolver<TParent = undefined, TResult = Array<Gif | null>> {
  (parent: TParent, args: QueryToGifsArgs, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface QueryToFileArgs {
  key: string;
}
export interface QueryToFileResolver<TParent = undefined, TResult = File> {
  (parent: TParent, args: QueryToFileArgs, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface QueryToMessagesResolver<TParent = undefined, TResult = Array<Message | null>> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface QueryToCurrentChatResponseResolver<TParent = undefined, TResult = ChatResponse | null> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface QueryToChatStateResolver<TParent = undefined, TResult = ChatState> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface QueryToAvatarsResolver<TParent = undefined, TResult = Array<Avatar | null> | null> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface QueryToChatActionsResolver<TParent = undefined, TResult = Array<ChatAction | null> | null> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface QueryToGeoResolver<TParent = undefined, TResult = Geo> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface QueryToAngelStoryArgs {
  name: string;
}
export interface QueryToAngelStoryResolver<TParent = undefined, TResult = AngelStory | null> {
  (parent: TParent, args: QueryToAngelStoryArgs, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface InsuranceTypeResolver<TParent = Insurance> {
  address?: InsuranceToAddressResolver<TParent>;
  postalNumber?: InsuranceToPostalNumberResolver<TParent>;
  cost?: InsuranceToCostResolver<TParent>;
  personsInHousehold?: InsuranceToPersonsInHouseholdResolver<TParent>;
  certificateUrl?: InsuranceToCertificateUrlResolver<TParent>;
  status?: InsuranceToStatusResolver<TParent>;
  type?: InsuranceToTypeResolver<TParent>;
  activeFrom?: InsuranceToActiveFromResolver<TParent>;
  insuredAtOtherCompany?: InsuranceToInsuredAtOtherCompanyResolver<TParent>;
  presaleInformationUrl?: InsuranceToPresaleInformationUrlResolver<TParent>;
  policyUrl?: InsuranceToPolicyUrlResolver<TParent>;
  currentInsurerName?: InsuranceToCurrentInsurerNameResolver<TParent>;
  livingSpace?: InsuranceToLivingSpaceResolver<TParent>;
  perilCategories?: InsuranceToPerilCategoriesResolver<TParent>;
  monthlyCost?: InsuranceToMonthlyCostResolver<TParent>;
  safetyIncreasers?: InsuranceToSafetyIncreasersResolver<TParent>;
  arrangedPerilCategories?: InsuranceToArrangedPerilCategoriesResolver<TParent>;
  renewal?: InsuranceToRenewalResolver<TParent>;
  previousInsurer?: InsuranceToPreviousInsurerResolver<TParent>;
  ancillaryArea?: InsuranceToAncillaryAreaResolver<TParent>;
  yearOfConstruction?: InsuranceToYearOfConstructionResolver<TParent>;
  numberOfBathrooms?: InsuranceToNumberOfBathroomsResolver<TParent>;
  extraBuildings?: InsuranceToExtraBuildingsResolver<TParent>;
  isSubleted?: InsuranceToIsSubletedResolver<TParent>;
}

export interface InsuranceToAddressResolver<TParent = Insurance, TResult = string | null> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface InsuranceToPostalNumberResolver<TParent = Insurance, TResult = string | null> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface InsuranceToCostResolver<TParent = Insurance, TResult = InsuranceCost | null> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface InsuranceToPersonsInHouseholdResolver<TParent = Insurance, TResult = number | null> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface InsuranceToCertificateUrlResolver<TParent = Insurance, TResult = string | null> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface InsuranceToStatusResolver<TParent = Insurance, TResult = InsuranceStatus> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface InsuranceToTypeResolver<TParent = Insurance, TResult = InsuranceType | null> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface InsuranceToActiveFromResolver<TParent = Insurance, TResult = LocalDate | null> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface InsuranceToInsuredAtOtherCompanyResolver<TParent = Insurance, TResult = boolean | null> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface InsuranceToPresaleInformationUrlResolver<TParent = Insurance, TResult = string | null> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface InsuranceToPolicyUrlResolver<TParent = Insurance, TResult = string | null> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface InsuranceToCurrentInsurerNameResolver<TParent = Insurance, TResult = string | null> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface InsuranceToLivingSpaceResolver<TParent = Insurance, TResult = number | null> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface InsuranceToPerilCategoriesResolver<TParent = Insurance, TResult = Array<PerilCategory | null> | null> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface InsuranceToMonthlyCostResolver<TParent = Insurance, TResult = number | null> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface InsuranceToSafetyIncreasersResolver<TParent = Insurance, TResult = Array<string> | null> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface InsuranceToArrangedPerilCategoriesResolver<TParent = Insurance, TResult = ArrangedPerilCategories> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface InsuranceToRenewalResolver<TParent = Insurance, TResult = Renewal | null> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface InsuranceToPreviousInsurerResolver<TParent = Insurance, TResult = PreviousInsurer | null> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface InsuranceToAncillaryAreaResolver<TParent = Insurance, TResult = number | null> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface InsuranceToYearOfConstructionResolver<TParent = Insurance, TResult = number | null> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface InsuranceToNumberOfBathroomsResolver<TParent = Insurance, TResult = number | null> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface InsuranceToExtraBuildingsResolver<TParent = Insurance, TResult = Array<ExtraBuilding> | null> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface InsuranceToIsSubletedResolver<TParent = Insurance, TResult = boolean | null> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface InsuranceCostTypeResolver<TParent = InsuranceCost> {
  monthlyGross?: InsuranceCostToMonthlyGrossResolver<TParent>;
  monthlyDiscount?: InsuranceCostToMonthlyDiscountResolver<TParent>;
  monthlyNet?: InsuranceCostToMonthlyNetResolver<TParent>;
  freeUntil?: InsuranceCostToFreeUntilResolver<TParent>;
}

export interface InsuranceCostToMonthlyGrossResolver<TParent = InsuranceCost, TResult = MonetaryAmountV2> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface InsuranceCostToMonthlyDiscountResolver<TParent = InsuranceCost, TResult = MonetaryAmountV2> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface InsuranceCostToMonthlyNetResolver<TParent = InsuranceCost, TResult = MonetaryAmountV2> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface InsuranceCostToFreeUntilResolver<TParent = InsuranceCost, TResult = LocalDate | null> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface MonetaryAmountV2TypeResolver<TParent = MonetaryAmountV2> {
  amount?: MonetaryAmountV2ToAmountResolver<TParent>;
  currency?: MonetaryAmountV2ToCurrencyResolver<TParent>;
}

export interface MonetaryAmountV2ToAmountResolver<TParent = MonetaryAmountV2, TResult = string> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface MonetaryAmountV2ToCurrencyResolver<TParent = MonetaryAmountV2, TResult = string> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface PerilCategoryTypeResolver<TParent = PerilCategory> {
  title?: PerilCategoryToTitleResolver<TParent>;
  description?: PerilCategoryToDescriptionResolver<TParent>;
  iconUrl?: PerilCategoryToIconUrlResolver<TParent>;
  perils?: PerilCategoryToPerilsResolver<TParent>;
}

export interface PerilCategoryToTitleResolver<TParent = PerilCategory, TResult = string | null> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface PerilCategoryToDescriptionResolver<TParent = PerilCategory, TResult = string | null> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface PerilCategoryToIconUrlResolver<TParent = PerilCategory, TResult = string | null> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface PerilCategoryToPerilsResolver<TParent = PerilCategory, TResult = Array<Peril | null> | null> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface PerilTypeResolver<TParent = Peril> {
  id?: PerilToIdResolver<TParent>;
  title?: PerilToTitleResolver<TParent>;
  imageUrl?: PerilToImageUrlResolver<TParent>;
  description?: PerilToDescriptionResolver<TParent>;
}

export interface PerilToIdResolver<TParent = Peril, TResult = string | null> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface PerilToTitleResolver<TParent = Peril, TResult = string | null> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface PerilToImageUrlResolver<TParent = Peril, TResult = string | null> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface PerilToDescriptionResolver<TParent = Peril, TResult = string | null> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface ArrangedPerilCategoriesTypeResolver<TParent = ArrangedPerilCategories> {
  me?: ArrangedPerilCategoriesToMeResolver<TParent>;
  home?: ArrangedPerilCategoriesToHomeResolver<TParent>;
  stuff?: ArrangedPerilCategoriesToStuffResolver<TParent>;
}

export interface ArrangedPerilCategoriesToMeResolver<TParent = ArrangedPerilCategories, TResult = PerilCategory | null> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface ArrangedPerilCategoriesToHomeResolver<TParent = ArrangedPerilCategories, TResult = PerilCategory | null> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface ArrangedPerilCategoriesToStuffResolver<TParent = ArrangedPerilCategories, TResult = PerilCategory | null> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface RenewalTypeResolver<TParent = Renewal> {
  certificateUrl?: RenewalToCertificateUrlResolver<TParent>;
  date?: RenewalToDateResolver<TParent>;
}

export interface RenewalToCertificateUrlResolver<TParent = Renewal, TResult = string> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface RenewalToDateResolver<TParent = Renewal, TResult = LocalDate> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface PreviousInsurerTypeResolver<TParent = PreviousInsurer> {
  displayName?: PreviousInsurerToDisplayNameResolver<TParent>;
  id?: PreviousInsurerToIdResolver<TParent>;
  switchable?: PreviousInsurerToSwitchableResolver<TParent>;
}

export interface PreviousInsurerToDisplayNameResolver<TParent = PreviousInsurer, TResult = string | null> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface PreviousInsurerToIdResolver<TParent = PreviousInsurer, TResult = string> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface PreviousInsurerToSwitchableResolver<TParent = PreviousInsurer, TResult = boolean> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface ExtraBuildingTypeResolver<TParent = ExtraBuilding> {
  (parent: TParent, context: Context, info: GraphQLResolveInfo): 'ExtraBuildingGarage' | 'ExtraBuildingCarport' | 'ExtraBuildingShed' | 'ExtraBuildingStorehouse' | 'ExtraBuildingFriggebod' | 'ExtraBuildingAttefall' | 'ExtraBuildingOuthouse' | 'ExtraBuildingGuesthouse' | 'ExtraBuildingGazebo' | 'ExtraBuildingGreenhouse' | 'ExtraBuildingSauna' | 'ExtraBuildingBarn' | 'ExtraBuildingBoathouse' | 'ExtraBuildingOther';
}
export interface ExtraBuildingGarageTypeResolver<TParent = ExtraBuildingGarage> {
  area?: ExtraBuildingGarageToAreaResolver<TParent>;
  displayName?: ExtraBuildingGarageToDisplayNameResolver<TParent>;
  hasWaterConnected?: ExtraBuildingGarageToHasWaterConnectedResolver<TParent>;
}

export interface ExtraBuildingGarageToAreaResolver<TParent = ExtraBuildingGarage, TResult = number> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface ExtraBuildingGarageToDisplayNameResolver<TParent = ExtraBuildingGarage, TResult = string> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface ExtraBuildingGarageToHasWaterConnectedResolver<TParent = ExtraBuildingGarage, TResult = boolean> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface ExtraBuildingCoreTypeResolver<TParent = ExtraBuildingCore> {
  (parent: TParent, context: Context, info: GraphQLResolveInfo): 'ExtraBuildingGarage' | 'ExtraBuildingCarport' | 'ExtraBuildingShed' | 'ExtraBuildingStorehouse' | 'ExtraBuildingFriggebod' | 'ExtraBuildingAttefall' | 'ExtraBuildingOuthouse' | 'ExtraBuildingGuesthouse' | 'ExtraBuildingGazebo' | 'ExtraBuildingGreenhouse' | 'ExtraBuildingSauna' | 'ExtraBuildingBarn' | 'ExtraBuildingBoathouse' | 'ExtraBuildingOther';
}
export interface ExtraBuildingCarportTypeResolver<TParent = ExtraBuildingCarport> {
  area?: ExtraBuildingCarportToAreaResolver<TParent>;
  displayName?: ExtraBuildingCarportToDisplayNameResolver<TParent>;
  hasWaterConnected?: ExtraBuildingCarportToHasWaterConnectedResolver<TParent>;
}

export interface ExtraBuildingCarportToAreaResolver<TParent = ExtraBuildingCarport, TResult = number> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface ExtraBuildingCarportToDisplayNameResolver<TParent = ExtraBuildingCarport, TResult = string> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface ExtraBuildingCarportToHasWaterConnectedResolver<TParent = ExtraBuildingCarport, TResult = boolean> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface ExtraBuildingShedTypeResolver<TParent = ExtraBuildingShed> {
  area?: ExtraBuildingShedToAreaResolver<TParent>;
  displayName?: ExtraBuildingShedToDisplayNameResolver<TParent>;
  hasWaterConnected?: ExtraBuildingShedToHasWaterConnectedResolver<TParent>;
}

export interface ExtraBuildingShedToAreaResolver<TParent = ExtraBuildingShed, TResult = number> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface ExtraBuildingShedToDisplayNameResolver<TParent = ExtraBuildingShed, TResult = string> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface ExtraBuildingShedToHasWaterConnectedResolver<TParent = ExtraBuildingShed, TResult = boolean> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface ExtraBuildingStorehouseTypeResolver<TParent = ExtraBuildingStorehouse> {
  area?: ExtraBuildingStorehouseToAreaResolver<TParent>;
  displayName?: ExtraBuildingStorehouseToDisplayNameResolver<TParent>;
  hasWaterConnected?: ExtraBuildingStorehouseToHasWaterConnectedResolver<TParent>;
}

export interface ExtraBuildingStorehouseToAreaResolver<TParent = ExtraBuildingStorehouse, TResult = number> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface ExtraBuildingStorehouseToDisplayNameResolver<TParent = ExtraBuildingStorehouse, TResult = string> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface ExtraBuildingStorehouseToHasWaterConnectedResolver<TParent = ExtraBuildingStorehouse, TResult = boolean> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface ExtraBuildingFriggebodTypeResolver<TParent = ExtraBuildingFriggebod> {
  area?: ExtraBuildingFriggebodToAreaResolver<TParent>;
  displayName?: ExtraBuildingFriggebodToDisplayNameResolver<TParent>;
  hasWaterConnected?: ExtraBuildingFriggebodToHasWaterConnectedResolver<TParent>;
}

export interface ExtraBuildingFriggebodToAreaResolver<TParent = ExtraBuildingFriggebod, TResult = number> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface ExtraBuildingFriggebodToDisplayNameResolver<TParent = ExtraBuildingFriggebod, TResult = string> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface ExtraBuildingFriggebodToHasWaterConnectedResolver<TParent = ExtraBuildingFriggebod, TResult = boolean> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface ExtraBuildingAttefallTypeResolver<TParent = ExtraBuildingAttefall> {
  area?: ExtraBuildingAttefallToAreaResolver<TParent>;
  displayName?: ExtraBuildingAttefallToDisplayNameResolver<TParent>;
  hasWaterConnected?: ExtraBuildingAttefallToHasWaterConnectedResolver<TParent>;
}

export interface ExtraBuildingAttefallToAreaResolver<TParent = ExtraBuildingAttefall, TResult = number> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface ExtraBuildingAttefallToDisplayNameResolver<TParent = ExtraBuildingAttefall, TResult = string> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface ExtraBuildingAttefallToHasWaterConnectedResolver<TParent = ExtraBuildingAttefall, TResult = boolean> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface ExtraBuildingOuthouseTypeResolver<TParent = ExtraBuildingOuthouse> {
  area?: ExtraBuildingOuthouseToAreaResolver<TParent>;
  displayName?: ExtraBuildingOuthouseToDisplayNameResolver<TParent>;
  hasWaterConnected?: ExtraBuildingOuthouseToHasWaterConnectedResolver<TParent>;
}

export interface ExtraBuildingOuthouseToAreaResolver<TParent = ExtraBuildingOuthouse, TResult = number> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface ExtraBuildingOuthouseToDisplayNameResolver<TParent = ExtraBuildingOuthouse, TResult = string> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface ExtraBuildingOuthouseToHasWaterConnectedResolver<TParent = ExtraBuildingOuthouse, TResult = boolean> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface ExtraBuildingGuesthouseTypeResolver<TParent = ExtraBuildingGuesthouse> {
  area?: ExtraBuildingGuesthouseToAreaResolver<TParent>;
  displayName?: ExtraBuildingGuesthouseToDisplayNameResolver<TParent>;
  hasWaterConnected?: ExtraBuildingGuesthouseToHasWaterConnectedResolver<TParent>;
}

export interface ExtraBuildingGuesthouseToAreaResolver<TParent = ExtraBuildingGuesthouse, TResult = number> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface ExtraBuildingGuesthouseToDisplayNameResolver<TParent = ExtraBuildingGuesthouse, TResult = string> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface ExtraBuildingGuesthouseToHasWaterConnectedResolver<TParent = ExtraBuildingGuesthouse, TResult = boolean> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface ExtraBuildingGazeboTypeResolver<TParent = ExtraBuildingGazebo> {
  area?: ExtraBuildingGazeboToAreaResolver<TParent>;
  displayName?: ExtraBuildingGazeboToDisplayNameResolver<TParent>;
  hasWaterConnected?: ExtraBuildingGazeboToHasWaterConnectedResolver<TParent>;
}

export interface ExtraBuildingGazeboToAreaResolver<TParent = ExtraBuildingGazebo, TResult = number> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface ExtraBuildingGazeboToDisplayNameResolver<TParent = ExtraBuildingGazebo, TResult = string> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface ExtraBuildingGazeboToHasWaterConnectedResolver<TParent = ExtraBuildingGazebo, TResult = boolean> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface ExtraBuildingGreenhouseTypeResolver<TParent = ExtraBuildingGreenhouse> {
  area?: ExtraBuildingGreenhouseToAreaResolver<TParent>;
  displayName?: ExtraBuildingGreenhouseToDisplayNameResolver<TParent>;
  hasWaterConnected?: ExtraBuildingGreenhouseToHasWaterConnectedResolver<TParent>;
}

export interface ExtraBuildingGreenhouseToAreaResolver<TParent = ExtraBuildingGreenhouse, TResult = number> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface ExtraBuildingGreenhouseToDisplayNameResolver<TParent = ExtraBuildingGreenhouse, TResult = string> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface ExtraBuildingGreenhouseToHasWaterConnectedResolver<TParent = ExtraBuildingGreenhouse, TResult = boolean> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface ExtraBuildingSaunaTypeResolver<TParent = ExtraBuildingSauna> {
  area?: ExtraBuildingSaunaToAreaResolver<TParent>;
  displayName?: ExtraBuildingSaunaToDisplayNameResolver<TParent>;
  hasWaterConnected?: ExtraBuildingSaunaToHasWaterConnectedResolver<TParent>;
}

export interface ExtraBuildingSaunaToAreaResolver<TParent = ExtraBuildingSauna, TResult = number> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface ExtraBuildingSaunaToDisplayNameResolver<TParent = ExtraBuildingSauna, TResult = string> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface ExtraBuildingSaunaToHasWaterConnectedResolver<TParent = ExtraBuildingSauna, TResult = boolean> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface ExtraBuildingBarnTypeResolver<TParent = ExtraBuildingBarn> {
  area?: ExtraBuildingBarnToAreaResolver<TParent>;
  displayName?: ExtraBuildingBarnToDisplayNameResolver<TParent>;
  hasWaterConnected?: ExtraBuildingBarnToHasWaterConnectedResolver<TParent>;
}

export interface ExtraBuildingBarnToAreaResolver<TParent = ExtraBuildingBarn, TResult = number> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface ExtraBuildingBarnToDisplayNameResolver<TParent = ExtraBuildingBarn, TResult = string> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface ExtraBuildingBarnToHasWaterConnectedResolver<TParent = ExtraBuildingBarn, TResult = boolean> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface ExtraBuildingBoathouseTypeResolver<TParent = ExtraBuildingBoathouse> {
  area?: ExtraBuildingBoathouseToAreaResolver<TParent>;
  displayName?: ExtraBuildingBoathouseToDisplayNameResolver<TParent>;
  hasWaterConnected?: ExtraBuildingBoathouseToHasWaterConnectedResolver<TParent>;
}

export interface ExtraBuildingBoathouseToAreaResolver<TParent = ExtraBuildingBoathouse, TResult = number> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface ExtraBuildingBoathouseToDisplayNameResolver<TParent = ExtraBuildingBoathouse, TResult = string> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface ExtraBuildingBoathouseToHasWaterConnectedResolver<TParent = ExtraBuildingBoathouse, TResult = boolean> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface ExtraBuildingOtherTypeResolver<TParent = ExtraBuildingOther> {
  area?: ExtraBuildingOtherToAreaResolver<TParent>;
  displayName?: ExtraBuildingOtherToDisplayNameResolver<TParent>;
  hasWaterConnected?: ExtraBuildingOtherToHasWaterConnectedResolver<TParent>;
}

export interface ExtraBuildingOtherToAreaResolver<TParent = ExtraBuildingOther, TResult = number> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface ExtraBuildingOtherToDisplayNameResolver<TParent = ExtraBuildingOther, TResult = string> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface ExtraBuildingOtherToHasWaterConnectedResolver<TParent = ExtraBuildingOther, TResult = boolean> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface CashbackTypeResolver<TParent = Cashback> {
  id?: CashbackToIdResolver<TParent>;
  name?: CashbackToNameResolver<TParent>;
  imageUrl?: CashbackToImageUrlResolver<TParent>;
  selectedUrl?: CashbackToSelectedUrlResolver<TParent>;
  description?: CashbackToDescriptionResolver<TParent>;
  title?: CashbackToTitleResolver<TParent>;
  paragraph?: CashbackToParagraphResolver<TParent>;
}

export interface CashbackToIdResolver<TParent = Cashback, TResult = string | null> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface CashbackToNameResolver<TParent = Cashback, TResult = string | null> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface CashbackToImageUrlResolver<TParent = Cashback, TResult = string | null> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface CashbackToSelectedUrlResolver<TParent = Cashback, TResult = string | null> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface CashbackToDescriptionResolver<TParent = Cashback, TResult = string | null> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface CashbackToTitleResolver<TParent = Cashback, TResult = string | null> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface CashbackToParagraphResolver<TParent = Cashback, TResult = string | null> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface SignStatusTypeResolver<TParent = SignStatus> {
  collectStatus?: SignStatusToCollectStatusResolver<TParent>;
  signState?: SignStatusToSignStateResolver<TParent>;
}

export interface SignStatusToCollectStatusResolver<TParent = SignStatus, TResult = CollectStatus | null> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface SignStatusToSignStateResolver<TParent = SignStatus, TResult = SignState | null> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface CollectStatusTypeResolver<TParent = CollectStatus> {
  status?: CollectStatusToStatusResolver<TParent>;
  code?: CollectStatusToCodeResolver<TParent>;
}

export interface CollectStatusToStatusResolver<TParent = CollectStatus, TResult = BankIdStatus | null> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface CollectStatusToCodeResolver<TParent = CollectStatus, TResult = string | null> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface MemberTypeResolver<TParent = Member> {
  id?: MemberToIdResolver<TParent>;
  firstName?: MemberToFirstNameResolver<TParent>;
  lastName?: MemberToLastNameResolver<TParent>;
  email?: MemberToEmailResolver<TParent>;
  phoneNumber?: MemberToPhoneNumberResolver<TParent>;
  acceptLanguage?: MemberToAcceptLanguageResolver<TParent>;
  features?: MemberToFeaturesResolver<TParent>;
}

export interface MemberToIdResolver<TParent = Member, TResult = string | null> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface MemberToFirstNameResolver<TParent = Member, TResult = string | null> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface MemberToLastNameResolver<TParent = Member, TResult = string | null> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface MemberToEmailResolver<TParent = Member, TResult = string | null> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface MemberToPhoneNumberResolver<TParent = Member, TResult = string | null> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface MemberToAcceptLanguageResolver<TParent = Member, TResult = string | null> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface MemberToFeaturesResolver<TParent = Member, TResult = Array<Feature>> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface GifTypeResolver<TParent = Gif> {
  url?: GifToUrlResolver<TParent>;
}

export interface GifToUrlResolver<TParent = Gif, TResult = string | null> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface FileTypeResolver<TParent = File> {
  signedUrl?: FileToSignedUrlResolver<TParent>;
  key?: FileToKeyResolver<TParent>;
  bucket?: FileToBucketResolver<TParent>;
}

export interface FileToSignedUrlResolver<TParent = File, TResult = string> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface FileToKeyResolver<TParent = File, TResult = string> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface FileToBucketResolver<TParent = File, TResult = string> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface MessageTypeResolver<TParent = Message> {
  globalId?: MessageToGlobalIdResolver<TParent>;
  id?: MessageToIdResolver<TParent>;
  body?: MessageToBodyResolver<TParent>;
  header?: MessageToHeaderResolver<TParent>;
}

export interface MessageToGlobalIdResolver<TParent = Message, TResult = string> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface MessageToIdResolver<TParent = Message, TResult = string> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface MessageToBodyResolver<TParent = Message, TResult = MessageBody> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface MessageToHeaderResolver<TParent = Message, TResult = MessageHeader> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface MessageBodyTypeResolver<TParent = MessageBody> {
  (parent: TParent, context: Context, info: GraphQLResolveInfo): 'MessageBodySingleSelect' | 'MessageBodyMultipleSelect' | 'MessageBodyText' | 'MessageBodyNumber' | 'MessageBodyAudio' | 'MessageBodyBankIdCollect' | 'MessageBodyFile' | 'MessageBodyParagraph' | 'MessageBodyUndefined';
}
export interface MessageBodySingleSelectTypeResolver<TParent = MessageBodySingleSelect> {
  type?: MessageBodySingleSelectToTypeResolver<TParent>;
  id?: MessageBodySingleSelectToIdResolver<TParent>;
  text?: MessageBodySingleSelectToTextResolver<TParent>;
  choices?: MessageBodySingleSelectToChoicesResolver<TParent>;
}

export interface MessageBodySingleSelectToTypeResolver<TParent = MessageBodySingleSelect, TResult = string> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface MessageBodySingleSelectToIdResolver<TParent = MessageBodySingleSelect, TResult = string> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface MessageBodySingleSelectToTextResolver<TParent = MessageBodySingleSelect, TResult = string> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface MessageBodySingleSelectToChoicesResolver<TParent = MessageBodySingleSelect, TResult = Array<MessageBodyChoices | null> | null> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface MessageBodyCoreTypeResolver<TParent = MessageBodyCore> {
  (parent: TParent, context: Context, info: GraphQLResolveInfo): 'MessageBodySingleSelect' | 'MessageBodyMultipleSelect' | 'MessageBodyText' | 'MessageBodyNumber' | 'MessageBodyAudio' | 'MessageBodyBankIdCollect' | 'MessageBodyFile' | 'MessageBodyParagraph' | 'MessageBodyUndefined';
}
export interface MessageBodyChoicesTypeResolver<TParent = MessageBodyChoices> {
  (parent: TParent, context: Context, info: GraphQLResolveInfo): 'MessageBodyChoicesUndefined' | 'MessageBodyChoicesSelection' | 'MessageBodyChoicesLink';
}
export interface MessageBodyChoicesUndefinedTypeResolver<TParent = MessageBodyChoicesUndefined> {
  type?: MessageBodyChoicesUndefinedToTypeResolver<TParent>;
  value?: MessageBodyChoicesUndefinedToValueResolver<TParent>;
  text?: MessageBodyChoicesUndefinedToTextResolver<TParent>;
  selected?: MessageBodyChoicesUndefinedToSelectedResolver<TParent>;
}

export interface MessageBodyChoicesUndefinedToTypeResolver<TParent = MessageBodyChoicesUndefined, TResult = string> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface MessageBodyChoicesUndefinedToValueResolver<TParent = MessageBodyChoicesUndefined, TResult = string> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface MessageBodyChoicesUndefinedToTextResolver<TParent = MessageBodyChoicesUndefined, TResult = string> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface MessageBodyChoicesUndefinedToSelectedResolver<TParent = MessageBodyChoicesUndefined, TResult = boolean> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface MessageBodyChoicesCoreTypeResolver<TParent = MessageBodyChoicesCore> {
  (parent: TParent, context: Context, info: GraphQLResolveInfo): 'MessageBodyChoicesUndefined' | 'MessageBodyChoicesSelection' | 'MessageBodyChoicesLink';
}
export interface MessageBodyChoicesSelectionTypeResolver<TParent = MessageBodyChoicesSelection> {
  type?: MessageBodyChoicesSelectionToTypeResolver<TParent>;
  value?: MessageBodyChoicesSelectionToValueResolver<TParent>;
  text?: MessageBodyChoicesSelectionToTextResolver<TParent>;
  selected?: MessageBodyChoicesSelectionToSelectedResolver<TParent>;
  clearable?: MessageBodyChoicesSelectionToClearableResolver<TParent>;
}

export interface MessageBodyChoicesSelectionToTypeResolver<TParent = MessageBodyChoicesSelection, TResult = string> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface MessageBodyChoicesSelectionToValueResolver<TParent = MessageBodyChoicesSelection, TResult = string> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface MessageBodyChoicesSelectionToTextResolver<TParent = MessageBodyChoicesSelection, TResult = string> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface MessageBodyChoicesSelectionToSelectedResolver<TParent = MessageBodyChoicesSelection, TResult = boolean> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface MessageBodyChoicesSelectionToClearableResolver<TParent = MessageBodyChoicesSelection, TResult = boolean | null> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface MessageBodyChoicesLinkTypeResolver<TParent = MessageBodyChoicesLink> {
  type?: MessageBodyChoicesLinkToTypeResolver<TParent>;
  value?: MessageBodyChoicesLinkToValueResolver<TParent>;
  text?: MessageBodyChoicesLinkToTextResolver<TParent>;
  selected?: MessageBodyChoicesLinkToSelectedResolver<TParent>;
  view?: MessageBodyChoicesLinkToViewResolver<TParent>;
  appUrl?: MessageBodyChoicesLinkToAppUrlResolver<TParent>;
  webUrl?: MessageBodyChoicesLinkToWebUrlResolver<TParent>;
}

export interface MessageBodyChoicesLinkToTypeResolver<TParent = MessageBodyChoicesLink, TResult = string> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface MessageBodyChoicesLinkToValueResolver<TParent = MessageBodyChoicesLink, TResult = string> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface MessageBodyChoicesLinkToTextResolver<TParent = MessageBodyChoicesLink, TResult = string> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface MessageBodyChoicesLinkToSelectedResolver<TParent = MessageBodyChoicesLink, TResult = boolean> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface MessageBodyChoicesLinkToViewResolver<TParent = MessageBodyChoicesLink, TResult = MessageBodyChoicesLinkView | null> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface MessageBodyChoicesLinkToAppUrlResolver<TParent = MessageBodyChoicesLink, TResult = string | null> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface MessageBodyChoicesLinkToWebUrlResolver<TParent = MessageBodyChoicesLink, TResult = string | null> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface MessageBodyMultipleSelectTypeResolver<TParent = MessageBodyMultipleSelect> {
  type?: MessageBodyMultipleSelectToTypeResolver<TParent>;
  id?: MessageBodyMultipleSelectToIdResolver<TParent>;
  text?: MessageBodyMultipleSelectToTextResolver<TParent>;
  choices?: MessageBodyMultipleSelectToChoicesResolver<TParent>;
}

export interface MessageBodyMultipleSelectToTypeResolver<TParent = MessageBodyMultipleSelect, TResult = string> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface MessageBodyMultipleSelectToIdResolver<TParent = MessageBodyMultipleSelect, TResult = string> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface MessageBodyMultipleSelectToTextResolver<TParent = MessageBodyMultipleSelect, TResult = string> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface MessageBodyMultipleSelectToChoicesResolver<TParent = MessageBodyMultipleSelect, TResult = Array<MessageBodyChoices | null> | null> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface MessageBodyTextTypeResolver<TParent = MessageBodyText> {
  type?: MessageBodyTextToTypeResolver<TParent>;
  id?: MessageBodyTextToIdResolver<TParent>;
  text?: MessageBodyTextToTextResolver<TParent>;
  placeholder?: MessageBodyTextToPlaceholderResolver<TParent>;
  keyboard?: MessageBodyTextToKeyboardResolver<TParent>;
  textContentType?: MessageBodyTextToTextContentTypeResolver<TParent>;
}

export interface MessageBodyTextToTypeResolver<TParent = MessageBodyText, TResult = string> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface MessageBodyTextToIdResolver<TParent = MessageBodyText, TResult = string> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface MessageBodyTextToTextResolver<TParent = MessageBodyText, TResult = string> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface MessageBodyTextToPlaceholderResolver<TParent = MessageBodyText, TResult = string | null> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface MessageBodyTextToKeyboardResolver<TParent = MessageBodyText, TResult = KeyboardType | null> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface MessageBodyTextToTextContentTypeResolver<TParent = MessageBodyText, TResult = TextContentType | null> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface MessageBodyNumberTypeResolver<TParent = MessageBodyNumber> {
  type?: MessageBodyNumberToTypeResolver<TParent>;
  id?: MessageBodyNumberToIdResolver<TParent>;
  text?: MessageBodyNumberToTextResolver<TParent>;
  placeholder?: MessageBodyNumberToPlaceholderResolver<TParent>;
  keyboard?: MessageBodyNumberToKeyboardResolver<TParent>;
  textContentType?: MessageBodyNumberToTextContentTypeResolver<TParent>;
}

export interface MessageBodyNumberToTypeResolver<TParent = MessageBodyNumber, TResult = string> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface MessageBodyNumberToIdResolver<TParent = MessageBodyNumber, TResult = string> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface MessageBodyNumberToTextResolver<TParent = MessageBodyNumber, TResult = string> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface MessageBodyNumberToPlaceholderResolver<TParent = MessageBodyNumber, TResult = string | null> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface MessageBodyNumberToKeyboardResolver<TParent = MessageBodyNumber, TResult = KeyboardType | null> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface MessageBodyNumberToTextContentTypeResolver<TParent = MessageBodyNumber, TResult = TextContentType | null> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface MessageBodyAudioTypeResolver<TParent = MessageBodyAudio> {
  type?: MessageBodyAudioToTypeResolver<TParent>;
  id?: MessageBodyAudioToIdResolver<TParent>;
  text?: MessageBodyAudioToTextResolver<TParent>;
  url?: MessageBodyAudioToUrlResolver<TParent>;
}

export interface MessageBodyAudioToTypeResolver<TParent = MessageBodyAudio, TResult = string> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface MessageBodyAudioToIdResolver<TParent = MessageBodyAudio, TResult = string> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface MessageBodyAudioToTextResolver<TParent = MessageBodyAudio, TResult = string> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface MessageBodyAudioToUrlResolver<TParent = MessageBodyAudio, TResult = string | null> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface MessageBodyBankIdCollectTypeResolver<TParent = MessageBodyBankIdCollect> {
  type?: MessageBodyBankIdCollectToTypeResolver<TParent>;
  id?: MessageBodyBankIdCollectToIdResolver<TParent>;
  text?: MessageBodyBankIdCollectToTextResolver<TParent>;
  referenceId?: MessageBodyBankIdCollectToReferenceIdResolver<TParent>;
}

export interface MessageBodyBankIdCollectToTypeResolver<TParent = MessageBodyBankIdCollect, TResult = string> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface MessageBodyBankIdCollectToIdResolver<TParent = MessageBodyBankIdCollect, TResult = string> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface MessageBodyBankIdCollectToTextResolver<TParent = MessageBodyBankIdCollect, TResult = string> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface MessageBodyBankIdCollectToReferenceIdResolver<TParent = MessageBodyBankIdCollect, TResult = string | null> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface MessageBodyFileTypeResolver<TParent = MessageBodyFile> {
  type?: MessageBodyFileToTypeResolver<TParent>;
  id?: MessageBodyFileToIdResolver<TParent>;
  text?: MessageBodyFileToTextResolver<TParent>;
  key?: MessageBodyFileToKeyResolver<TParent>;
  mimeType?: MessageBodyFileToMimeTypeResolver<TParent>;
  file?: MessageBodyFileToFileResolver<TParent>;
}

export interface MessageBodyFileToTypeResolver<TParent = MessageBodyFile, TResult = string> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface MessageBodyFileToIdResolver<TParent = MessageBodyFile, TResult = string> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface MessageBodyFileToTextResolver<TParent = MessageBodyFile, TResult = string> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface MessageBodyFileToKeyResolver<TParent = MessageBodyFile, TResult = string | null> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface MessageBodyFileToMimeTypeResolver<TParent = MessageBodyFile, TResult = string | null> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface MessageBodyFileToFileResolver<TParent = MessageBodyFile, TResult = File> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface MessageBodyParagraphTypeResolver<TParent = MessageBodyParagraph> {
  type?: MessageBodyParagraphToTypeResolver<TParent>;
  id?: MessageBodyParagraphToIdResolver<TParent>;
  text?: MessageBodyParagraphToTextResolver<TParent>;
}

export interface MessageBodyParagraphToTypeResolver<TParent = MessageBodyParagraph, TResult = string> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface MessageBodyParagraphToIdResolver<TParent = MessageBodyParagraph, TResult = string> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface MessageBodyParagraphToTextResolver<TParent = MessageBodyParagraph, TResult = string> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface MessageBodyUndefinedTypeResolver<TParent = MessageBodyUndefined> {
  type?: MessageBodyUndefinedToTypeResolver<TParent>;
  id?: MessageBodyUndefinedToIdResolver<TParent>;
  text?: MessageBodyUndefinedToTextResolver<TParent>;
}

export interface MessageBodyUndefinedToTypeResolver<TParent = MessageBodyUndefined, TResult = string> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface MessageBodyUndefinedToIdResolver<TParent = MessageBodyUndefined, TResult = string> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface MessageBodyUndefinedToTextResolver<TParent = MessageBodyUndefined, TResult = string> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface MessageHeaderTypeResolver<TParent = MessageHeader> {
  messageId?: MessageHeaderToMessageIdResolver<TParent>;
  fromMyself?: MessageHeaderToFromMyselfResolver<TParent>;
  timeStamp?: MessageHeaderToTimeStampResolver<TParent>;
  richTextChatCompatible?: MessageHeaderToRichTextChatCompatibleResolver<TParent>;
  editAllowed?: MessageHeaderToEditAllowedResolver<TParent>;
  shouldRequestPushNotifications?: MessageHeaderToShouldRequestPushNotificationsResolver<TParent>;
  pollingInterval?: MessageHeaderToPollingIntervalResolver<TParent>;
  loadingIndicator?: MessageHeaderToLoadingIndicatorResolver<TParent>;
  markedAsRead?: MessageHeaderToMarkedAsReadResolver<TParent>;
  statusMessage?: MessageHeaderToStatusMessageResolver<TParent>;
}

export interface MessageHeaderToMessageIdResolver<TParent = MessageHeader, TResult = string> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface MessageHeaderToFromMyselfResolver<TParent = MessageHeader, TResult = boolean> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface MessageHeaderToTimeStampResolver<TParent = MessageHeader, TResult = string> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface MessageHeaderToRichTextChatCompatibleResolver<TParent = MessageHeader, TResult = boolean> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface MessageHeaderToEditAllowedResolver<TParent = MessageHeader, TResult = boolean> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface MessageHeaderToShouldRequestPushNotificationsResolver<TParent = MessageHeader, TResult = boolean> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface MessageHeaderToPollingIntervalResolver<TParent = MessageHeader, TResult = number> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface MessageHeaderToLoadingIndicatorResolver<TParent = MessageHeader, TResult = string | null> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface MessageHeaderToMarkedAsReadResolver<TParent = MessageHeader, TResult = boolean> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface MessageHeaderToStatusMessageResolver<TParent = MessageHeader, TResult = string | null> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface ChatResponseTypeResolver<TParent = ChatResponse> {
  globalId?: ChatResponseToGlobalIdResolver<TParent>;
  id?: ChatResponseToIdResolver<TParent>;
  body?: ChatResponseToBodyResolver<TParent>;
  header?: ChatResponseToHeaderResolver<TParent>;
}

export interface ChatResponseToGlobalIdResolver<TParent = ChatResponse, TResult = string> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface ChatResponseToIdResolver<TParent = ChatResponse, TResult = string> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface ChatResponseToBodyResolver<TParent = ChatResponse, TResult = MessageBody> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface ChatResponseToHeaderResolver<TParent = ChatResponse, TResult = MessageHeader> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface ChatStateTypeResolver<TParent = ChatState> {
  ongoingClaim?: ChatStateToOngoingClaimResolver<TParent>;
  showOfferScreen?: ChatStateToShowOfferScreenResolver<TParent>;
  onboardingDone?: ChatStateToOnboardingDoneResolver<TParent>;
}

export interface ChatStateToOngoingClaimResolver<TParent = ChatState, TResult = boolean> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface ChatStateToShowOfferScreenResolver<TParent = ChatState, TResult = boolean> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface ChatStateToOnboardingDoneResolver<TParent = ChatState, TResult = boolean> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface AvatarTypeResolver<TParent = Avatar> {
  name?: AvatarToNameResolver<TParent>;
  URL?: AvatarToURLResolver<TParent>;
  width?: AvatarToWidthResolver<TParent>;
  height?: AvatarToHeightResolver<TParent>;
  duration?: AvatarToDurationResolver<TParent>;
  data?: AvatarToDataResolver<TParent>;
}

export interface AvatarToNameResolver<TParent = Avatar, TResult = string> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface AvatarToURLResolver<TParent = Avatar, TResult = string> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface AvatarToWidthResolver<TParent = Avatar, TResult = number> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface AvatarToHeightResolver<TParent = Avatar, TResult = number> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface AvatarToDurationResolver<TParent = Avatar, TResult = number> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface AvatarToDataResolver<TParent = Avatar, TResult = Object | null> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface ChatActionTypeResolver<TParent = ChatAction> {
  text?: ChatActionToTextResolver<TParent>;
  triggerUrl?: ChatActionToTriggerUrlResolver<TParent>;
  enabled?: ChatActionToEnabledResolver<TParent>;
}

export interface ChatActionToTextResolver<TParent = ChatAction, TResult = string | null> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface ChatActionToTriggerUrlResolver<TParent = ChatAction, TResult = URL | null> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface ChatActionToEnabledResolver<TParent = ChatAction, TResult = boolean | null> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface GeoTypeResolver<TParent = Geo> {
  countryISOCode?: GeoToCountryISOCodeResolver<TParent>;
}

export interface GeoToCountryISOCodeResolver<TParent = Geo, TResult = string> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface AngelStoryTypeResolver<TParent = AngelStory> {
  content?: AngelStoryToContentResolver<TParent>;
}

export interface AngelStoryToContentResolver<TParent = AngelStory, TResult = string> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface MutationTypeResolver<TParent = undefined> {
  logout?: MutationToLogoutResolver<TParent>;
  createSession?: MutationToCreateSessionResolver<TParent>;
  createSessionV2?: MutationToCreateSessionV2Resolver<TParent>;
  createOffer?: MutationToCreateOfferResolver<TParent>;
  signOffer?: MutationToSignOfferResolver<TParent>;
  signOfferV2?: MutationToSignOfferV2Resolver<TParent>;
  uploadFile?: MutationToUploadFileResolver<TParent>;
  uploadFiles?: MutationToUploadFilesResolver<TParent>;
  selectCashbackOption?: MutationToSelectCashbackOptionResolver<TParent>;
  offerClosed?: MutationToOfferClosedResolver<TParent>;
  startDirectDebitRegistration?: MutationToStartDirectDebitRegistrationResolver<TParent>;
  sendChatTextResponse?: MutationToSendChatTextResponseResolver<TParent>;
  sendChatSingleSelectResponse?: MutationToSendChatSingleSelectResponseResolver<TParent>;
  sendChatFileResponse?: MutationToSendChatFileResponseResolver<TParent>;
  sendChatAudioResponse?: MutationToSendChatAudioResponseResolver<TParent>;
  resetConversation?: MutationToResetConversationResolver<TParent>;
  editLastResponse?: MutationToEditLastResponseResolver<TParent>;
  updateEmail?: MutationToUpdateEmailResolver<TParent>;
  updatePhoneNumber?: MutationToUpdatePhoneNumberResolver<TParent>;
  registerPushToken?: MutationToRegisterPushTokenResolver<TParent>;
  triggerFreeTextChat?: MutationToTriggerFreeTextChatResolver<TParent>;
  triggerClaimChat?: MutationToTriggerClaimChatResolver<TParent>;
  triggerCallMeChat?: MutationToTriggerCallMeChatResolver<TParent>;
  emailSign?: MutationToEmailSignResolver<TParent>;
  markMessageAsRead?: MutationToMarkMessageAsReadResolver<TParent>;
  log?: MutationToLogResolver<TParent>;
  bankIdAuth?: MutationToBankIdAuthResolver<TParent>;
  swedishBankIdAuth?: MutationToSwedishBankIdAuthResolver<TParent>;
  norwegianBankIdAuth?: MutationToNorwegianBankIdAuthResolver<TParent>;
  danishBankIdAuth?: MutationToDanishBankIdAuthResolver<TParent>;
  registerBranchCampaign?: MutationToRegisterBranchCampaignResolver<TParent>;
  updateLanguage?: MutationToUpdateLanguageResolver<TParent>;
  updatePickedLocale?: MutationToUpdatePickedLocaleResolver<TParent>;
}

export interface MutationToLogoutResolver<TParent = undefined, TResult = boolean> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface MutationToCreateSessionArgs {
  campaign?: CampaignInput;
  trackingId?: UUID;
}
export interface MutationToCreateSessionResolver<TParent = undefined, TResult = string> {
  (parent: TParent, args: MutationToCreateSessionArgs, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface MutationToCreateSessionV2Resolver<TParent = undefined, TResult = SessionInformation | null> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface MutationToCreateOfferArgs {
  details: OfferInput;
}
export interface MutationToCreateOfferResolver<TParent = undefined, TResult = boolean | null> {
  (parent: TParent, args: MutationToCreateOfferArgs, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface MutationToSignOfferArgs {
  details: SignInput;
}
export interface MutationToSignOfferResolver<TParent = undefined, TResult = boolean | null> {
  (parent: TParent, args: MutationToSignOfferArgs, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface MutationToSignOfferV2Args {
  details?: SignInput;
}
export interface MutationToSignOfferV2Resolver<TParent = undefined, TResult = BankIdSignResponse> {
  (parent: TParent, args: MutationToSignOfferV2Args, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface MutationToUploadFileArgs {
  file: Upload;
}
export interface MutationToUploadFileResolver<TParent = undefined, TResult = File> {
  (parent: TParent, args: MutationToUploadFileArgs, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface MutationToUploadFilesArgs {
  files: Array<Upload>;
}
export interface MutationToUploadFilesResolver<TParent = undefined, TResult = Array<File> | null> {
  (parent: TParent, args: MutationToUploadFilesArgs, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface MutationToSelectCashbackOptionArgs {
  id: string;
}
export interface MutationToSelectCashbackOptionResolver<TParent = undefined, TResult = Cashback> {
  (parent: TParent, args: MutationToSelectCashbackOptionArgs, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface MutationToOfferClosedResolver<TParent = undefined, TResult = boolean> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface MutationToStartDirectDebitRegistrationResolver<TParent = undefined, TResult = URL> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface MutationToSendChatTextResponseArgs {
  input: ChatResponseTextInput;
}
export interface MutationToSendChatTextResponseResolver<TParent = undefined, TResult = boolean> {
  (parent: TParent, args: MutationToSendChatTextResponseArgs, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface MutationToSendChatSingleSelectResponseArgs {
  input: ChatResponseSingleSelectInput;
}
export interface MutationToSendChatSingleSelectResponseResolver<TParent = undefined, TResult = boolean> {
  (parent: TParent, args: MutationToSendChatSingleSelectResponseArgs, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface MutationToSendChatFileResponseArgs {
  input: ChatResponseFileInput;
}
export interface MutationToSendChatFileResponseResolver<TParent = undefined, TResult = boolean> {
  (parent: TParent, args: MutationToSendChatFileResponseArgs, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface MutationToSendChatAudioResponseArgs {
  input: ChatResponseAudioInput;
}
export interface MutationToSendChatAudioResponseResolver<TParent = undefined, TResult = boolean> {
  (parent: TParent, args: MutationToSendChatAudioResponseArgs, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface MutationToResetConversationResolver<TParent = undefined, TResult = boolean> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface MutationToEditLastResponseResolver<TParent = undefined, TResult = boolean> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface MutationToUpdateEmailArgs {
  input: string;
}
export interface MutationToUpdateEmailResolver<TParent = undefined, TResult = Member> {
  (parent: TParent, args: MutationToUpdateEmailArgs, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface MutationToUpdatePhoneNumberArgs {
  input: string;
}
export interface MutationToUpdatePhoneNumberResolver<TParent = undefined, TResult = Member> {
  (parent: TParent, args: MutationToUpdatePhoneNumberArgs, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface MutationToRegisterPushTokenArgs {
  pushToken: string;
}
export interface MutationToRegisterPushTokenResolver<TParent = undefined, TResult = boolean | null> {
  (parent: TParent, args: MutationToRegisterPushTokenArgs, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface MutationToTriggerFreeTextChatResolver<TParent = undefined, TResult = boolean | null> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface MutationToTriggerClaimChatArgs {
  input: TriggerClaimChatInput;
}
export interface MutationToTriggerClaimChatResolver<TParent = undefined, TResult = boolean | null> {
  (parent: TParent, args: MutationToTriggerClaimChatArgs, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface MutationToTriggerCallMeChatResolver<TParent = undefined, TResult = boolean | null> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface MutationToEmailSignResolver<TParent = undefined, TResult = boolean | null> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface MutationToMarkMessageAsReadArgs {
  globalId: string;
}
export interface MutationToMarkMessageAsReadResolver<TParent = undefined, TResult = Message> {
  (parent: TParent, args: MutationToMarkMessageAsReadArgs, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface MutationToLogArgs {
  input: LoggingInput;
}
export interface MutationToLogResolver<TParent = undefined, TResult = boolean | null> {
  (parent: TParent, args: MutationToLogArgs, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface MutationToBankIdAuthResolver<TParent = undefined, TResult = BankIdAuthResponse> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface MutationToSwedishBankIdAuthResolver<TParent = undefined, TResult = BankIdAuthResponse> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface MutationToNorwegianBankIdAuthResolver<TParent = undefined, TResult = NorwegianBankIdAuthResponse> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface MutationToDanishBankIdAuthResolver<TParent = undefined, TResult = DanishBankIdAuthResponse> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface MutationToRegisterBranchCampaignArgs {
  campaign: CampaignInput;
}
export interface MutationToRegisterBranchCampaignResolver<TParent = undefined, TResult = boolean | null> {
  (parent: TParent, args: MutationToRegisterBranchCampaignArgs, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface MutationToUpdateLanguageArgs {
  input: string;
}
export interface MutationToUpdateLanguageResolver<TParent = undefined, TResult = boolean> {
  (parent: TParent, args: MutationToUpdateLanguageArgs, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface MutationToUpdatePickedLocaleArgs {
  pickedLocale: Locale;
}
export interface MutationToUpdatePickedLocaleResolver<TParent = undefined, TResult = Member> {
  (parent: TParent, args: MutationToUpdatePickedLocaleArgs, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface SessionInformationTypeResolver<TParent = SessionInformation> {
  token?: SessionInformationToTokenResolver<TParent>;
  memberId?: SessionInformationToMemberIdResolver<TParent>;
}

export interface SessionInformationToTokenResolver<TParent = SessionInformation, TResult = string> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface SessionInformationToMemberIdResolver<TParent = SessionInformation, TResult = string> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface BankIdSignResponseTypeResolver<TParent = BankIdSignResponse> {
  autoStartToken?: BankIdSignResponseToAutoStartTokenResolver<TParent>;
  redirectUrl?: BankIdSignResponseToRedirectUrlResolver<TParent>;
}

export interface BankIdSignResponseToAutoStartTokenResolver<TParent = BankIdSignResponse, TResult = string | null> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface BankIdSignResponseToRedirectUrlResolver<TParent = BankIdSignResponse, TResult = string | null> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface BankIdAuthResponseTypeResolver<TParent = BankIdAuthResponse> {
  autoStartToken?: BankIdAuthResponseToAutoStartTokenResolver<TParent>;
}

export interface BankIdAuthResponseToAutoStartTokenResolver<TParent = BankIdAuthResponse, TResult = string> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface NorwegianBankIdAuthResponseTypeResolver<TParent = NorwegianBankIdAuthResponse> {
  redirectUrl?: NorwegianBankIdAuthResponseToRedirectUrlResolver<TParent>;
}

export interface NorwegianBankIdAuthResponseToRedirectUrlResolver<TParent = NorwegianBankIdAuthResponse, TResult = string> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface DanishBankIdAuthResponseTypeResolver<TParent = DanishBankIdAuthResponse> {
  redirectUrl?: DanishBankIdAuthResponseToRedirectUrlResolver<TParent>;
}

export interface DanishBankIdAuthResponseToRedirectUrlResolver<TParent = DanishBankIdAuthResponse, TResult = string> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface SubscriptionTypeResolver<TParent = undefined> {
  offer?: SubscriptionToOfferResolver<TParent>;
  signStatus?: SubscriptionToSignStatusResolver<TParent>;
  message?: SubscriptionToMessageResolver<TParent>;
  currentChatResponse?: SubscriptionToCurrentChatResponseResolver<TParent>;
  chatState?: SubscriptionToChatStateResolver<TParent>;
  authStatus?: SubscriptionToAuthStatusResolver<TParent>;
}

export interface SubscriptionToOfferResolver<TParent = undefined, TResult = OfferEvent | null> {
  resolve?: (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo) => TResult | Promise<TResult>;
  subscribe: (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo) => AsyncIterator<TResult> | Promise<AsyncIterator<TResult>>;
}

export interface SubscriptionToSignStatusResolver<TParent = undefined, TResult = SignEvent | null> {
  resolve?: (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo) => TResult | Promise<TResult>;
  subscribe: (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo) => AsyncIterator<TResult> | Promise<AsyncIterator<TResult>>;
}

export interface SubscriptionToMessageResolver<TParent = undefined, TResult = Message> {
  resolve?: (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo) => TResult | Promise<TResult>;
  subscribe: (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo) => AsyncIterator<TResult> | Promise<AsyncIterator<TResult>>;
}

export interface SubscriptionToCurrentChatResponseArgs {
  mostRecentTimestamp: string;
}
export interface SubscriptionToCurrentChatResponseResolver<TParent = undefined, TResult = ChatResponse | null> {
  resolve?: (parent: TParent, args: SubscriptionToCurrentChatResponseArgs, context: Context, info: GraphQLResolveInfo) => TResult | Promise<TResult>;
  subscribe: (parent: TParent, args: SubscriptionToCurrentChatResponseArgs, context: Context, info: GraphQLResolveInfo) => AsyncIterator<TResult> | Promise<AsyncIterator<TResult>>;
}

export interface SubscriptionToChatStateArgs {
  mostRecentTimestamp: string;
}
export interface SubscriptionToChatStateResolver<TParent = undefined, TResult = ChatState> {
  resolve?: (parent: TParent, args: SubscriptionToChatStateArgs, context: Context, info: GraphQLResolveInfo) => TResult | Promise<TResult>;
  subscribe: (parent: TParent, args: SubscriptionToChatStateArgs, context: Context, info: GraphQLResolveInfo) => AsyncIterator<TResult> | Promise<AsyncIterator<TResult>>;
}

export interface SubscriptionToAuthStatusResolver<TParent = undefined, TResult = AuthEvent | null> {
  resolve?: (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo) => TResult | Promise<TResult>;
  subscribe: (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo) => AsyncIterator<TResult> | Promise<AsyncIterator<TResult>>;
}

export interface OfferEventTypeResolver<TParent = OfferEvent> {
  status?: OfferEventToStatusResolver<TParent>;
  insurance?: OfferEventToInsuranceResolver<TParent>;
}

export interface OfferEventToStatusResolver<TParent = OfferEvent, TResult = OfferStatus> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface OfferEventToInsuranceResolver<TParent = OfferEvent, TResult = Insurance | null> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface SignEventTypeResolver<TParent = SignEvent> {
  status?: SignEventToStatusResolver<TParent>;
}

export interface SignEventToStatusResolver<TParent = SignEvent, TResult = SignStatus | null> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface AuthEventTypeResolver<TParent = AuthEvent> {
  status?: AuthEventToStatusResolver<TParent>;
}

export interface AuthEventToStatusResolver<TParent = AuthEvent, TResult = AuthState | null> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}
